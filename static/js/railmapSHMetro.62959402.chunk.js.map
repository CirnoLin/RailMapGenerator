{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","param","useContext","ParamContext","stnInfo","stn_list","stnId","branchNameDX","branch","left","right","length","name","split","direction","stationIconStyle","services","transfer","info","reduce","acc","cur","xlinkHref","stroke","stnState","transform","infos","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","x","sum","x1","x2","strokeWidth","intInfos","concat","textAnchor","StationName","ref","stnName","fill","osiInfos","forwardRef","others","useMemo","className","fontSize","map","txt","i","key","dy","IntBoxGroup","dx","isLineNumber","Boolean","match","el","IntBoxNumber","IntBoxLetter","memo","dominantBaseline","prevProps","nextProps","toString","textCount","height","y","OSIText","lineNames","join","MainSHMetro","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","includes","ys","branch_spacing","stnStates","getStnState","current_stn_idx","servicesLevel","values","stationInfo","flat","indexOf","bool","filter","s","linePaths","drawLine","paths","stns","_linePath","path","id","svg_height","Line","servicePath","pass","j","d","markerStart","undefined","markerEnd","main","stnIds","type","servicesMax","prevY","prevX","e","servicesDelta","local","express","direct","servicesPassDelta","forEach","hasOwnProperty","xm","ym","h","StationGroup","ServicesElements","service","labelX","dx_hint","serviceLevel","y1","y2","DirectionElements","RailMapSHMetro","DefsSHMetro","r","viewBox","refY","refX","filterUnits","slope","intercept","_objectWithoutProperties","source","excluded","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","stnList","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.62959402.chunk.js","sourcesContent":["import React, { useContext, useRef, memo } from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'l' ? 1 : -1);\n\n    let stationIconStyle = 'stn_sh';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n    else if (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0)) stationIconStyle = 'int2_sh';\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...props.name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g transform={`translate(${props.direction === 'l' ? 6 : -6},-6)rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (\n                <line\n                    x1={0}\n                    x2={props.direction === 'l' ? x : -x}\n                    stroke={props.stnState === -1 ? '#aaa' : 'black'}\n                    strokeWidth={0.5}\n                />\n            )}\n\n            <IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                transform={`translate(${x * (props.direction === 'l' ? 1 : -1)},-10.75)`}\n                direction={props.direction}\n            />\n\n            <g\n                textAnchor={props.direction === 'l' ? 'start' : 'end'}\n                transform={`translate(0,${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={props.name}\n                    fill={props.stnState === -1 ? '#aaa' : props.stnState === 0 ? 'red' : 'black'}\n                />\n\n                {props.infos[1]?.length && (\n                    <g\n                        transform={`translate(${\n                            (x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            (props.direction === 'l' ? 1 : -1)\n                        },-22)`}\n                    >\n                        <OSIText osiInfos={props.infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\">{stnName[0]}</text>\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                const el = (\n                    <g transform={`translate(${dx},0)`} key={i}>\n                        {isLineNumber ? <IntBoxNumber info={info} /> : <IntBoxLetter info={info} />}\n                    </g>\n                );\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                if (props.direction === 'l') {\n                    dx += isLineNumber ? 25 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {'换乘' + lineNames.join('，')}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React, { useContext } from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const services: Services[] = ['local', 'express', 'direct'];\n    const servicesLevel = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services\n        .reduce(\n            (acc, cur) => {\n                acc[services.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [services[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesLevel.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesLevel.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesLevel}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let h = path['end'][0];\n        // let [xb, yb] = path['bifurcate']\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xm} V ${ym}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const { param } = useContext(ParamContext);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g\n            transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                -param.svg_height + 100\n            })`}\n        >\n            <text className=\"rmg-name__zh\">列车前进方向</text>\n            <path\n                d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                fill=\"var(--rmg-theme-colour)\"\n                transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                    param.direction === 'l' ? 0 : 180\n                })scale(0.15)`}\n            />\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\" />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"gray\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}