{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","stnInfo","React","ParamContext","param","stn_list","stnId","xlinkHref","transfer","info","reduce","acc","cur","length","stroke","stnState","className","transform","branch","left","right","name","infos","StationNameGElement","nameENLn","split","stnNameEl","width","bBox","setBBox","current","getBBox","toString","x","Math","cos","textAnchor","StationName","ref","intInfos","concat","sum","osiInfos","fontSize","map","txt","i","key","dy","IntDecorationLine","others","dx","Number","Boolean","match","x1","y1","x2","y2","strokeWidth","IntBoxGroup","isLineNumber","el","IntBoxNumber","IntBoxLetter","height","y","fill","dominantBaseline","prevProps","nextProps","textCount","OSIText","lineNames","join","MainSHMetro","useContext","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","useMemo","console","log","Object","keys","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","includes","ys","branch_spacing","stnStates","getStnState","current_stn_idx","direction","linePaths","drawLine","paths","stns","_linePath","id","svg_height","Line","pass","path","d","main","stnIds","type","prevY","prevX","e","forEach","hasOwnProperty","xm","ym","h","StationGroup","filter","style","RailMapSHMetro","DefsSHMetro","r","_objectWithoutProperties","source","excluded","target","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","stnList","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.c4a4d0a2.chunk.js","sourcesContent":["import * as React from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    return (\n        <>\n            <use\n                xlinkHref={\n                    '#' + (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0) ? 'int2_sh' : 'stn_sh')\n                }\n                stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                className=\"rmg-stn\"\n            />\n            <g transform={`translate(${[...stnInfo.branch.left, ...stnInfo.branch.right].length ? 30 : 0},0)`}>\n                <StationNameGElement name={stnInfo.name} infos={stnInfo.transfer.info} stnState={props.stnState} />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g\n            className=\"Name Future\"\n            transform={`translate(${-(24 + (nameENLn - 1) * 12) * Math.cos(-45)},${-4 -\n                21.921875 -\n                (nameENLn - 1) * 12 * Math.cos(-45)})rotate(-50)`}\n            textAnchor=\"start\"\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n\n            <IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                transform={`translate(${x},0)`}\n            />\n\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (\n                <IntDecorationLine\n                    intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                    x={x}\n                    transform={`translate(0,${props.name[1].split('\\\\').length * 12 + 3})`}\n                />\n            )}\n\n            {props.infos[1]?.length && (\n                <g transform={`translate(${x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15},-30)`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    React.useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\">{props.name[0]}</text>\n                <g fontSize={9.6}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    )\n);\n\nconst IntDecorationLine = (props: { intInfos: InterchangeInfo[] } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, x, ...others } = props;\n\n    // Is it possible to merge the two calculation in one place?\n    // another is in IntBoxGroup\n    let dx =\n        Number(x) +\n        intInfos.reduce((sum, info) => {\n            // start with digit\n            const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n            // 20 + 5(margin) for number line\n            // 60 + 5(margin) for letter line\n            return sum + (isLineNumber ? 25 : info[4].length * 16 + 12 + 5);\n        }, 0);\n    dx -= 5; // minus the margin\n\n    return (\n        <g {...others}>\n            <line x1=\"0\" y1=\"0\" x2={dx} y2=\"0\" stroke=\"black\" strokeWidth={0.8} />\n        </g>\n    );\n};\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[] } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const el = (\n                    <g transform={`translate(${dx},0)`} key={i}>\n                        {isLineNumber ? <IntBoxNumber info={info} /> : <IntBoxLetter info={info} />}\n                    </g>\n                );\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                dx += isLineNumber ? 25 : info[4].length * 16 + 12 + 5;\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <rect height={30} width={20} y={-15} fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" textAnchor=\"middle\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={30} width={textCount * 16 + 12} y={-15} fill={props.info[2]} />\n                <text\n                    x={textCount * 8 + 6}\n                    className=\"rmg-name__zh\"\n                    textAnchor=\"middle\"\n                    fill={props.info[3]}\n                    dominantBaseline=\"central\"\n                >\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\">{'换乘' + lineNames.join('，')}</text>\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\" dy={10}>\n                    仅限公共交通卡\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: { main: string[]; pass: string[] } }) => {\n    return (\n        <>\n            <g className=\"rmg-line rmg-line__pass rmg-line__shmetro\">\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} stroke=\"gray\" strokeWidth={12} fill=\"none\" d={path} />\n                ))}\n            </g>\n            <g className=\"rmg-line rmg-line__shmetro\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} fill=\"var(--rmg-theme-colour)\" d={path} />\n                ))}\n            </g>\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x},${y - 6} L ${x - e},${y - 6} l -12,12 L ${x},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} L ${x + e},${y - 6} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e},${y}`;\n            } else {\n                return `M ${x - e},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e},${y - 6} H ${h} l 0,12 L ${x - 42},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} H ${h + e} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e}`;\n            } else {\n                return `M ${x - e},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let h = path['end'][0];\n        // let [xb, yb] = path['bifurcate']\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x - e - 12} Z`;\n                } else {\n                    // main line, left direction, upper to center\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm} Z`;\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x} Z`;\n                } else {\n                    // main line, right direction, center to upper\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm + e},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm + e + 12} Z`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}