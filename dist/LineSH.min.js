(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(8),i=s(1);class a extends i.m{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get _dxdy(){var t=this.name[1].split("\\").length;let e;return e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6,[e,0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5]}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-50)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends a{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get ungrpIconHTML(){return[...this.intTickHTML]}get iconHTML(){var[t,e]=-1==this.state?["int2_sh_pass","Pass"]:["int2_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn",stroke:this._intInfos[i.d.colour]}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})`}).append($("<g>",{id:`rmg-name__shmetro--${this.id}`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1]))))}get intTickHTML(){let t=[],e=$(`#rmg-name__shmetro--${this.id}`),s=e.get(0).getBoundingClientRect(),n=s.right-s.left+5;this._intInfos.map((e,s)=>{var a=e[i.d.colour],r=$("<use>",{"xlink:href":"#int_sh",fill:a,transform:`translate(${n+25*s},-12)`,class:"rmg-line__shmetro rmg-line__change"});-1==this.state&&r.addClass("rmg-line__pass");let o=String(e[i.d.nameZH]).match(/(\d*)\w+/);if(o)var h=o[0];else h=String(e[i.d.nameZH]);var l=$("<text>",{transform:`translate(${n+10+25*s},8)`,class:"rmg-name__zh rmg-name__shmetro--line_name","text-anchor":"middle",fill:e[i.d.fg]}).text(h);t.push(r,l)});let a=e.parent();return a.attr("transform",`${a.attr("transform")}rotate(-50)`),t}get _nameClass(){return-1==this.state?"Pass":"Future"}}s.d(e,"RMGLineSH",(function(){return o}));class o extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":case"int3_l":case"int3_r":return new r(t,e);case"osi11_ul":case"osi11_pl":case"osi11_ur":case"osi11_pr":case"osi12_ul":case"osi12_pl":case"osi12_ur":case"osi12_pr":case"osi21_ul":case"osi21_pl":case"osi21_ur":case"osi21_pr":case"osi22_ul":case"osi22_pl":case"osi22_ur":case"osi22_pr":default:return new a(t,e)}}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);var t=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,e="l"==this._direction?1:-1,s=(this._svgDestWidth-e*t)/20;s="l"==this._direction?s:this._svgDestWidth-20;var n=90*(1-e);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${s},135)rotate(${n})`);var i=s+285*e;if($("#station_info_shmetro > #platform").attr("transform",`translate(${i},130)`),"r"===this._direction)var a="end",r=.8*this._svgDestWidth;else a="start",r=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${r},135)`,"text-anchor":a});var[o,h]=[[],[]];this[`${this._direction}ValidDests`].forEach(t=>{o.push(this.stations[t].name[0]),h.push(this.stations[t].name[1])}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${o.join("，")}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${h.join(", ")}`);let l="l"===this._direction?this._svgDestWidth:320;var[_,m]=this._lineNames,d=_.match(/(\d*)\w+/);d?(l-=180,_="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-120},70)`}),$("#station_info_shmetro > #line_number > text").text(d[0]).attr("transform",`translate(${l-70},170)`)):(l-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(_),$("#station_info_shmetro > #line_name_text > text:last-child").text(m),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${l},135)`,"text-anchor":"start"});let c="";c="l"==this._direction?`M30,10 H ${this._svgDestWidth-20} V 20 H 20 Z`:`M20,10 H ${this._svgDestWidth-30} l 10,10 H 20 Z`,$("#line_shmetro_use").attr({transform:"translate(0,220)",d:c})}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html());for(let[t,e]of Object.entries(this.stations).filter(t=>t[1]instanceof r))$(`#rmg-name__shmetro--${t}`).parent().append(e.ungrpIconHTML);$("#stn_icons").html($("#stn_icons").html())}_stnYShare(t){return this.branches[0].includes(t)?0:3}_linePath(t,e){var[s,n,i]=[],a={};const r=30;if(t.forEach(t=>{var[e,r]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!n&&0!==n)return[s,i,n]=[t,e,r],void(a.start=[e,r]);0===r?r!=n&&(a.bifurcate=[i,n]):r!=n&&(a.bifurcate=[e,r]),a.end=[e,r],[s,i,n]=[t,e,r]}),a.hasOwnProperty("start")){if(a.hasOwnProperty("end")){if(a.hasOwnProperty("bifurcate")){let[t,s]=a.start,[n,i]=(a.end[0],a.bifurcate),[o,h]=a.end;return"main"===e?"l"===this._direction?h>s?`M ${t-r},${s-6} H ${n+r} L ${o},${h-6} l 0,12 L ${n+r},${i+6} L ${t-r-12},${s+6} Z`:`M ${o},${h-6} H ${n-r} L ${t},${s-6} l 0,12 L ${n-r},${i+6} L ${o},${h+6} Z`:h>s?`M ${t},${s-6} H ${n+r} L ${o},${h-6} l 0,12 L ${n+r},${i+6} L ${t},${s+6} Z`:`M ${o+r},${h-6} H ${n-r} L ${t},${s-6} l 0,12 L ${n-r},${i+6} L ${o+r+12},${h+6} Z`:(this._direction,h>s?`M ${t-r},${s-6} H ${n+r} L ${o},${h-6} l 0,12 L ${n+r},${i+6} L ${t-r},${s+6} Z`:`M ${t},${s-6} L ${n-r},${i-6} H ${o+r} l 0,12 L ${n-r},${i+6} L ${t},${s+6} Z`)}{let[t,s]=a.start,n=a.end[0];return"main"===e?"l"===this._direction?`M ${t-r},${s-6} H ${n} l 0,12 L ${t-42},${s+6} Z`:`M ${t},${s-6} H ${n+r} l 12,12 L ${t},${s+6} Z`:(this._direction,`M ${t-r},${s-6} H ${n+r} l 0,12 L ${t-r},${s+6} Z`)}}{let[t,s]=a.start;return"main"===e?"l"===this._direction?`M ${t},${s-6} L ${t-r},${s-6} l -12,12 L ${t},${s+6} Z`:`M ${t},${s-6} L ${t+r},${s-6} l 12,12 L ${t},${s+6} Z`:"l"===this._direction?`M ${t},${s-6} L ${t+r},${s-6} l 0,12 L ${t-r},${s+6} Z`:`M ${t-r},${s-6} L ${t},${s-6} l 0,12 L ${t-r},${s+6} Z`}}return""}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));let n=this._linePath(e,"main");(n||""!=n)&&$("#line_main").append($("<path>",{id:"line_main_path",d:n})),n=this._linePath(s,"pass"),(n||""!=n)&&$("#line_pass").append($("<path>",{id:"line_pass_path",d:n}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#int2_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("path#int2_sh_pass").attr("stroke","#aaa"),$("path#line_main_path").attr("fill",this._themeColour),$("path#line_pass_path").attr("fill","#aaa"),$("#line_shmetro_use").attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff"),$("#station_info_shmetro > #line_number > text").attr("fill",this._fgColour)}updateStnNameBg(){$("#current_bg").hide()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.drawLine(),t.fillThemeColour(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}set direction(t){super.direction=t,this.fillThemeColour()}set currentStnId(t){super.currentStnId=t,this.fillThemeColour()}updateStnTransfer(t,e,s=null){super.updateStnTransfer(t,e,s),this.fillThemeColour(),$("#stn_icons").empty(),this.drawStns()}addStn(t,e,s,n){let[i,a]=super.addStn(t,e,s,n);return this.fillThemeColour(),[i,a]}set yPc(t){super.yPc=t;let e=t*this._svgHeight/50;$("g#main").attr("transform",`translate(0,${e})`)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvU3RhdGlvbi9TdGF0aW9uU0gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xpbmUvTGluZVNILnRzIl0sIm5hbWVzIjpbImlkIiwiZGF0YSIsInN1cGVyIiwidGhpcyIsInN0bk51bSIsIm51bSIsInkiLCJuYW1lRU5MbiIsIm5hbWUiLCJzcGxpdCIsImxlbmd0aCIsImR4IiwiX25hbWVTaGlmdCIsIl90aWNrUm90YXRpb24iLCJNYXRoIiwiY29zIiwiaWNvblR5cGUiLCJudW1DbGFzcyIsInN0YXRlIiwic3RhdGlvbl9pZCIsIiQiLCJ0cmFuc2Zvcm0iLCJ4IiwiYXBwZW5kIiwiY2xhc3MiLCJkeSIsIl9keGR5IiwiYWRkQ2xhc3MiLCJ0ZXh0IiwiX2ludEluZm9zIiwiaW50ZXJjaGFuZ2UiLCJ1bmdycEhUTUwiLCJpY29uSFRNTCIsIm5hbWVIVE1MIiwiaW50VGlja0hUTUwiLCJzdHJva2UiLCJjb2xvdXIiLCJsaW5lRWxlbXMiLCJzdG5OYW1lRWxlbSIsImJjciIsImdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0IiwibGVmdCIsIm1hcCIsInN0biIsImluZGV4IiwibGluZUljb25Db2xvdXIiLCJsaW5lSWNvbkVsZW0iLCJmaWxsIiwibGluZU51bWJlciIsIlN0cmluZyIsIm5hbWVaSCIsIm1hdGNoIiwibGluZU5hbWUiLCJsaW5lTmFtZUVsZW0iLCJmZyIsInB1c2giLCJzdG5JbmZvRWxlbSIsInBhcmVudCIsImF0dHIiLCJwYXJhbSIsInN0bklkIiwic3RuSW5mbyIsImNoYW5nZV90eXBlIiwiX3BsYXRmb3JtTnVtIiwiZmxhZ0xlbmd0aCIsIndpZHRoIiwiaXNMZWZ0IiwiX2RpcmVjdGlvbiIsImFycm93WCIsIl9zdmdEZXN0V2lkdGgiLCJhcnJvd1JvdGF0ZSIsInBsYXRmb3JtTnVtWCIsInR4dEFuY2hvciIsImRlc3ROYW1lWCIsImRlc3RpbmF0aW9uc196aCIsImRlc3RpbmF0aW9uc19lbiIsImZvckVhY2giLCJzdGF0aW9ucyIsImpvaW4iLCJsaW5lTmFtZVgiLCJsaW5lTmFtZVpIIiwibGluZU5hbWVFTiIsIl9saW5lTmFtZXMiLCJfdGhlbWVDb2xvdXIiLCJoaWRlIiwicGF0aCIsImQiLCJzdG5JbnN0YW5jZSIsIk9iamVjdCIsImVudHJpZXMiLCJpbmNsdWRlcyIsImh0bWwiLCJmaWx0ZXIiLCJ1bmdycEljb25IVE1MIiwiYnJhbmNoZXMiLCJzdG5JZHMiLCJ0eXBlIiwicHJldklkIiwicHJldlkiLCJwcmV2WCIsImUiLCJmdW4iLCJoYXNPd25Qcm9wZXJ0eSIsInhiIiwieWIiLCJ4bSIsInltIiwiaCIsInJlbW92ZUNsYXNzIiwiYnJhbmNoIiwibGluZU1haW5TdG5zIiwibGluZVBhc3NTdG5zIiwiaW5kZXhPZiIsInVuc2hpZnQiLCJfbGluZVBhdGgiLCJmaWxsVGhlbWVDb2xvdXIiLCJfZmdDb2xvdXIiLCJsaW5lIiwiZHJhd1NWR0ZyYW1lIiwic2hvd0ZyYW1lT3V0ZXIiLCJkcmF3U3RucyIsImRyYXdMaW5lIiwiZHJhd1N0cmlwIiwiZHJhd0Rlc3RJbmZvIiwibG9hZEZvbnRzIiwidXBkYXRlU3RuTmFtZUJnIiwidmFsIiwiZGlyZWN0aW9uIiwiY3VycmVudFN0bklkIiwiaW5mbyIsInVwZGF0ZVN0blRyYW5zZmVyIiwiZW1wdHkiLCJwcmVwIiwibG9jIiwiZW5kIiwibmV3SWQiLCJuZXdJbmZvIiwiYWRkU3RuIiwieVBjIiwiX3N2Z0hlaWdodCJdLCJtYXBwaW5ncyI6ImtIQUtBLE1BQU0sVUFBcUIsSUFDdkIsWUFBWUEsRUFBUUMsR0FDaEJDLE1BQU1GLEVBQUlDLEdBQ1ZFLEtBQUtDLE9BQVNILEVBQUtJLElBR3ZCLGlCQUFtQixPQUFPLEVBQzFCLG9CQUFzQixPQUFPRixLQUFLRyxFQUFJLEVBQUksSUFBTSxFQUNoRCxZQUNJLElBQUlDLEVBQVdKLEtBQUtLLEtBQUssR0FBR0MsTUFBTSxNQUFNQyxPQUN4QyxJQUFJQyxFQVNKLE9BUElBLEVBREFSLEtBQUtTLFdBQ3VCLElBQXZCVCxL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YjlILE1BQU1nSSxhQUFlRixFQUVyQjdILEtBQUtrSCxrQkFJVCxrQkFBa0J2RCxFQUFXb0MsRUFBTWlDLEVBQU8sTUFDdENqSSxNQUFNa0ksa0JBQWtCdEUsRUFBT29DLEVBQU1pQyxHQUVyQ2hJLEtBQUtrSCxrQkFHTGpHLEVBQUUsY0FBY2lILFFBQ2hCbEksS0FBS3VILFdBSVQsT0FBT1ksRUFBMEJ4RSxFQUFXeUUsRUFBS0MsR0FDN0MsSUFBS0MsRUFBT0MsR0FBV3hJLE1BQU15SSxPQUFPTCxFQUFNeEUsRUFBT3lFLEVBQUtDLEdBRXRELE9BREFySSxLQUFLa0gsa0JBQ0UsQ0FBQ29CLEVBQU9DLEdBSW5CLFFBQVFWLEdBQ0o5SCxNQUFNMEksSUFBTVosRUFFWixJQUFJMUgsRUFBSTBILEVBQU03SCxLQUFLMEksV0FBYSxHQUNoQ3pILEVBQUUsVUFBVXdDLEtBQUssWUFBYSxlQUFldEQiLCJmaWxlIjoiTGluZVNILm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJNR1N0YXRpb24sIEludEluZm9UYWcsIEludGVyY2hhbmdlSW5mbyB9IGZyb20gJy4vU3RhdGlvbic7XHJcbmltcG9ydCB7IElELCBOYW1lLCBCcmFuY2hJbmZvLCBTdGF0aW9uSW5mbyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmNvbnN0IHN0YXRpb25faWQgPSAnc3RuX3NoJ1xyXG5cclxuY2xhc3MgUk1HU3RhdGlvblNIIGV4dGVuZHMgUk1HU3RhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZDogSUQsIGRhdGE6IFN0YXRpb25JbmZvKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGRhdGEpO1xyXG4gICAgICAgIHRoaXMuc3RuTnVtID0gZGF0YS5udW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9uYW1lU2hpZnQoKSB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7IHJldHVybiB0aGlzLnkgPiAwID8gMTgwIDogMDsgfVxyXG4gICAgZ2V0IF9keGR5KCkge1xyXG4gICAgICAgIHZhciBuYW1lRU5MbiA9IHRoaXMubmFtZVsxXS5zcGxpdCgnXFxcXCcpLmxlbmd0aDtcclxuICAgICAgICBsZXQgZHg6IG51bWJlcjtcclxuICAgICAgICBpZiAodGhpcy5fbmFtZVNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGR4ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gLTkgOiAxNiArIChuYW1lRU5MbiAtIDEpICogMTIgKiBNYXRoLmNvcygtNDUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGR4ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gKDI0ICsgKG5hbWVFTkxuIC0gMSkgKiAxMikgKiBNYXRoLmNvcygtNDUpIDogLTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxldCBkeCA9IHRoaXMuX25hbWVTaGlmdCA/IC04IDogKDI0ICsgKG5hbWVFTkxuLTEpKjEyKSAqIE1hdGguY29zKC00NSk7XHJcbiAgICAgICAgbGV0IGR5ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gKC00IC0gMjEuOTIxODc1IC0gKG5hbWVFTkxuIC0gMSkgKiAxMiAqIE1hdGguY29zKC00NSkpIDogMTcuNTtcclxuICAgICAgICAvLyB2YXIgZHkgPSAoLTQgLSAyMS45MjE4NzUgLSAobmFtZUVOTG4tMSkqMTIqTWF0aC5jb3MoLTQ1KSkgKiAodGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gMSA6IC0xKTtcclxuICAgICAgICByZXR1cm4gW2R4LCBkeV1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgdmFyIFtpY29uVHlwZSwgbnVtQ2xhc3NdID0gKHRoaXMuc3RhdGUgPT0gLTEpID8gW3N0YXRpb25faWQgKyAnX3Bhc3MnLCAnUGFzcyddIDogW3N0YXRpb25faWQsICdGdXR1cmUnXTtcclxuICAgICAgICByZXR1cm4gJCgnPGc+JywgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlgIH0pXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJCgnPHVzZT4nLCB7ICd4bGluazpocmVmJzogJyMnICsgaWNvblR5cGUsIGNsYXNzOiAncm1nLXN0bicgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lSFRNTCgpIHtcclxuICAgICAgICBsZXQgW2R4LCBkeV0gPSB0aGlzLl9keGR5XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnggLSBkeH0sJHt0aGlzLnkgKyBkeX0pcm90YXRlKC01MClgLFxyXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiB0aGlzLl90aWNrUm90YXRpb24gPT09IDAgPyAnc3RhcnQnIDogJ2VuZCcsXHJcbiAgICAgICAgICAgIC8vIGNsYXNzOiBgTmFtZSAke3RoaXMubmFtZUNsYXNzfWBcclxuICAgICAgICAgICAgY2xhc3M6IGBOYW1lIEZ1dHVyZWAgIC8vIHRvZG86IGZpeCB0aGlzXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nKS5hZGRDbGFzcygncm1nLW5hbWVfX3poIHJtZy1uYW1lX19zaG1ldHJvLS1zdGF0aW9uJykudGV4dCh0aGlzLm5hbWVbMF0pXHJcbiAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICQoJzx0ZXh0PicsIHtcclxuICAgICAgICAgICAgICAgIGR5OiAxNSwgY2xhc3M6ICdybWctbmFtZV9fZW4gcm1nLW5hbWVfX3NobWV0cm8tLXN0YXRpb24nXHJcbiAgICAgICAgICAgIH0pLnRleHQodGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJylbMF0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzx0c3Bhbj4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3gnOiAwLCAnZHknOiAxMlxyXG4gICAgICAgICAgICAgICAgfSkudGV4dCh0aGlzLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEludFN0YXRpb25TSCBleHRlbmRzIFJNR1N0YXRpb25TSCB7XHJcbiAgICBwcm90ZWN0ZWQgX2ludEluZm9zOiBJbnRlcmNoYW5nZUluZm9bXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZDogSUQsIGRhdGE6IFN0YXRpb25JbmZvKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGRhdGEpO1xyXG4gICAgICAgIHRoaXMuX2ludEluZm9zID0gZGF0YS5pbnRlcmNoYW5nZVswXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXdyaXRlIHRoaXMgdG8gYXBwZW5kIGRvbSBhbmQgdGhlbiBnZXRCb3VuZGluZ0NsaWVudFJlY3RcclxuICAgIC8vIHRvIGdldCB0aGUgZXhhY3QgcG9zaXRpb24gd2hlcmUgaW50IGljb24gY2FuIGJlIGZpdFxyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHsgaWQ6IHRoaXMuaWQgfSkuYXBwZW5kKC4uLnRoaXMudW5ncnBIVE1MKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXdyaXRlIHRoaXMgdG8gZ2V0IGFsbCBkcmF3aW5nIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUxdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1bmdycEljb25IVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy5pbnRUaWNrSFRNTF1cclxuICAgIH1cclxuXHJcbiAgICAvLyBpbnRlcmNoYW5nZSBzdGF0aW9uIGljb24gb24gbWFpbiBsaW5lXHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgdmFyIFtpY29uVHlwZSwgbnVtQ2xhc3NdID0gKHRoaXMuc3RhdGUgPT0gLTEpID8gWydpbnQyX3NoX3Bhc3MnLCAnUGFzcyddIDogWydpbnQyX3NoJywgJ0Z1dHVyZSddO1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7IHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueH0sJHt0aGlzLnl9KWAgfSlcclxuICAgICAgICAgICAgLmFwcGVuZCgkKCc8dXNlPicsIHsgJ3hsaW5rOmhyZWYnOiAnIycgKyBpY29uVHlwZSwgY2xhc3M6ICdybWctc3RuJywgc3Ryb2tlOiB0aGlzLl9pbnRJbmZvc1tJbnRJbmZvVGFnLmNvbG91cl0gfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlZ3VsYXIgc3RhdGlvbiBuYW1lXHJcbiAgICBnZXQgbmFtZUhUTUwoKSB7XHJcbiAgICAgICAgbGV0IFtkeCwgZHldID0gdGhpcy5fZHhkeTtcclxuICAgICAgICAvLyB3cmFwIHRoZSBuYW1lLCBkZWNyb19saW5lIGFuZCBpbnRfbGluZSB1bmRlciBnIGluIG9yZGVyIHRvIHJvdGF0ZSBhdCBvbmNlXHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54IC0gZHh9LCR7dGhpcy55ICsgZHl9KWAsICAvL3JvdGF0ZSgtNjApXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgbmFtZSB0ZXh0XHJcbiAgICAgICAgICAgICQoJzxnPicsIHtcclxuICAgICAgICAgICAgICAgIGlkOiBgcm1nLW5hbWVfX3NobWV0cm8tLSR7dGhpcy5pZH1gLFxyXG4gICAgICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gJ3N0YXJ0JyA6ICdlbmQnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6IGBOYW1lIEZ1dHVyZWAgIC8vIHRvZG86IGZpeCB0aGlzXHJcbiAgICAgICAgICAgIH0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzx0ZXh0PicpLmFkZENsYXNzKCdybWctbmFtZV9femggcm1nLW5hbWVfX3NobWV0cm8tLXN0YXRpb24nKS50ZXh0KHRoaXMubmFtZVswXSlcclxuICAgICAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dGV4dD4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHk6IDE1LCBjbGFzczogJ3JtZy1uYW1lX19lbiBybWctbmFtZV9fc2htZXRyby0tc3RhdGlvbidcclxuICAgICAgICAgICAgICAgIH0pLnRleHQodGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJylbMF0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICAgICAkKCc8dHNwYW4+Jywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAneCc6IDAsICdkeSc6IDEyXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGV4dCh0aGlzLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICAvLyBpbnRlcmNoYW5nZSBzdGF0aW9uIGljb24gYWZ0ZXIgdGhlIHN0YXRpb24gbmFtZVxyXG4gICAgZ2V0IGludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIGxldCBsaW5lRWxlbXM6IEpRdWVyeTxIVE1MRWxlbWVudD5bXSA9IFtdXHJcblxyXG4gICAgICAgIC8vIGdldCB0aGUgZXhhY3Qgc3RhdGlvbiBuYW1lIHdpZHRoIHNvIHRoYXQgdGhlXHJcbiAgICAgICAgLy8gaW50ZXJjaGFuZ2Ugc3RhdGlvbiBpY29uIGNhbiBiZSByaWdodCBhZnRlciB0aGUgc3RhdGlvbiBuYW1lXHJcbiAgICAgICAgbGV0IHN0bk5hbWVFbGVtID0gJChgI3JtZy1uYW1lX19zaG1ldHJvLS0ke3RoaXMuaWR9YClcclxuICAgICAgICBsZXQgYmNyID0gc3RuTmFtZUVsZW0uZ2V0KDApLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgICAgbGV0IGR4ID0gYmNyLnJpZ2h0IC0gYmNyLmxlZnQgKyA1XHJcblxyXG4gICAgICAgIHRoaXMuX2ludEluZm9zLm1hcCgoc3RuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBpbnRlcmNoYW5nZSBsaW5lIGljb24gYWZ0ZXIgc3RhdGlvbiBuYW1lXHJcbiAgICAgICAgICAgIHZhciBsaW5lSWNvbkNvbG91ciA9IHN0bltJbnRJbmZvVGFnLmNvbG91cl07XHJcbiAgICAgICAgICAgIHZhciBsaW5lSWNvbkVsZW0gPSAkKCc8dXNlPicsIHtcclxuICAgICAgICAgICAgICAgICd4bGluazpocmVmJzogJyNpbnRfc2gnLFxyXG4gICAgICAgICAgICAgICAgZmlsbDogbGluZUljb25Db2xvdXIsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtkeCArIGluZGV4ICogMjV9LC0xMilgLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdybWctbGluZV9fc2htZXRybyBybWctbGluZV9fY2hhbmdlJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lSWNvbkVsZW0uYWRkQ2xhc3MoJ3JtZy1saW5lX19wYXNzJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGxpbmUgc3RhcnRzIHdpdGggbnVtYmVycyBvciBsZXR0ZXJzXHJcbiAgICAgICAgICAgIGxldCBsaW5lTnVtYmVyID0gU3RyaW5nKHN0bltJbnRJbmZvVGFnLm5hbWVaSF0pLm1hdGNoKC8oXFxkKilcXHcrLylcclxuICAgICAgICAgICAgaWYgKGxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5lTmFtZSA9IGxpbmVOdW1iZXJbMF1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5lTmFtZSA9IFN0cmluZyhzdG5bSW50SW5mb1RhZy5uYW1lWkhdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGludGVyY2hhbmdlIGxpbmUgbmFtZVxyXG4gICAgICAgICAgICB2YXIgbGluZU5hbWVFbGVtID0gJCgnPHRleHQ+Jywge1xyXG4gICAgICAgICAgICAgICAgLy8gVG9kbzogZml4IHRoaXMgaGFyZC1jb2RlZCBjZW50ZXIoMTApIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtkeCArIDEwICsgaW5kZXggKiAyNX0sOClgLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdybWctbmFtZV9femggcm1nLW5hbWVfX3NobWV0cm8tLWxpbmVfbmFtZScsXHJcbiAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAnbWlkZGxlJyxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHN0bltJbnRJbmZvVGFnLmZnXSxcclxuICAgICAgICAgICAgfSkudGV4dChsaW5lTmFtZSlcclxuXHJcbiAgICAgICAgICAgIGxpbmVFbGVtcy5wdXNoKGxpbmVJY29uRWxlbSwgbGluZU5hbWVFbGVtKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIHJvdGF0ZSB0aGUgc3RhdGlvbiBpbmZvIG5vd1xyXG4gICAgICAgIC8vIG90aGVyIHdpc2UgdGhlIGJjciB3aWxsIGJlIGluYWNjdXJhdGUgZHVlIHRvIHRoZSByb3RhdGlvblxyXG4gICAgICAgIGxldCBzdG5JbmZvRWxlbSA9IHN0bk5hbWVFbGVtLnBhcmVudCgpO1xyXG4gICAgICAgIHN0bkluZm9FbGVtLmF0dHIoJ3RyYW5zZm9ybScsIGAke3N0bkluZm9FbGVtLmF0dHIoJ3RyYW5zZm9ybScpfXJvdGF0ZSgtNTApYClcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpbmVFbGVtcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX25hbWVDbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGUgPT0gLTEpID8gJ1Bhc3MnIDogJ0Z1dHVyZSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFJNR1N0YXRpb25TSCwgSW50U3RhdGlvblNILCBzdGF0aW9uX2lkIH07XHJcbiIsImltcG9ydCB7IFJNR0xpbmUgfSBmcm9tICcuL0xpbmUnO1xyXG5pbXBvcnQgeyBSTUdTdGF0aW9uU0gsIEludFN0YXRpb25TSCwgc3RhdGlvbl9pZCB9IGZyb20gJy4uL1N0YXRpb24vU3RhdGlvblNIJztcclxuaW1wb3J0IHsgUk1HU3RhdGlvbiB9IGZyb20gJy4uL1N0YXRpb24vU3RhdGlvbic7XHJcblxyXG5pbXBvcnQgeyBJRCwgTmFtZSwgU3RhdGlvbkluZm8sIFJNR1BhcmFtLCBzZXRQYXJhbXMgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUk1HTGluZVNIIGV4dGVuZHMgUk1HTGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtKTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdFN0bkluc3RhbmNlKHN0bklkOiBJRCwgc3RuSW5mbzogU3RhdGlvbkluZm8pOiBSTUdTdGF0aW9uIHtcclxuICAgICAgICBzd2l0Y2ggKHN0bkluZm8uY2hhbmdlX3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaW50Mic6XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDNfbCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDNfcic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEludFN0YXRpb25TSChzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTExX3VsJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTFfcGwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kxMV91cic6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTExX3ByJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTJfdWwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kxMl9wbCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTEyX3VyJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTJfcHInOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kyMV91bCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIxX3BsJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMjFfdXInOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kyMV9wcic6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIyX3VsJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMjJfcGwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kyMl91cic6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIyX3ByJzpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUk1HU3RhdGlvblNIKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZHJhdyB0aGUgZGVzdGluYXRpb25cclxuICAgIGRyYXdEZXN0SW5mbygpIHtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjcGxhdGZvcm0gPiB0ZXh0JykudGV4dCh0aGlzLl9wbGF0Zm9ybU51bSk7XHJcblxyXG4gICAgICAgIHZhciBiY3IgPSAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjZGVzdF90ZXh0JylbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIGZsYWdMZW5ndGggPSAxNjAgKyAxNTAgKyBiY3Iud2lkdGggKyA0NSArIDUwO1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8vIGFycm93XHJcbiAgICAgICAgdmFyIGlzTGVmdCA9ICh0aGlzLl9kaXJlY3Rpb24gPT0gJ2wnKSA/IDEgOiAtMTtcclxuICAgICAgICB2YXIgYXJyb3dYID0gKHRoaXMuX3N2Z0Rlc3RXaWR0aCAtIGlzTGVmdCAqIGZsYWdMZW5ndGgpIC8gMjA7XHJcbiAgICAgICAgYXJyb3dYID0gKHRoaXMuX2RpcmVjdGlvbiA9PSAnbCcpID8gYXJyb3dYIDogdGhpcy5fc3ZnRGVzdFdpZHRoIC0gMjA7XHJcbiAgICAgICAgdmFyIGFycm93Um90YXRlID0gOTAgKiAoMSAtIGlzTGVmdCk7XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2Fycm93X2xlZnRfdXNlJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2Fycm93WH0sMTM1KXJvdGF0ZSgke2Fycm93Um90YXRlfSlgKTtcclxuXHJcbiAgICAgICAgLy8gbm90IGluIHVzZSBub3dcclxuICAgICAgICB2YXIgcGxhdGZvcm1OdW1YID0gYXJyb3dYICsgaXNMZWZ0ICogKDE2MCArIDUwICsgNzUpO1xyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNwbGF0Zm9ybScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtwbGF0Zm9ybU51bVh9LDEzMClgKTtcclxuXHJcbiAgICAgICAgLy8gbGlzdCB0aGUgZGVzdGluYXRpb24gdGV4dFxyXG4gICAgICAgIC8vIFRvZG86IGZpeCBzdmdfZGVzdF93aWR0aCowLjgsIHRoaXMgaGFzIG9ubHkgYmVlbiB0ZXN0ZWQgb24gMTAwMCB3aWR0aFxyXG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdyJykge1xyXG4gICAgICAgICAgICB2YXIgdHh0QW5jaG9yID0gJ2VuZCc7XHJcbiAgICAgICAgICAgIHZhciBkZXN0TmFtZVggPSB0aGlzLl9zdmdEZXN0V2lkdGggKiAwLjg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHR4dEFuY2hvciA9ICdzdGFydCc7XHJcbiAgICAgICAgICAgIHZhciBkZXN0TmFtZVggPSB0aGlzLl9zdmdEZXN0V2lkdGggKiAwLjI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNkZXN0X3RleHQnKS5hdHRyKHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7ZGVzdE5hbWVYfSwxMzUpYCxcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdHh0QW5jaG9yXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGZvciBlYWNoIGxlZnQgdmFsaWQgZGVzdGluYXRpb25zLCBnZXQgdGhlIG5hbWUgZnJvbSBpZFxyXG4gICAgICAgIHZhciBbZGVzdGluYXRpb25zX3poLCBkZXN0aW5hdGlvbnNfZW5dOiBTdHJpbmdbXVtdID0gW1tdLCBbXV1cclxuICAgICAgICB0aGlzW2Ake3RoaXMuX2RpcmVjdGlvbn1WYWxpZERlc3RzYF0uZm9yRWFjaChzdG4gPT4ge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbnNfemgucHVzaCh0aGlzLnN0YXRpb25zW3N0bl0ubmFtZVswXSlcclxuICAgICAgICAgICAgZGVzdGluYXRpb25zX2VuLnB1c2godGhpcy5zdGF0aW9uc1tzdG5dLm5hbWVbMV0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2Rlc3RfdGV4dCA+IHRleHQ6Zmlyc3QtY2hpbGQnKS50ZXh0KGDlvoAke2Rlc3RpbmF0aW9uc196aC5qb2luKFwi77yMXCIpfWApXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2Rlc3RfdGV4dCA+IHRleHQ6bGFzdC1jaGlsZCcpLnRleHQoYFRvICR7ZGVzdGluYXRpb25zX2VuLmpvaW4oXCIsIFwiKX1gKVxyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIGZvciB0aGUgbGluZSBuYW1lXHJcbiAgICAgICAgbGV0IGxpbmVOYW1lWCA9IHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnID8gdGhpcy5fc3ZnRGVzdFdpZHRoIDogMzIwXHJcbiAgICAgICAgdmFyIFtsaW5lTmFtZVpILCBsaW5lTmFtZUVOXSA9IHRoaXMuX2xpbmVOYW1lcztcclxuXHJcbiAgICAgICAgLy8gbGluZSBzdGFydHMgd2l0aCBudW1iZXJzIG9yIGxldHRlcnNcclxuICAgICAgICB2YXIgbGluZU51bWJlciA9IGxpbmVOYW1lWkgubWF0Y2goLyhcXGQqKVxcdysvKVxyXG4gICAgICAgIGlmIChsaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWCAtPSAxODA7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWkggPSBcIuWPt+e6v1wiXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHJlY3QnKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICdzdHlsZSc6IGBmaWxsOiR7dGhpcy5fdGhlbWVDb2xvdXJ9YCxcclxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlKCR7bGluZU5hbWVYIC0gMTIwfSw3MClgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHRleHQnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQobGluZU51bWJlclswXSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bGluZU5hbWVYIC0gNzB9LDE3MClgKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWCAtPSAyODA7XHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHJlY3QnKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICdzdHlsZSc6IGBmaWxsOiR7dGhpcy5fdGhlbWVDb2xvdXJ9YCxcclxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlKCR7bGluZU5hbWVYIC0gMTB9LDYwKWAsXHJcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAyNjAsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogMTUwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHRleHQnKS5oaWRlKClcclxuXHJcbiAgICAgICAgICAgIC8vIFRvZG86IHNldCB0aGUgZW5nIGluIHRoZSBtaWRkbGVcclxuICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbmFtZV90ZXh0ID4gdGV4dDpsYXN0LWNoaWxkJykuYXR0cignZHgnLCAxMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldCB0aGUgbGluZSBuYW1lXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbmFtZV90ZXh0ID4gdGV4dDpmaXJzdC1jaGlsZCcpLnRleHQobGluZU5hbWVaSClcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjbGluZV9uYW1lX3RleHQgPiB0ZXh0Omxhc3QtY2hpbGQnKS50ZXh0KGxpbmVOYW1lRU4pXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbmFtZV90ZXh0JykuYXR0cih7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke2xpbmVOYW1lWH0sMTM1KWAsXHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdzdGFydCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhlIGxhc3QgZGVjb3JhdGlvbiBsaW5lXHJcbiAgICAgICAgbGV0IHBhdGggPSAnJ1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT0gJ2wnKSB7XHJcbiAgICAgICAgICAgIHBhdGggPSBgTTMwLDEwIEggJHt0aGlzLl9zdmdEZXN0V2lkdGggLSAyMH0gViAyMCBIIDIwIFpgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGF0aCA9IGBNMjAsMTAgSCAke3RoaXMuX3N2Z0Rlc3RXaWR0aCAtIDMwfSBsIDEwLDEwIEggMjAgWmBcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnI2xpbmVfc2htZXRyb191c2UnKS5hdHRyKHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKDAsMjIwKWAsXHJcbiAgICAgICAgICAgIGQ6IHBhdGgsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXdyaXRlIHRoaXMgdG8gYXBwZW5kIGRvbSBhbmQgdGhlbiBnZXRCb3VuZGluZ0NsaWVudFJlY3RcclxuICAgIC8vIHRvIGdldCB0aGUgZXhhY3QgcG9zaXRpb24gd2hlcmUgaW50IGljb24gY2FuIGJlIGZpdFxyXG4gICAgZHJhd1N0bnMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHsgY29udGludWU7IH1cclxuICAgICAgICAgICAgJCgnI3N0bl9pY29ucycpLmFwcGVuZChzdG5JbnN0YW5jZS5odG1sKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnI3N0bl9pY29ucycpLmh0bWwoJCgnI3N0bl9pY29ucycpLmh0bWwoKSk7IC8vIFJlZnJlc2ggRE9NXHJcblxyXG4gICAgICAgIGZvciAobGV0IFtzdG5JZCwgc3RuSW5zdGFuY2VdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGlvbnMpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoc3RuID0+IHN0blsxXSBpbnN0YW5jZW9mIEludFN0YXRpb25TSCkgYXMgW0lELCBJbnRTdGF0aW9uU0hdW10pIHtcclxuICAgICAgICAgICAgJChgI3JtZy1uYW1lX19zaG1ldHJvLS0ke3N0bklkfWApLnBhcmVudCgpLmFwcGVuZChzdG5JbnN0YW5jZS51bmdycEljb25IVE1MKVxyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcjc3RuX2ljb25zJykuaHRtbCgkKCcjc3RuX2ljb25zJykuaHRtbCgpKTsgLy8gUmVmcmVzaCBET01cclxuICAgIH1cclxuXHJcbiAgICAvLyByZXdyaXRlIHRoaXMgdG8gY2hhbmdlIHRoZSB5IG9mIGJyYW5jaCBzdGF0aW9uXHJcbiAgICBfc3RuWVNoYXJlKHN0bklkKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5icmFuY2hlc1swXS5pbmNsdWRlcyhzdG5JZCkpIHJldHVybiAwO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIDNcclxuICAgIH1cclxuXHJcbiAgICBfbGluZVBhdGgoc3RuSWRzOiBJRFtdLCB0eXBlPzogJ21haW4nIHwgJ3Bhc3MnKTogc3RyaW5nIHtcclxuICAgICAgICB2YXIgW3ByZXZJZCwgcHJldlksIHByZXZYXTogW3N0cmluZz8sIG51bWJlcj8sIG51bWJlcj9dID0gW11cclxuICAgICAgICB2YXIgcGF0aDogeyBba2V5OiBzdHJpbmddOiBudW1iZXJbXSB9ID0ge31cclxuICAgICAgICBjb25zdCBlID0gMzBcclxuXHJcbiAgICAgICAgc3RuSWRzLmZvckVhY2goc3RuSWQgPT4ge1xyXG4gICAgICAgICAgICB2YXIgW3gsIHldID0gWydfc3RuUmVhbFgnLCAnX3N0blJlYWxZJ10ubWFwKGZ1biA9PiB0aGlzW2Z1bl0oc3RuSWQpKVxyXG4gICAgICAgICAgICBpZiAoIXByZXZZICYmIHByZXZZICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBbcHJldklkLCBwcmV2WCwgcHJldlldID0gW3N0bklkLCB4LCB5XTtcclxuICAgICAgICAgICAgICAgIHBhdGhbJ3N0YXJ0J10gPSBbeCwgeV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbWVyZ2UgYmFjayB0byBtYWluIGxpbmVcclxuICAgICAgICAgICAgICAgIGlmICh5ICE9IHByZXZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFsnYmlmdXJjYXRlJ10gPSBbcHJldlgsIHByZXZZXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gb24gdGhlIGJyYW5jaCBsaW5lXHJcbiAgICAgICAgICAgICAgICBpZiAoeSAhPSBwcmV2WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhbJ2JpZnVyY2F0ZSddID0gW3gsIHldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGF0aFsnZW5kJ10gPSBbeCwgeV07XHJcbiAgICAgICAgICAgIFtwcmV2SWQsIHByZXZYLCBwcmV2WV0gPSBbc3RuSWQsIHgsIHldO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBnZW5lcmF0ZSBwYXRoXHJcbiAgICAgICAgaWYgKCFwYXRoLmhhc093blByb3BlcnR5KCdzdGFydCcpKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGxpbmUgZ2VuZXJhdGVkXHJcbiAgICAgICAgICAgIC8vIGtleXMgaW4gcGF0aDogbm9uZVxyXG4gICAgICAgICAgICByZXR1cm4gJydcclxuICAgICAgICB9IGVsc2UgaWYgKCFwYXRoLmhhc093blByb3BlcnR5KCdlbmQnKSkge1xyXG4gICAgICAgICAgICAvLyBsaXR0ZSBsaW5lIChvbmx5IGJleW9uZCB0ZXJtaW5hbCBzdGF0aW9uKVxyXG4gICAgICAgICAgICAvLyBrZXlzIGluIHBhdGg6IHN0YXJ0XHJcbiAgICAgICAgICAgIGxldCBbeCwgeV0gPSBwYXRoWydzdGFydCddXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbWFpbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgYXQgdGVybWluYWwoZW5kKSBzdGF0aW9uLCBkcmF3IHRoZSBsaXR0ZSBtYWluIGxpbmVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgTSAke3h9LCR7eSAtIDZ9IEwgJHt4IC0gZX0sJHt5IC0gNn0gbCAtMTIsMTIgTCAke3h9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgTSAke3h9LCR7eSAtIDZ9IEwgJHt4ICsgZX0sJHt5IC0gNn0gbCAxMiwxMiBMICR7eH0sJHt5ICsgNn0gWmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHR5cGUgPT09ICdwYXNzJ1xyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCBhdCB0ZXJtaW5hbChzdGFydCkgc3RhdGlvbiwgZHJhdyB0aGUgbGl0dGUgcGFzcyBsaW5lXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYE0gJHt4fSwke3kgLSA2fSBMICR7eCArIGV9LCR7eSAtIDZ9IGwgMCwxMiBMICR7eCAtIGV9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgTSAke3ggLSBlfSwke3kgLSA2fSBMICR7eH0sJHt5IC0gNn0gbCAwLDEyIEwgJHt4IC0gZX0sJHt5ICsgNn0gWmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcGF0aC5oYXNPd25Qcm9wZXJ0eSgnYmlmdXJjYXRlJykpIHtcclxuICAgICAgICAgICAgLy8gZ2VuZXJhbCBtYWluIGxpbmVcclxuICAgICAgICAgICAgLy8ga2V5cyBpbiBwYXRoOiBzdGFydCwgZW5kXHJcbiAgICAgICAgICAgIGxldCBbeCwgeV0gPSBwYXRoWydzdGFydCddLCBoID0gcGF0aFsnZW5kJ11bMF1cclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdtYWluJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eCAtIGV9LCR7eSAtIDZ9IEggJHtofSBsIDAsMTIgTCAke3ggLSA0Mn0sJHt5ICsgNn0gWmBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eH0sJHt5IC0gNn0gSCAke2ggKyBlfSBsIDEyLDEyIEwgJHt4fSwke3kgKyA2fSBaYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdHlwZSA9PT0gJ3Bhc3MnXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYE0gJHt4IC0gZX0sJHt5IC0gNn0gSCAke2ggKyBlfSBsIDAsMTIgTCAke3ggLSBlfSwke3kgKyA2fSBaYFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYE0gJHt4IC0gZX0sJHt5IC0gNn0gSCAke2ggKyBlfSBsIDAsMTIgTCAke3ggLSBlfSwke3kgKyA2fSBaYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbWFpbiBsaW5lIGJpZnVyY2F0ZSBoZXJlIHRvIGJlY29tZSB0aGUgYnJhbmNoIGxpbmVcclxuICAgICAgICAgICAgLy8gYW5kIHBhdGggcmV0dXJuIGhlcmUgYXJlIG9ubHkgYnJhbmNoIGxpbmVcclxuICAgICAgICAgICAgLy8ga2V5cyBpbiBwYXRoOiBzdGFydCwgYmlmdXJjYXRlLCBlbmRcclxuXHJcbiAgICAgICAgICAgIC8vIFRvZG86IGRpc2FibGUgbG93ZXIgYnJhbmNoXHJcbiAgICAgICAgICAgIGxldCBbeCwgeV0gPSBwYXRoWydzdGFydCddLCBoID0gcGF0aFsnZW5kJ11bMF1cclxuICAgICAgICAgICAgbGV0IFt4YiwgeWJdID0gcGF0aFsnYmlmdXJjYXRlJ10sIFt4bSwgeW1dID0gcGF0aFsnZW5kJ11cclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdtYWluJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHltID4geSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWluIGxpbmUsIGxlZnQgZGlyZWN0aW9uLCBjZW50ZXIgdG8gdXBwZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eCAtIGV9LCR7eSAtIDZ9IEggJHt4YiArIGV9IEwgJHt4bX0sJHt5bSAtIDZ9IGwgMCwxMiBMICR7eGIgKyBlfSwke3liICsgNn0gTCAke3ggLSBlIC0gMTJ9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFpbiBsaW5lLCBsZWZ0IGRpcmVjdGlvbiwgdXBwZXIgdG8gY2VudGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgc2FtZSBhcyB0aGUgb3RoZXIsIGJ1dCByZXBsYWNlIHggd2l0aCB4bSBhbmQgeG0gd2l0aCB4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgTSAke3htfSwke3ltIC0gNn0gSCAke3hiIC0gZX0gTCAke3h9LCR7eSAtIDZ9IGwgMCwxMiBMICR7eGIgLSBlfSwke3liICsgNn0gTCAke3htfSwke3ltICsgNn0gWmBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh5bSA+IHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFpbiBsaW5lLCByaWdodCBkaXJlY3Rpb24sIHVwcGVyIHRvIGNlbnRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYE0gJHt4fSwke3kgLSA2fSBIICR7eGIgKyBlfSBMICR7eG19LCR7eW0gLSA2fSBsIDAsMTIgTCAke3hiICsgZX0sJHt5YiArIDZ9IEwgJHt4fSwke3kgKyA2fSBaYFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1haW4gbGluZSwgcmlnaHQgZGlyZWN0aW9uLCBjZW50ZXIgdG8gdXBwZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBzYW1lIGFzIHRoZSBvdGhlciwgYnV0IHJlcGxhY2UgeCB3aXRoIHhtIGFuZCB4bSB3aXRoIHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eG0gKyBlfSwke3ltIC0gNn0gSCAke3hiIC0gZX0gTCAke3h9LCR7eSAtIDZ9IGwgMCwxMiBMICR7eGIgLSBlfSwke3liICsgNn0gTCAke3htICsgZSArIDEyfSwke3ltICsgNn0gWmBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0eXBlID09PSAncGFzcydcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh5bSA+IHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFzcyBsaW5lLCBsZWZ0IGRpcmVjdGlvbiwgY2VudGVyIHRvIHVwcGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgTSAke3ggLSBlfSwke3kgLSA2fSBIICR7eGIgKyBlfSBMICR7eG19LCR7eW0gLSA2fSBsIDAsMTIgTCAke3hiICsgZX0sJHt5YiArIDZ9IEwgJHt4IC0gZX0sJHt5ICsgNn0gWmBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXNzIGxpbmUsIGxlZnQgZGlyZWN0aW9uLCB1cHBlciB0byBjZW50ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBzYW1lIGFzIHRoZSBvdGhlciwgYnV0IHJlcGxhY2UgeCB3aXRoIHhtIGFuZCB4bSB3aXRoIHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eH0sJHt5IC0gNn0gTCAke3hiIC0gZX0sJHt5YiAtIDZ9IEggJHt4bSArIGV9IGwgMCwxMiBMICR7eGIgLSBlfSwke3liICsgNn0gTCAke3h9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeW0gPiB5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgbGluZSwgcmlnaHQgZGlyZWN0aW9uLCB1cHBlciB0byBjZW50ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eCAtIGV9LCR7eSAtIDZ9IEggJHt4YiArIGV9IEwgJHt4bX0sJHt5bSAtIDZ9IGwgMCwxMiBMICR7eGIgKyBlfSwke3liICsgNn0gTCAke3ggLSBlfSwke3kgKyA2fSBaYFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgbGluZSwgcmlnaHQgZGlyZWN0aW9uLCBjZW50ZXIgdG8gdXBwZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBzYW1lIGFzIHRoZSBvdGhlciwgYnV0IHJlcGxhY2UgeCB3aXRoIHhtIGFuZCB4bSB3aXRoIHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBNICR7eH0sJHt5IC0gNn0gTCAke3hiIC0gZX0sJHt5YiAtIDZ9IEggJHt4bSArIGV9IGwgMCwxMiBMICR7eGIgLSBlfSwke3liICsgNn0gTCAke3h9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGRyYXcgdGhlIGxpbmUgaW4gcmFpbG1hcFxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGFkZCBpZCB0byBlbGVtZW50XHJcbiAgICBkcmF3TGluZSgpIHtcclxuICAgICAgICAkKCcucm1nLWxpbmUnKS5yZW1vdmVDbGFzcygncm1nLWxpbmVfX210cicpLmFkZENsYXNzKCdybWctbGluZV9fc2htZXRybycpO1xyXG5cclxuICAgICAgICB0aGlzLmJyYW5jaGVzLm1hcChicmFuY2ggPT4ge1xyXG4gICAgICAgICAgICB2YXIgbGluZU1haW5TdG5zID0gYnJhbmNoLmZpbHRlcihzdG5JZCA9PiB0aGlzLnN0YXRpb25zW3N0bklkXS5zdGF0ZSA+PSAwKTtcclxuICAgICAgICAgICAgdmFyIGxpbmVQYXNzU3RucyA9IGJyYW5jaC5maWx0ZXIoc3RuSWQgPT4gdGhpcy5zdGF0aW9uc1tzdG5JZF0uc3RhdGUgPD0gMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobGluZU1haW5TdG5zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgbGluZVBhc3NTdG5zID0gYnJhbmNoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobGluZU1haW5TdG5zLmZpbHRlcihzdG5JZCA9PiBsaW5lUGFzc1N0bnMuaW5kZXhPZihzdG5JZCkgIT09IC0xKS5sZW5ndGggPT0gMCAmJiBsaW5lTWFpblN0bnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0d28gc2V0IGRpc2pvaW50XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZVBhc3NTdG5zWzBdID09PSBicmFuY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAtMSAtMSAxIDFcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUGFzc1N0bnMucHVzaChsaW5lTWFpblN0bnNbMF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lTWFpblN0bnNbMF0gPT09IGJyYW5jaFswXSAmJiBsaW5lTWFpblN0bnNbbGluZU1haW5TdG5zLmxlbmd0aCAtIDFdID09PSBicmFuY2hbYnJhbmNoLmxlbmd0aCAtIDFdICYmIGxpbmVQYXNzU3Rucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUGFzc1N0bnMgPSBicmFuY2g7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZU1haW5TdG5zID0gW107XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDEgMSAtMSAtMVxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVQYXNzU3Rucy51bnNoaWZ0KGxpbmVNYWluU3Ruc1tsaW5lTWFpblN0bnMubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBkcmF3IHRoZSBtYWluIGxpbmVcclxuICAgICAgICAgICAgbGV0IHBhdGggPSB0aGlzLl9saW5lUGF0aChsaW5lTWFpblN0bnMsICdtYWluJylcclxuICAgICAgICAgICAgaWYgKHBhdGggfHwgcGF0aCAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgJCgnI2xpbmVfbWFpbicpLmFwcGVuZCgkKCc8cGF0aD4nLCB7IGlkOiAnbGluZV9tYWluX3BhdGgnLCBkOiBwYXRoIH0pKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZHJhdyB0aGUgcGFzcyBsaW5lXHJcbiAgICAgICAgICAgIHBhdGggPSB0aGlzLl9saW5lUGF0aChsaW5lUGFzc1N0bnMsICdwYXNzJylcclxuICAgICAgICAgICAgaWYgKHBhdGggfHwgcGF0aCAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgJCgnI2xpbmVfcGFzcycpLmFwcGVuZCgkKCc8cGF0aD4nLCB7IGlkOiAnbGluZV9wYXNzX3BhdGgnLCBkOiBwYXRoIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjbGluZV9tYWluJykuaHRtbCgkKCcjbGluZV9tYWluJykuaHRtbCgpKTtcclxuICAgICAgICAkKCcjbGluZV9wYXNzJykuaHRtbCgkKCcjbGluZV9wYXNzJykuaHRtbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsVGhlbWVDb2xvdXIoKSB7XHJcbiAgICAgICAgc3VwZXIuZmlsbFRoZW1lQ29sb3VyKCk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgd2lsbCBhZGQgdGhlIHN0cm9rZSBvZiB0aGUgc3RhdGlvbiBjaXJjbGVcclxuICAgICAgICAvLyBob3dldmVyIHRoZSBzdHJva2UgcGF0aCBpcyBkZWZpbmVkIGluIGluZGV4Lmh0bWxcclxuICAgICAgICAvLyB3aGljaCBtYWRlIGNoYW5naW5nIHN0YXRpb24gc3R5bGUgc3RyYW5nZVxyXG4gICAgICAgICQoJ3BhdGgjJyArIHN0YXRpb25faWQpLmF0dHIoJ3N0cm9rZScsIHRoaXMuX3RoZW1lQ29sb3VyKTtcclxuICAgICAgICAkKCdwYXRoI2ludDJfc2gnKS5hdHRyKCdzdHJva2UnLCB0aGlzLl90aGVtZUNvbG91cik7XHJcblxyXG4gICAgICAgIC8vIHBhc3Mgc3Ryb2tlIHNob3VsZCBiZSBhZGRlZCBzb21ld2hlcmUgZWxzZVxyXG4gICAgICAgIC8vIGJ1dCBJIGNhbid0IGZpZ3VyZSBpdCBvdXRcclxuICAgICAgICAkKCdwYXRoI3N0bl9zaF9wYXNzJykuYXR0cignc3Ryb2tlJywgJyNhYWEnKTtcclxuICAgICAgICAkKCdwYXRoI2ludDJfc2hfcGFzcycpLmF0dHIoJ3N0cm9rZScsICcjYWFhJyk7XHJcblxyXG4gICAgICAgIC8vIHRoZSByYWlsbWFwIGxpbmVcclxuICAgICAgICAkKCdwYXRoI2xpbmVfbWFpbl9wYXRoJykuYXR0cignZmlsbCcsIHRoaXMuX3RoZW1lQ29sb3VyKVxyXG4gICAgICAgICQoJ3BhdGgjbGluZV9wYXNzX3BhdGgnKS5hdHRyKCdmaWxsJywgJyNhYWEnKVxyXG5cclxuICAgICAgICAvLyB0aGUgbGFzdCBkZWNvcmF0aW9uIGxpbmVcclxuICAgICAgICAkKGAjbGluZV9zaG1ldHJvX3VzZWApLmF0dHIoJ2ZpbGwnLCB0aGlzLl90aGVtZUNvbG91cilcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVOYW1lc1swXS5tYXRjaCgvKFxcZCopXFx3Ky8pKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBsaW5lIHN0YXJ0cyB3aXRoIG51bWJlclxyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjbGluZV9udW1iZXIgPiB0ZXh0JykuYXR0cignZmlsbCcsICcjZmZmJylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0aGUgbGluZSBzdGFydHMgd2l0aCBsZXR0ZXJcclxuICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbmFtZV90ZXh0JykuYXR0cignZmlsbCcsICcjZmZmJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlc3QgaW5mbyBsaW5lIGNvbG9yXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbnVtYmVyID4gdGV4dCcpLmF0dHIoJ2ZpbGwnLCB0aGlzLl9mZ0NvbG91cilcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5OYW1lQmcoKSB7XHJcbiAgICAgICAgJCgnI2N1cnJlbnRfYmcnKS5oaWRlKCk7ICAvLyBmaXggdGhlIG15c3RlcmlvdXMgYmxhY2sgcmVjdFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJld3JpdGUgdGhpcyB0byBtYWtlIHN1cmUgdGhlIGxpbmUgaXMgZHJhdyBiZWZvcmUgY29sb3JcclxuICAgIHN0YXRpYyBpbml0U1ZHKGxpbmUpIHtcclxuICAgICAgICBsaW5lLmRyYXdTVkdGcmFtZSgpO1xyXG4gICAgICAgIGxpbmUuc2hvd0ZyYW1lT3V0ZXIoKTtcclxuICAgICAgICBsaW5lLmRyYXdTdG5zKCk7XHJcblxyXG4gICAgICAgIC8vIGNoYW5nZSB0aGUgZnVuYyBjYWxsIGhlcmVcclxuICAgICAgICBsaW5lLmRyYXdMaW5lKCk7XHJcbiAgICAgICAgbGluZS5maWxsVGhlbWVDb2xvdXIoKTtcclxuICAgICAgICAvLyBjaGFuZ2UgdGhlIGZ1bmMgY2FsbCBoZXJlXHJcblxyXG4gICAgICAgIGxpbmUuZHJhd1N0cmlwKCk7XHJcbiAgICAgICAgbGluZS5kcmF3RGVzdEluZm8oKTtcclxuICAgICAgICBsaW5lLmxvYWRGb250cygpO1xyXG4gICAgICAgIGxpbmUudXBkYXRlU3RuTmFtZUJnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGNhbGwgZmlsbFRoZW1lQ29sb3VyIHdoZW4gZmxpcCBkaXJlY3Rpb25cclxuICAgIHNldCBkaXJlY3Rpb24odmFsKSB7XHJcbiAgICAgICAgc3VwZXIuZGlyZWN0aW9uID0gdmFsXHJcblxyXG4gICAgICAgIHRoaXMuZmlsbFRoZW1lQ29sb3VyKClcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXdyaXRlIHRoaXMgdG8gY2FsbCBmaWxsVGhlbWVDb2xvdXIgd2hlbiBzZXQgY3VycmVudCBzdGF0aW9uXHJcbiAgICBzZXQgY3VycmVudFN0bklkKHZhbCkge1xyXG4gICAgICAgIHN1cGVyLmN1cnJlbnRTdG5JZCA9IHZhbFxyXG5cclxuICAgICAgICB0aGlzLmZpbGxUaGVtZUNvbG91cigpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGdldCBkcmF3U3RucyBhbmQgcmVjYWxsZWRcclxuICAgIHVwZGF0ZVN0blRyYW5zZmVyKHN0bklkOiBJRCwgdHlwZSwgaW5mbyA9IG51bGwpIHtcclxuICAgICAgICBzdXBlci51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgdHlwZSwgaW5mbylcclxuXHJcbiAgICAgICAgdGhpcy5maWxsVGhlbWVDb2xvdXIoKVxyXG5cclxuICAgICAgICAvLyBjbGVhciB0aGUgb3JpZ2luYWwgc3RhdGlvbnNcclxuICAgICAgICAkKCcjc3RuX2ljb25zJykuZW1wdHkoKVxyXG4gICAgICAgIHRoaXMuZHJhd1N0bnMoKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJld3JpdGUgdGhpcyB0byBjYWxsIGZpbGxUaGVtZUNvbG91ciB3aGVuIGFkZCBzdGF0aW9uXHJcbiAgICBhZGRTdG4ocHJlcDogJ2JlZm9yZScgfCAnYWZ0ZXInLCBzdG5JZDogSUQsIGxvYywgZW5kOiBJRCk6IFtJRCwgU3RhdGlvbkluZm9dIHtcclxuICAgICAgICBsZXQgW25ld0lkLCBuZXdJbmZvXSA9IHN1cGVyLmFkZFN0bihwcmVwLCBzdG5JZCwgbG9jLCBlbmQpXHJcbiAgICAgICAgdGhpcy5maWxsVGhlbWVDb2xvdXIoKVxyXG4gICAgICAgIHJldHVybiBbbmV3SWQsIG5ld0luZm9dXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGNoYW5nZSB0aGUgcmFpbG1hcCBwb3NpdGlvblxyXG4gICAgc2V0IHlQYyh2YWwpIHtcclxuICAgICAgICBzdXBlci55UGMgPSB2YWxcclxuXHJcbiAgICAgICAgbGV0IHkgPSB2YWwgKiB0aGlzLl9zdmdIZWlnaHQgLyA1MDtcclxuICAgICAgICAkKCdnI21haW4nKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHt5fSlgKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==