(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(7),a=s(1);class i extends a.l{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get _dxdy(){var t=this.name[1].split("\\").length;let e;return e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6,[e,0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5]}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-60)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends i{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get ungrpIconHTML(){return[...this.intTickHTML]}get iconHTML(){var[t,e]=-1==this.state?["int2_sh_pass","Pass"]:["int2_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn",stroke:this._intInfos[a.d.colour]}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})`}).append($("<g>",{id:`rmg-name__shmetro--${this.id}`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1]))))}get intTickHTML(){let t=[],e=$(`#rmg-name__shmetro--${this.id}`),s=e.get(0).getBoundingClientRect(),n=s.right-s.left+5;this._intInfos.map((e,s)=>{var i=e[a.d.colour],r=$("<use>",{"xlink:href":"#int_sh",fill:i,transform:`translate(${n+25*s},-12)`,class:"rmg-line__shmetro rmg-line__change"});-1==this.state&&r.addClass("rmg-line__pass");let h=String(e[a.d.nameZH]).match(/(\d*)\w+/);if(h)var o=h[0];else o=String(e[a.d.nameZH]);var l=$("<text>",{transform:`translate(${n+6+25*s},8)`,class:"rmg-name__zh rmg-name__shmetro--line_name"}).text(o);t.push(r,l)});let i=e.parent();return i.attr("transform",`${i.attr("transform")}rotate(-60)`),t}get _nameClass(){return-1==this.state?"Pass":"Future"}}s.d(e,"RMGLineSH",(function(){return h}));class h extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":case"int3_l":case"int3_r":return new r(t,e);default:return new i(t,e)}}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);var t=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,e="l"==this._direction?1:-1,s=(this._svgDestWidth-e*t)/20;s="l"==this._direction?s:this._svgDestWidth-20;var n=90*(1-e);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${s},135)rotate(${n})`);var a=s+285*e;if($("#station_info_shmetro > #platform").attr("transform",`translate(${a},130)`),"r"===this._direction)var i="end",r=.8*this._svgDestWidth;else i="start",r=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${r},135)`,"text-anchor":i});var[h,o]=["",""];this[`${this._direction}ValidDests`].forEach(t=>{h+=this.stations[t].name[0],o+=this.stations[t].name[1]}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${h}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${o}`);let l="l"===this._direction?this._svgDestWidth:320;var[_,m]=this._lineNames,d=_.match(/(\d*)\w+/);d?(l-=180,_="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-120},70)`}),$("#station_info_shmetro > #line_number > text").text(d[0]).attr("transform",`translate(${l-100},170)`)):(l-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(_),$("#station_info_shmetro > #line_name_text > text:last-child").text(m),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${l},135)`,"text-anchor":"start"});let c="l"==this._direction?"left":"right";$("#line_shmetro_use").attr({"xlink:href":`#line_shmetro_${c}`,transform:"translate(0,220)"})}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html());for(let[t,e]of Object.entries(this.stations).filter(t=>t[1]instanceof r))$(`#rmg-name__shmetro--${t}`).parent().append(e.ungrpIconHTML);$("#stn_icons").html($("#stn_icons").html())}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));var n=this._linePath(e),[a,i,r]=n.match(/[\d.]+/g).map(t=>Number(t));n="r"===this._direction?`M ${a},${i-6} H ${r+30} l 12,12 L ${a},${i+6} Z`:`M ${a-30},${i-6} H ${r} l 0,12 L ${a-42},${i+6} Z`,$("#line_main").append($("<path>",{id:"line_main_path",d:n}));n=this._linePath(s);var[a,i,r]=n.match(/[\d.]+/g).map(t=>Number(t));n="r"===this._direction?`M ${a-30},${i-6} H ${r} l 0,12 L ${a-30},${i+6} Z`:`M ${a},${i-6} H ${r+30} l 0,12 L ${a},${i+6} Z`,$("#line_pass").append($("<path>",{id:"line_pass_path",d:n}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#int2_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("path#int2_sh_pass").attr("stroke","#aaa"),$("path#line_main_path").attr("fill",this._themeColour),$("path#line_pass_path").attr("fill","#aaa");let t="l"==this._direction?"left":"right";$(`#line_shmetro_${t}`).attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff")}updateStnNameBg(){$("#current_bg").hide()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.drawLine(),t.fillThemeColour(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}set direction(t){super.direction=t,this.fillThemeColour()}set currentStnId(t){super.currentStnId=t,this.fillThemeColour()}updateStnTransfer(t,e,s=null){super.updateStnTransfer(t,e,s),$("#stn_icons").empty(),this.drawStns()}set yPc(t){super.yPc=t;let e=t*this._svgHeight/50;$("g#main").attr("transform",`translate(0,${e})`)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,