(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,s,e){"use strict";e.r(s);var a=e(7),n=e(1);class i extends n.l{constructor(t,s){super(t,s),this.stnNum=s.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get iconHTML(){var[t,s]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){var t=this.name[1].split("\\").length;let s;s=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6;let e=0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5;return $("<g>",{transform:`translate(${this.x-s},${this.y+e})rotate(-45)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends i{constructor(t,s){super(t,s),this._intInfos=s.interchange[0]}}e.d(s,"RMGLineSH",(function(){return h}));class h extends a.a{constructor(t){super(t)}_initStnInstance(t,s){switch(s.change_type){case"int2":return new r(t,s);default:return new i(t,s)}}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var s=t.filter(t=>this.stations[t].state>=0),e=t.filter(t=>this.stations[t].state<=0);1===s.length&&(e=t),0==s.filter(t=>-1!==e.indexOf(t)).length&&s.length&&(e[0]===t[0]?e.push(s[0]):s[0]===t[0]&&s[s.length-1]===t[t.length-1]&&e.length?(e=t,s=[]):e.unshift(s[s.length-1]));var a=(n=this._linePath(s)).match(/[\d.]+/g);n=`M ${a[0]},${a[1]} H ${Number(a[2])+30}`,$("#line_main").append($("<path>",{d:n}));var n;a=(n=this._linePath(e)).match(/[\d.]+/g);n=`M ${Number(a[0])-30},${a[1]} H ${a[2]}`,$("#line_pass").append($("<path>",{d:n}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("#line_shmetro_left_use").attr("fill",this._themeColour)}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);let t=this[this._direction+"ValidDests"];var[s,e]=[0,1].map(s=>t.map(t=>this.stations[t].name[s].replace(/\\/g," ")).join("/")),a=310+$("#station_info_shmetro > g:last-child")[0].getBoundingClientRect().width+45+50;console.log("flagLength: "+a);var n="r"==this._direction?1:-1,i=(this._svgDestWidth-n*a)/20,r=90*(1-n);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${i},135)rotate(${r})`);var h=i+285*n;if($("#station_info_shmetro > #platform").attr("transform",`translate(${h},130)`),"l"===this._direction)var o="end",l=.8*this._svgDestWidth;else o="start",l=.2*this._svgDestWidth;$("#station_info_shmetro > g:last-child").attr({transform:`translate(${l},135)`,"text-anchor":o});var _="",m="";this.lValidDests.forEach(t=>{_+=this.stations[t].name[0],m+=this.stations[t].name[1]}),$("#station_info_shmetro > #dest_text > text:first-child").text(`å¾€${_}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${m}`),$("#line_shmetro_left_use").attr({transform:"translate(0,220)"})}updateStnNameBg(){$("#current_bg").hide()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,