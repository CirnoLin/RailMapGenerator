(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(7),i=s(1);class a extends i.l{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get _dxdy(){var t=this.name[1].split("\\").length;let e;return e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6,[e,0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5]}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-60)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends a{constructor(t,e){super(t,e),this._intInfos=e.interchange[0][0]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get ungrpIconHTML(){return[...this.intTickHTML]}get iconHTML(){var[t,e]=-1==this.state?["int2_sh_pass","Pass"]:["int2_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn",stroke:this._intInfos[i.d.colour]}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-60)`}).append($("<g>",{id:`rmg-name__shmetro--${this.id}`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1]))))}get intTickHTML(){var t=$(`#rmg-name__shmetro--${this.id}`)[0].getBoundingClientRect();let e=t.right-t.left;var s=1==this.namePos?180:0,n=this._intInfos[i.d.colour],a=$("<use>",{"xlink:href":"#int_sh",fill:n,transform:`translate(${e},-12)rotate(${s})`,class:"rmg-line__shmetro rmg-line__change"});-1==this.state&&a.addClass("rmg-line__pass");let r=String(this._intInfos[i.d.nameZH]).match(/(\d*)\w+/);if(r)var h=r[0];else h=String(this._intInfos[i.d.nameZH]);return[a,$("<text>",{transform:`translate(${e+6},8)rotate(${s})`,class:"rmg-name__zh rmg-name__shmetro--line_name"}).text(h)]}get _nameClass(){return-1==this.state?"Pass":"Future"}}var h=s(0);s.d(e,"RMGLineSH",(function(){return o}));class o extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":return new r(t,e);default:return new a(t,e)}}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);var t=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,e="l"==this._direction?1:-1,s=(this._svgDestWidth-e*t)/20;s="l"==this._direction?s:this._svgDestWidth-20;var n=90*(1-e);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${s},135)rotate(${n})`);var i=s+285*e;if($("#station_info_shmetro > #platform").attr("transform",`translate(${i},130)`),"r"===this._direction)var a="end",r=.8*this._svgDestWidth;else a="start",r=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${r},135)`,"text-anchor":a});var[h,o]=["",""];this[`${this._direction}ValidDests`].forEach(t=>{h+=this.stations[t].name[0],o+=this.stations[t].name[1]}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${h}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${o}`);let l="l"===this._direction?this._svgDestWidth:320;var[_,m]=this._lineNames,d=_.match(/(\d*)\w+/);d?(l-=180,_="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-120},70)`}),$("#station_info_shmetro > #line_number > text").text(d[0]).attr("transform",`translate(${l-100},170)`)):(l-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(_),$("#station_info_shmetro > #line_name_text > text:last-child").text(m),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${l},135)`,"text-anchor":"start"});let c="l"==this._direction?"left":"right";$("#line_shmetro_use").attr({"xlink:href":`#line_shmetro_${c}`,transform:"translate(0,220)"})}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html());for(let[t,e]of Object.entries(this.stations).filter(t=>t[1]instanceof r))$(`#rmg-name__shmetro--${t}`).parent().append(e.ungrpIconHTML);$("#stn_icons").html($("#stn_icons").html())}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));var n=this._linePath(e),[i,a,r]=n.match(/[\d.]+/g).map(t=>Number(t));n="r"===this._direction?`M ${i},${a-6} H ${r+30} l 12,12 L ${i},${a+6} Z`:`M ${i-30},${a-6} H ${r} l 0,12 L ${i-42},${a+6} Z`,$("#line_main").append($("<path>",{id:"line_main_path",d:n}));n=this._linePath(s);var[i,a,r]=n.match(/[\d.]+/g).map(t=>Number(t));n="r"===this._direction?`M ${i-30},${a-6} H ${r} l 0,12 L ${i-30},${a+6} Z`:`M ${i},${a-6} H ${r+30} l 0,12 L ${i},${a+6} Z`,$("#line_pass").append($("<path>",{id:"line_pass_path",d:n}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#int2_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("path#int2_sh_pass").attr("stroke","#aaa"),$("path#line_main_path").attr("fill",this._themeColour),$("path#line_pass_path").attr("fill","#aaa");let t="l"==this._direction?"left":"right";$(`#line_shmetro_${t}`).attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff")}updateStnNameBg(){$("#current_bg").hide()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.drawLine(),t.fillThemeColour(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}set direction(t){this._direction=t,Object(h.l)("direction",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));n.a.clearSVG(),this.drawStns(),this.drawLine(),this.fillThemeColour(),this.drawDestInfo(),this.loadFonts()}updateStnTransfer(t,e,s=null){super.updateStnTransfer(t,e,s),$("#stn_icons").empty(),this.drawStns()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvU3RhdGlvbi9TdGF0aW9uU0gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xpbmUvTGluZVNILnRzIl0sIm5hbWVzIjpbImlkIiwiZGF0YSIsInN1cGVyIiwidGhpcyIsInN0bk51bSIsIm51bSIsInkiLCJuYW1lRU5MbiIsIm5hbWUiLCJzcGxpdCIsImxlbmd0aCIsImR4IiwiX25hbWVTaGlmdCIsIl90aWNrUm90YXRpb24iLCJNYXRoIiwiY29zIiwiaWNvblR5cGUiLCJudW1DbGFzcyIsInN0YXRlIiwic3RhdGlvbl9pZCIsIiQiLCJ0cmFuc2Zvcm0iLCJ4IiwiYXBwZW5kIiwiY2xhc3MiLCJkeSIsIl9keGR5IiwiYWRkQ2xhc3MiLCJ0ZXh0IiwiX2ludEluZm9zIiwiaW50ZXJjaGFuZ2UiLCJ1bmdycEhUTUwiLCJpY29uSFRNTCIsIm5hbWVIVE1MIiwiaW50VGlja0hUTUwiLCJzdHJva2UiLCJjb2xvdXIiLCJiY3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyaWdodCIsImxlZnQiLCJ0aWNrUm90YXRpb24iLCJuYW1lUG9zIiwidGlja0NvbG91ciIsInRpY2siLCJmaWxsIiwibGluZU51bWJlciIsIlN0cmluZyIsIm5hbWVaSCIsIm1hdGNoIiwibGluZU5hbWUiLCJwYXJhbSIsInN0bklkIiwic3RuSW5mbyIsImNoYW5nZV90eXBlIiwiX3BsYXRmb3JtTnVtIiwiZmxhZ0xlbmd0aCIsIndpZHRoIiwiaXNMZWZ0IiwiX2RpcmVjdGlvbiIsImFycm93WCIsIl9zdmdEZXN0V2lkdGgiLCJhcnJvd1JvdGF0ZSIsImF0dHIiLCJwbGF0Zm9ybU51bVgiLCJ0eHRBbmNob3IiLCJkZXN0TmFtZVgiLCJkZXN0aW5hdGlvbnNfemgiLCJkZXN0aW5hdGlvbnNfZW4iLCJmb3JFYWNoIiwic3RuIiwic3RhdGlvbnMiLCJsaW5lTmFtZVgiLCJsaW5lTmFtZVpIIiwibGluZU5hbWVFTiIsIl9saW5lTmFtZXMiLCJfdGhlbWVDb2xvdXIiLCJoaWRlIiwiZGlyZWN0aW9uIiwic3RuSW5zdGFuY2UiLCJPYmplY3QiLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJodG1sIiwiZmlsdGVyIiwicGFyZW50IiwidW5ncnBJY29uSFRNTCIsInJlbW92ZUNsYXNzIiwiYnJhbmNoZXMiLCJtYXAiLCJicmFuY2giLCJsaW5lTWFpblN0bnMiLCJsaW5lUGFzc1N0bnMiLCJpbmRleE9mIiwicHVzaCIsInVuc2hpZnQiLCJwYXRoIiwiX2xpbmVQYXRoIiwiaCIsInBvcyIsIk51bWJlciIsImQiLCJmaWxsVGhlbWVDb2xvdXIiLCJsaW5lIiwiZHJhd1NWR0ZyYW1lIiwic2hvd0ZyYW1lT3V0ZXIiLCJkcmF3U3RucyIsImRyYXdMaW5lIiwiZHJhd1N0cmlwIiwiZHJhd0Rlc3RJbmZvIiwibG9hZEZvbnRzIiwidXBkYXRlU3RuTmFtZUJnIiwidmFsIiwiX3N0blN0YXRlIiwiY2xlYXJTVkciLCJ0eXBlIiwiaW5mbyIsInVwZGF0ZVN0blRyYW5zZmVyIiwiZW1wdHkiXSwibWFwcGluZ3MiOiJrSEFLQSxNQUFNLFVBQXFCLElBQ3ZCLFlBQVlBLEVBQVFDLEdBQ2hCQyxNQUFNRixFQUFJQyxHQUNWRSxLQUFLQyxPQUFTSCxFQUFLSSxJQUd2QixpQkFBbUIsT0FBTyxFQUMxQixvQkFBc0IsT0FBT0YsS0FBS0csRUFBSSxFQUFJLElBQU0sRUFDaEQsWUFDSSxJQUFJQyxFQUFXSixLQUFLSyxLQUFLLEdBQUdDLE1BQU0sTUFBTUMsT0FDeEMsSUFBSUMsRUFTSixPQVBJQSxFQURBUixLQUFLUyxXQUN1QixJQUF2QlQsS0FBS1UsZUFBdUIsRUFBSSxHQUFzQixJQUFoQk4sRUFBVyxHQUFVTyxLQUFLQyxLQUFLLElBRTlDLElBQXZCWixLQUFLVSxlQUF1QixHQUFzQixJQUFoQk4sRUFBVyxJQUFXTyxLQUFLQyxLQUFLLEtBQU8sRUFLM0UsQ0FBQ0osRUFGd0IsSUFBdkJSLEtBQUtVLGVBQXVCLFVBQWtDLElBQWhCTixFQUFXLEdBQVVPLEtBQUtDLEtBQUssSUFBTyxNQUtqRyxlQUNJ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YWYsS0FBSyxPQUFRNUQsS0FBS3lFLGNBRTlDekUsS0FBS3dFLFdBQVcsR0FBRzFCLE1BQU0sWUFFekI3QixFQUFFLCtDQUErQzJDLEtBQUssT0FBUSxRQUc5RDNDLEVBQUUsMkNBQTJDMkMsS0FBSyxPQUFRLFFBSWxFLGtCQUNJM0MsRUFBRSxlQUFleUQsT0FJckIsZUFBZTBCLEdBQ1hBLEVBQUtDLGVBQ0xELEVBQUtFLGlCQUNMRixFQUFLRyxXQUdMSCxFQUFLSSxXQUNMSixFQUFLRCxrQkFHTEMsRUFBS0ssWUFDTEwsRUFBS00sZUFDTE4sRUFBS08sWUFDTFAsRUFBS1Esa0JBSVQsY0FBY0MsR0FDVjdHLEtBQUt3RCxXQUFhcUQsRUFDbEIsWUFBVSxZQUFhQSxHQUV2QixJQUFLLElBQUs1RCxFQUFPMkIsS0FBZ0JDLE9BQU9DLFFBQVE5RSxLQUFLb0UsVUFDN0MsQ0FBQyxZQUFhLFdBQVdXLFNBQVM5QixLQUN0QzJCLEVBQVk3RCxNQUFRZixLQUFLOEcsVUFBVTdELElBR3ZDLElBQVE4RCxXQUNSL0csS0FBS3VHLFdBQ0x2RyxLQUFLd0csV0FHTHhHLEtBQUttRyxrQkFFTG5HLEtBQUswRyxlQUVMMUcsS0FBSzJHLFlBSVQsa0JBQWtCMUQsRUFBVytELEVBQU1DLEVBQUssTUFDcENsSCxNQUFNbUgsa0JBQWtCakUsRUFBTytELEVBQU1DLEdBR3JDaEcsRUFBRSxjQUFja0csUUFDaEJuSCxLQUFLdUciLCJmaWxlIjoiTGluZVNILm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJNR1N0YXRpb24sIEludEluZm9UYWcsIEludGVyY2hhbmdlSW5mbyB9IGZyb20gJy4vU3RhdGlvbic7XHJcbmltcG9ydCB7IElELCBOYW1lLCBCcmFuY2hJbmZvLCBTdGF0aW9uSW5mbyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmNvbnN0IHN0YXRpb25faWQgPSAnc3RuX3NoJ1xyXG5cclxuY2xhc3MgUk1HU3RhdGlvblNIIGV4dGVuZHMgUk1HU3RhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZDogSUQsIGRhdGE6IFN0YXRpb25JbmZvKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGRhdGEpO1xyXG4gICAgICAgIHRoaXMuc3RuTnVtID0gZGF0YS5udW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9uYW1lU2hpZnQoKSB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7IHJldHVybiB0aGlzLnkgPiAwID8gMTgwIDogMDsgfVxyXG4gICAgZ2V0IF9keGR5KCkge1xyXG4gICAgICAgIHZhciBuYW1lRU5MbiA9IHRoaXMubmFtZVsxXS5zcGxpdCgnXFxcXCcpLmxlbmd0aDtcclxuICAgICAgICBsZXQgZHg6IG51bWJlcjtcclxuICAgICAgICBpZiAodGhpcy5fbmFtZVNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGR4ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gLTkgOiAxNiArIChuYW1lRU5MbiAtIDEpICogMTIgKiBNYXRoLmNvcygtNDUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGR4ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gKDI0ICsgKG5hbWVFTkxuIC0gMSkgKiAxMikgKiBNYXRoLmNvcygtNDUpIDogLTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxldCBkeCA9IHRoaXMuX25hbWVTaGlmdCA/IC04IDogKDI0ICsgKG5hbWVFTkxuLTEpKjEyKSAqIE1hdGguY29zKC00NSk7XHJcbiAgICAgICAgbGV0IGR5ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gKC00IC0gMjEuOTIxODc1IC0gKG5hbWVFTkxuIC0gMSkgKiAxMiAqIE1hdGguY29zKC00NSkpIDogMTcuNTtcclxuICAgICAgICAvLyB2YXIgZHkgPSAoLTQgLSAyMS45MjE4NzUgLSAobmFtZUVOTG4tMSkqMTIqTWF0aC5jb3MoLTQ1KSkgKiAodGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gMSA6IC0xKTtcclxuICAgICAgICByZXR1cm4gW2R4LCBkeV1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgdmFyIFtpY29uVHlwZSwgbnVtQ2xhc3NdID0gKHRoaXMuc3RhdGUgPT0gLTEpID8gW3N0YXRpb25faWQgKyAnX3Bhc3MnLCAnUGFzcyddIDogW3N0YXRpb25faWQsICdGdXR1cmUnXTtcclxuICAgICAgICByZXR1cm4gJCgnPGc+JywgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlgIH0pXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJCgnPHVzZT4nLCB7ICd4bGluazpocmVmJzogJyMnICsgaWNvblR5cGUsIGNsYXNzOiAncm1nLXN0bicgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lSFRNTCgpIHtcclxuICAgICAgICBsZXQgW2R4LCBkeV0gPSB0aGlzLl9keGR5XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnggLSBkeH0sJHt0aGlzLnkgKyBkeX0pcm90YXRlKC02MClgLFxyXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiB0aGlzLl90aWNrUm90YXRpb24gPT09IDAgPyAnc3RhcnQnIDogJ2VuZCcsXHJcbiAgICAgICAgICAgIC8vIGNsYXNzOiBgTmFtZSAke3RoaXMubmFtZUNsYXNzfWBcclxuICAgICAgICAgICAgY2xhc3M6IGBOYW1lIEZ1dHVyZWAgIC8vIHRvZG86IGZpeCB0aGlzXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nKS5hZGRDbGFzcygncm1nLW5hbWVfX3poIHJtZy1uYW1lX19zaG1ldHJvLS1zdGF0aW9uJykudGV4dCh0aGlzLm5hbWVbMF0pXHJcbiAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICQoJzx0ZXh0PicsIHtcclxuICAgICAgICAgICAgICAgIGR5OiAxNSwgY2xhc3M6ICdybWctbmFtZV9fZW4gcm1nLW5hbWVfX3NobWV0cm8tLXN0YXRpb24nXHJcbiAgICAgICAgICAgIH0pLnRleHQodGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJylbMF0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzx0c3Bhbj4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3gnOiAwLCAnZHknOiAxMlxyXG4gICAgICAgICAgICAgICAgfSkudGV4dCh0aGlzLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEludFN0YXRpb25TSCBleHRlbmRzIFJNR1N0YXRpb25TSCB7XHJcbiAgICBwcml2YXRlIF9pbnRJbmZvczogSW50ZXJjaGFuZ2VJbmZvW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IElELCBkYXRhOiBTdGF0aW9uSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuICAgICAgICB0aGlzLl9pbnRJbmZvcyA9IGRhdGEuaW50ZXJjaGFuZ2VbMF1bMF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGFwcGVuZCBkb20gYW5kIHRoZW4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XHJcbiAgICAvLyB0byBnZXQgdGhlIGV4YWN0IHBvc2l0aW9uIHdoZXJlIGludCBpY29uIGNhbiBiZSBmaXRcclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7aWQ6dGhpcy5pZH0pLmFwcGVuZCguLi50aGlzLnVuZ3JwSFRNTCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGdldCBhbGwgZHJhd2luZyBmdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuICAgIGdldCB1bmdycEhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLmljb25IVE1MLCB0aGlzLm5hbWVIVE1MXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdW5ncnBJY29uSFRNTCgpe1xyXG4gICAgICAgIHJldHVybiBbIC4uLnRoaXMuaW50VGlja0hUTUxdXHJcbiAgICB9XHJcblxyXG4gICAgLy8gaW50ZXJjaGFuZ2Ugc3RhdGlvbiBpY29uIG9uIG1haW4gbGluZVxyXG4gICAgZ2V0IGljb25IVE1MKCkge1xyXG4gICAgICAgIHZhciBbaWNvblR5cGUsIG51bUNsYXNzXSA9ICh0aGlzLnN0YXRlID09IC0xKSA/IFsnaW50Ml9zaF9wYXNzJywgJ1Bhc3MnXSA6IFsnaW50Ml9zaCcsICdGdXR1cmUnXTtcclxuICAgICAgICByZXR1cm4gJCgnPGc+JywgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlgIH0pXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJCgnPHVzZT4nLCB7ICd4bGluazpocmVmJzogJyMnICsgaWNvblR5cGUsIGNsYXNzOiAncm1nLXN0bicsIHN0cm9rZTogdGhpcy5faW50SW5mb3NbSW50SW5mb1RhZy5jb2xvdXJdIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWd1bGFyIHN0YXRpb24gbmFtZVxyXG4gICAgZ2V0IG5hbWVIVE1MKCkge1xyXG4gICAgICAgIGxldCBbZHgsIGR5XSA9IHRoaXMuX2R4ZHk7XHJcbiAgICAgICAgLy8gd3JhcCB0aGUgbmFtZSwgZGVjcm9fbGluZSBhbmQgaW50X2xpbmUgdW5kZXIgZyBpbiBvcmRlciB0byByb3RhdGUgYXQgb25jZVxyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueCAtIGR4fSwke3RoaXMueSArIGR5fSlyb3RhdGUoLTYwKWAsXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgbmFtZSB0ZXh0XHJcbiAgICAgICAgICAgICQoJzxnPicsIHtcclxuICAgICAgICAgICAgICAgIGlkOiBgcm1nLW5hbWVfX3NobWV0cm8tLSR7dGhpcy5pZH1gLFxyXG4gICAgICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gJ3N0YXJ0JyA6ICdlbmQnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6IGBOYW1lIEZ1dHVyZWAgIC8vIHRvZG86IGZpeCB0aGlzXHJcbiAgICAgICAgICAgIH0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzx0ZXh0PicpLmFkZENsYXNzKCdybWctbmFtZV9femggcm1nLW5hbWVfX3NobWV0cm8tLXN0YXRpb24nKS50ZXh0KHRoaXMubmFtZVswXSlcclxuICAgICAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dGV4dD4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHk6IDE1LCBjbGFzczogJ3JtZy1uYW1lX19lbiBybWctbmFtZV9fc2htZXRyby0tc3RhdGlvbidcclxuICAgICAgICAgICAgICAgIH0pLnRleHQodGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJylbMF0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICAgICAkKCc8dHNwYW4+Jywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAneCc6IDAsICdkeSc6IDEyXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGV4dCh0aGlzLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICAvLyBpbnRlcmNoYW5nZSBzdGF0aW9uIGljb24gYWZ0ZXIgdGhlIHN0YXRpb24gbmFtZVxyXG4gICAgZ2V0IGludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIC8vIGdldCB0aGUgZXhhY3Qgc3RhdGlvbiBuYW1lIHdpZHRoIHNvIHRoYXQgdGhlXHJcbiAgICAgICAgLy8gaW50ZXJjaGFuZ2Ugc3RhdGlvbiBpY29uIGNhbiBiZSBhZnRlciB0aGUgc3RhdGlvbiBuYW1lXHJcbiAgICAgICAgdmFyIGJjciA9ICQoYCNybWctbmFtZV9fc2htZXRyby0tJHt0aGlzLmlkfWApWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgICAgbGV0IGR4ID0gYmNyLnJpZ2h0IC0gYmNyLmxlZnRcclxuXHJcbiAgICAgICAgLy8gaW50ZXJjaGFuZ2UgbGluZSBpY29uIGFmdGVyIHN0YXRpb24gbmFtZVxyXG4gICAgICAgIHZhciB0aWNrUm90YXRpb24gPSAodGhpcy5uYW1lUG9zID09IDEpID8gMTgwIDogMDtcclxuICAgICAgICB2YXIgdGlja0NvbG91ciA9IHRoaXMuX2ludEluZm9zW0ludEluZm9UYWcuY29sb3VyXTtcclxuICAgICAgICB2YXIgdGljayA9ICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW50X3NoJyxcclxuICAgICAgICAgICAgZmlsbDogdGlja0NvbG91cixcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7ZHh9LC0xMilyb3RhdGUoJHt0aWNrUm90YXRpb259KWAsXHJcbiAgICAgICAgICAgIGNsYXNzOiAncm1nLWxpbmVfX3NobWV0cm8gcm1nLWxpbmVfX2NoYW5nZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gLTEpIHtcclxuICAgICAgICAgICAgdGljay5hZGRDbGFzcygncm1nLWxpbmVfX3Bhc3MnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpbmUgc3RhcnRzIHdpdGggbnVtYmVycyBvciBsZXR0ZXJzXHJcbiAgICAgICAgbGV0IGxpbmVOdW1iZXIgPSBTdHJpbmcodGhpcy5faW50SW5mb3NbSW50SW5mb1RhZy5uYW1lWkhdKS5tYXRjaCgvKFxcZCopXFx3Ky8pXHJcbiAgICAgICAgaWYgKGxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgdmFyIGxpbmVOYW1lID0gbGluZU51bWJlclswXVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaW5lTmFtZSA9IFN0cmluZyh0aGlzLl9pbnRJbmZvc1tJbnRJbmZvVGFnLm5hbWVaSF0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGludGVyY2hhbmdlIGxpbmUgbmFtZVxyXG4gICAgICAgIHZhciBsaW5lTmFtZUVsZW0gPSAkKCc8dGV4dD4nLCB7XHJcbiAgICAgICAgICAgIC8vIFRvZG86IGZpeCB0aGlzIGhhcmQtY29kZWQgY2VudGVyKDYpIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke2R4ICsgNn0sOClyb3RhdGUoJHt0aWNrUm90YXRpb259KWAsXHJcbiAgICAgICAgICAgIGNsYXNzOiAncm1nLW5hbWVfX3poIHJtZy1uYW1lX19zaG1ldHJvLS1saW5lX25hbWUnLFxyXG4gICAgICAgIH0pLnRleHQobGluZU5hbWUpXHJcblxyXG4gICAgICAgIHJldHVybiBbdGljaywgbGluZU5hbWVFbGVtXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX25hbWVDbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGUgPT0gLTEpID8gJ1Bhc3MnIDogJ0Z1dHVyZSc7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBSTUdTdGF0aW9uU0gsIEludFN0YXRpb25TSCwgc3RhdGlvbl9pZCB9O1xyXG4iLCJpbXBvcnQgeyBSTUdMaW5lIH0gZnJvbSAnLi9MaW5lJztcclxuaW1wb3J0IHsgUk1HU3RhdGlvblNILCBJbnRTdGF0aW9uU0gsIHN0YXRpb25faWQgfSBmcm9tICcuLi9TdGF0aW9uL1N0YXRpb25TSCc7XHJcbmltcG9ydCB7IFJNR1N0YXRpb24gfSBmcm9tICcuLi9TdGF0aW9uL1N0YXRpb24nO1xyXG5cclxuaW1wb3J0IHsgSUQsIE5hbWUsIFN0YXRpb25JbmZvLCBSTUdQYXJhbSwgc2V0UGFyYW1zIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJNR0xpbmVTSCBleHRlbmRzIFJNR0xpbmUge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcclxuICAgICAgICBzdXBlcihwYXJhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRTdG5JbnN0YW5jZShzdG5JZDogSUQsIHN0bkluZm86IFN0YXRpb25JbmZvKTogUk1HU3RhdGlvbiB7XHJcbiAgICAgICAgc3dpdGNoIChzdG5JbmZvLmNoYW5nZV90eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRTdGF0aW9uU0goc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSTUdTdGF0aW9uU0goc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBkcmF3IHRoZSBkZXN0aW5hdGlvblxyXG4gICAgZHJhd0Rlc3RJbmZvKCkge1xyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNwbGF0Zm9ybSA+IHRleHQnKS50ZXh0KHRoaXMuX3BsYXRmb3JtTnVtKTtcclxuXHJcbiAgICAgICAgdmFyIGJjciA9ICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNkZXN0X3RleHQnKVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgZmxhZ0xlbmd0aCA9IDE2MCArIDE1MCArIGJjci53aWR0aCArIDQ1ICsgNTA7XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gYXJyb3dcclxuICAgICAgICB2YXIgaXNMZWZ0ID0gKHRoaXMuX2RpcmVjdGlvbiA9PSAnbCcpID8gMSA6IC0xO1xyXG4gICAgICAgIHZhciBhcnJvd1ggPSAodGhpcy5fc3ZnRGVzdFdpZHRoIC0gaXNMZWZ0ICogZmxhZ0xlbmd0aCkgLyAyMDtcclxuICAgICAgICBhcnJvd1ggPSAodGhpcy5fZGlyZWN0aW9uID09ICdsJykgPyBhcnJvd1ggOiB0aGlzLl9zdmdEZXN0V2lkdGggLSAyMDtcclxuICAgICAgICB2YXIgYXJyb3dSb3RhdGUgPSA5MCAqICgxIC0gaXNMZWZ0KTtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjYXJyb3dfbGVmdF91c2UnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7YXJyb3dYfSwxMzUpcm90YXRlKCR7YXJyb3dSb3RhdGV9KWApO1xyXG5cclxuICAgICAgICAvLyBub3QgaW4gdXNlIG5vd1xyXG4gICAgICAgIHZhciBwbGF0Zm9ybU51bVggPSBhcnJvd1ggKyBpc0xlZnQgKiAoMTYwICsgNTAgKyA3NSk7XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI3BsYXRmb3JtJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3BsYXRmb3JtTnVtWH0sMTMwKWApO1xyXG5cclxuICAgICAgICAvLyBsaXN0IHRoZSBkZXN0aW5hdGlvbiB0ZXh0XHJcbiAgICAgICAgLy8gVG9kbzogZml4IHN2Z19kZXN0X3dpZHRoKjAuOCwgdGhpcyBoYXMgb25seSBiZWVuIHRlc3RlZCBvbiAxMDAwIHdpZHRoXHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ3InKSB7XHJcbiAgICAgICAgICAgIHZhciB0eHRBbmNob3IgPSAnZW5kJztcclxuICAgICAgICAgICAgdmFyIGRlc3ROYW1lWCA9IHRoaXMuX3N2Z0Rlc3RXaWR0aCAqIDAuODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdHh0QW5jaG9yID0gJ3N0YXJ0JztcclxuICAgICAgICAgICAgdmFyIGRlc3ROYW1lWCA9IHRoaXMuX3N2Z0Rlc3RXaWR0aCAqIDAuMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2Rlc3RfdGV4dCcpLmF0dHIoe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtkZXN0TmFtZVh9LDEzNSlgLFxyXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiB0eHRBbmNob3JcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZm9yIGVhY2ggbGVmdCB2YWxpZCBkZXN0aW5hdGlvbnMsIGdldCB0aGUgbmFtZSBmcm9tIGlkXHJcbiAgICAgICAgdmFyIFtkZXN0aW5hdGlvbnNfemgsIGRlc3RpbmF0aW9uc19lbl0gPSBbXCJcIiwgXCJcIl1cclxuICAgICAgICB0aGlzW2Ake3RoaXMuX2RpcmVjdGlvbn1WYWxpZERlc3RzYF0uZm9yRWFjaChzdG4gPT4ge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbnNfemggKz0gdGhpcy5zdGF0aW9uc1tzdG5dLm5hbWVbMF1cclxuICAgICAgICAgICAgZGVzdGluYXRpb25zX2VuICs9IHRoaXMuc3RhdGlvbnNbc3RuXS5uYW1lWzFdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2Rlc3RfdGV4dCA+IHRleHQ6Zmlyc3QtY2hpbGQnKS50ZXh0KGDlvoAke2Rlc3RpbmF0aW9uc196aH1gKVxyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNkZXN0X3RleHQgPiB0ZXh0Omxhc3QtY2hpbGQnKS50ZXh0KGBUbyAke2Rlc3RpbmF0aW9uc19lbn1gKVxyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIGZvciB0aGUgbGluZSBuYW1lXHJcbiAgICAgICAgbGV0IGxpbmVOYW1lWCA9IHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnID8gdGhpcy5fc3ZnRGVzdFdpZHRoIDogMzIwXHJcbiAgICAgICAgdmFyIFtsaW5lTmFtZVpILCBsaW5lTmFtZUVOXSA9IHRoaXMuX2xpbmVOYW1lcztcclxuXHJcbiAgICAgICAgLy8gbGluZSBzdGFydHMgd2l0aCBudW1iZXJzIG9yIGxldHRlcnNcclxuICAgICAgICB2YXIgbGluZU51bWJlciA9IGxpbmVOYW1lWkgubWF0Y2goLyhcXGQqKVxcdysvKVxyXG4gICAgICAgIGlmIChsaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWCAtPSAxODA7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWkggPSBcIuWPt+e6v1wiXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHJlY3QnKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICdzdHlsZSc6IGBmaWxsOiR7dGhpcy5fdGhlbWVDb2xvdXJ9YCxcclxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlKCR7bGluZU5hbWVYIC0gMTIwfSw3MClgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHRleHQnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQobGluZU51bWJlclswXSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bGluZU5hbWVYIC0gMTAwfSwxNzApYClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaW5lTmFtZVggLT0gMjgwO1xyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjbGluZV9udW1iZXIgPiByZWN0JykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAnc3R5bGUnOiBgZmlsbDoke3RoaXMuX3RoZW1lQ29sb3VyfWAsXHJcbiAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogYHRyYW5zbGF0ZSgke2xpbmVOYW1lWCAtIDEwfSw2MClgLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogMjYwLFxyXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6IDE1MFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjbGluZV9udW1iZXIgPiB0ZXh0JykuaGlkZSgpXHJcblxyXG4gICAgICAgICAgICAvLyBUb2RvOiBzZXQgdGhlIGVuZyBpbiB0aGUgbWlkZGxlXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX25hbWVfdGV4dCA+IHRleHQ6bGFzdC1jaGlsZCcpLmF0dHIoJ2R4JywgMTApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXQgdGhlIGxpbmUgbmFtZVxyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX25hbWVfdGV4dCA+IHRleHQ6Zmlyc3QtY2hpbGQnKS50ZXh0KGxpbmVOYW1lWkgpXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19zaG1ldHJvID4gI2xpbmVfbmFtZV90ZXh0ID4gdGV4dDpsYXN0LWNoaWxkJykudGV4dChsaW5lTmFtZUVOKVxyXG4gICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX25hbWVfdGV4dCcpLmF0dHIoe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtsaW5lTmFtZVh9LDEzNSlgLFxyXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiAnc3RhcnQnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHRoZSBsYXN0IGRlY29yYXRpb24gbGluZVxyXG4gICAgICAgIGxldCBkaXJlY3Rpb24gPSB0aGlzLl9kaXJlY3Rpb24gPT0gJ2wnID8gJ2xlZnQnIDogJ3JpZ2h0J1xyXG4gICAgICAgICQoJyNsaW5lX3NobWV0cm9fdXNlJykuYXR0cih7XHJcbiAgICAgICAgICAgICd4bGluazpocmVmJzogYCNsaW5lX3NobWV0cm9fJHtkaXJlY3Rpb259YCxcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKDAsMjIwKWAsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGFwcGVuZCBkb20gYW5kIHRoZW4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XHJcbiAgICAvLyB0byBnZXQgdGhlIGV4YWN0IHBvc2l0aW9uIHdoZXJlIGludCBpY29uIGNhbiBiZSBmaXRcclxuICAgIGRyYXdTdG5zKCkge1xyXG4gICAgICAgIGZvciAobGV0IFtzdG5JZCwgc3RuSW5zdGFuY2VdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ2xpbmVzdGFydCcsICdsaW5lZW5kJ10uaW5jbHVkZXMoc3RuSWQpKSB7Y29udGludWU7fVxyXG4gICAgICAgICAgICAkKCcjc3RuX2ljb25zJykuYXBwZW5kKHN0bkluc3RhbmNlLmh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcjc3RuX2ljb25zJykuaHRtbCgkKCcjc3RuX2ljb25zJykuaHRtbCgpKTsgLy8gUmVmcmVzaCBET01cclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucylcclxuICAgICAgICAgICAgLmZpbHRlcihzdG4gPT4gc3RuWzFdIGluc3RhbmNlb2YgSW50U3RhdGlvblNIKSBhcyBbSUQsIEludFN0YXRpb25TSF1bXSkge1xyXG4gICAgICAgICAgICAkKGAjcm1nLW5hbWVfX3NobWV0cm8tLSR7c3RuSWR9YCkucGFyZW50KCkuYXBwZW5kKHN0bkluc3RhbmNlLnVuZ3JwSWNvbkhUTUwpXHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoJyNzdG5faWNvbnMnKS5odG1sKCQoJyNzdG5faWNvbnMnKS5odG1sKCkpOyAvLyBSZWZyZXNoIERPTVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGRyYXcgdGhlIGxpbmUgaW4gcmFpbG1hcFxyXG4gICAgZHJhd0xpbmUoKSB7XHJcbiAgICAgICAgJCgnLnJtZy1saW5lJykucmVtb3ZlQ2xhc3MoJ3JtZy1saW5lX19tdHInKS5hZGRDbGFzcygncm1nLWxpbmVfX3NobWV0cm8nKTtcclxuXHJcbiAgICAgICAgdGhpcy5icmFuY2hlcy5tYXAoYnJhbmNoID0+IHtcclxuICAgICAgICAgICAgdmFyIGxpbmVNYWluU3RucyA9IGJyYW5jaC5maWx0ZXIoc3RuSWQgPT4gdGhpcy5zdGF0aW9uc1tzdG5JZF0uc3RhdGUgPj0gMCk7XHJcbiAgICAgICAgICAgIHZhciBsaW5lUGFzc1N0bnMgPSBicmFuY2guZmlsdGVyKHN0bklkID0+IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnN0YXRlIDw9IDApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxpbmVNYWluU3Rucy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGxpbmVQYXNzU3RucyA9IGJyYW5jaDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxpbmVNYWluU3Rucy5maWx0ZXIoc3RuSWQgPT4gbGluZVBhc3NTdG5zLmluZGV4T2Yoc3RuSWQpICE9PSAtMSkubGVuZ3RoID09IDAgJiYgbGluZU1haW5TdG5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdHdvIHNldCBkaXNqb2ludFxyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmVQYXNzU3Ruc1swXSA9PT0gYnJhbmNoWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLTEgLTEgMSAxXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVBhc3NTdG5zLnB1c2gobGluZU1haW5TdG5zWzBdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZU1haW5TdG5zWzBdID09PSBicmFuY2hbMF0gJiYgbGluZU1haW5TdG5zW2xpbmVNYWluU3Rucy5sZW5ndGggLSAxXSA9PT0gYnJhbmNoW2JyYW5jaC5sZW5ndGggLSAxXSAmJiBsaW5lUGFzc1N0bnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVBhc3NTdG5zID0gYnJhbmNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVNYWluU3RucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAxIDEgLTEgLTFcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUGFzc1N0bnMudW5zaGlmdChsaW5lTWFpblN0bnNbbGluZU1haW5TdG5zLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc3RyZXRjaCB0aGUgbWFpbiBsaW5lXHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5fbGluZVBhdGgobGluZU1haW5TdG5zKVxyXG4gICAgICAgICAgICB2YXIgW3gsIHksIGhdID0gcGF0aC5tYXRjaCgvW1xcZC5dKy9nKS5tYXAocG9zID0+IE51bWJlcihwb3MpKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAncicpIHtcclxuICAgICAgICAgICAgICAgIHBhdGggPSBgTSAke3h9LCR7eSAtIDZ9IEggJHtoICsgMzB9IGwgMTIsMTIgTCAke3h9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gYE0gJHt4IC0gMzB9LCR7eSAtIDZ9IEggJHtofSBsIDAsMTIgTCAke3ggLSA0Mn0sJHt5ICsgNn0gWmBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZHJhdyB0aGUgbWFpbiBsaW5lXHJcbiAgICAgICAgICAgICQoJyNsaW5lX21haW4nKS5hcHBlbmQoJCgnPHBhdGg+JywgeyBpZDogJ2xpbmVfbWFpbl9wYXRoJywgZDogcGF0aCB9KSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdHJldGNoIHRoZSBwYXNzIGxpbmVcclxuICAgICAgICAgICAgdmFyIHBhdGggPSB0aGlzLl9saW5lUGF0aChsaW5lUGFzc1N0bnMpXHJcbiAgICAgICAgICAgIHZhciBbeCwgeSwgaF0gPSBwYXRoLm1hdGNoKC9bXFxkLl0rL2cpLm1hcChwb3MgPT4gTnVtYmVyKHBvcykpXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdyJykge1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IGBNICR7eCAtIDMwfSwke3kgLSA2fSBIICR7aH0gbCAwLDEyIEwgJHt4IC0gMzB9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gYE0gJHt4fSwke3kgLSA2fSBIICR7aCArIDMwfSBsIDAsMTIgTCAke3h9LCR7eSArIDZ9IFpgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRyYXcgdGhlIHBhc3MgbGluZVxyXG4gICAgICAgICAgICAkKCcjbGluZV9wYXNzJykuYXBwZW5kKCQoJzxwYXRoPicsIHsgaWQ6ICdsaW5lX3Bhc3NfcGF0aCcsIGQ6IHBhdGggfSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjbGluZV9tYWluJykuaHRtbCgkKCcjbGluZV9tYWluJykuaHRtbCgpKTtcclxuICAgICAgICAkKCcjbGluZV9wYXNzJykuaHRtbCgkKCcjbGluZV9wYXNzJykuaHRtbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsVGhlbWVDb2xvdXIoKSB7XHJcbiAgICAgICAgc3VwZXIuZmlsbFRoZW1lQ29sb3VyKCk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgd2lsbCBhZGQgdGhlIHN0cm9rZSBvZiB0aGUgc3RhdGlvbiBjaXJjbGVcclxuICAgICAgICAvLyBob3dldmVyIHRoZSBzdHJva2UgcGF0aCBpcyBkZWZpbmVkIGluIGluZGV4Lmh0bWxcclxuICAgICAgICAvLyB3aGljaCBtYWRlIGNoYW5naW5nIHN0YXRpb24gc3R5bGUgc3RyYW5nZVxyXG4gICAgICAgICQoJ3BhdGgjJyArIHN0YXRpb25faWQpLmF0dHIoJ3N0cm9rZScsIHRoaXMuX3RoZW1lQ29sb3VyKTtcclxuICAgICAgICAkKCdwYXRoI2ludDJfc2gnKS5hdHRyKCdzdHJva2UnLCB0aGlzLl90aGVtZUNvbG91cik7XHJcblxyXG4gICAgICAgIC8vIHBhc3Mgc3Ryb2tlIHNob3VsZCBiZSBhZGRlZCBzb21ld2hlcmUgZWxzZVxyXG4gICAgICAgIC8vIGJ1dCBJIGNhbid0IGZpZ3VyZSBpdCBvdXRcclxuICAgICAgICAkKCdwYXRoI3N0bl9zaF9wYXNzJykuYXR0cignc3Ryb2tlJywgJyNhYWEnKTtcclxuICAgICAgICAkKCdwYXRoI2ludDJfc2hfcGFzcycpLmF0dHIoJ3N0cm9rZScsICcjYWFhJyk7XHJcblxyXG4gICAgICAgIC8vIHRoZSByYWlsbWFwIG1haW4gbGluZVxyXG4gICAgICAgICQoJ3BhdGgjbGluZV9tYWluX3BhdGgnKS5hdHRyKCdmaWxsJywgdGhpcy5fdGhlbWVDb2xvdXIpXHJcbiAgICAgICAgJCgncGF0aCNsaW5lX3Bhc3NfcGF0aCcpLmF0dHIoJ2ZpbGwnLCAnI2FhYScpXHJcblxyXG4gICAgICAgIC8vIHRoZSBsYXN0IGRlY29yYXRpb24gbGluZVxyXG4gICAgICAgIGxldCBkaXJlY3Rpb24gPSB0aGlzLl9kaXJlY3Rpb24gPT0gJ2wnID8gJ2xlZnQnIDogJ3JpZ2h0J1xyXG4gICAgICAgICQoYCNsaW5lX3NobWV0cm9fJHtkaXJlY3Rpb259YCkuYXR0cignZmlsbCcsIHRoaXMuX3RoZW1lQ29sb3VyKVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fbGluZU5hbWVzWzBdLm1hdGNoKC8oXFxkKilcXHcrLykpIHtcclxuICAgICAgICAgICAgLy8gdGhlIGxpbmUgc3RhcnRzIHdpdGggbnVtYmVyXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fc2htZXRybyA+ICNsaW5lX251bWJlciA+IHRleHQnKS5hdHRyKCdmaWxsJywgJyNmZmYnKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBsaW5lIHN0YXJ0cyB3aXRoIGxldHRlclxyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX3NobWV0cm8gPiAjbGluZV9uYW1lX3RleHQnKS5hdHRyKCdmaWxsJywgJyNmZmYnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5OYW1lQmcoKSB7XHJcbiAgICAgICAgJCgnI2N1cnJlbnRfYmcnKS5oaWRlKCk7ICAvLyBmaXggdGhlIG15c3RlcmlvdXMgYmxhY2sgcmVjdFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJld3JpdGUgdGhpcyB0byBtYWtlIHN1cmUgdGhlIGxpbmUgaXMgZHJhdyBiZWZvcmUgY29sb3JcclxuICAgIHN0YXRpYyBpbml0U1ZHKGxpbmUpIHtcclxuICAgICAgICBsaW5lLmRyYXdTVkdGcmFtZSgpO1xyXG4gICAgICAgIGxpbmUuc2hvd0ZyYW1lT3V0ZXIoKTtcclxuICAgICAgICBsaW5lLmRyYXdTdG5zKCk7XHJcblxyXG4gICAgICAgIC8vIGNoYW5nZSB0aGUgZnVuYyBjYWxsIGhlcmVcclxuICAgICAgICBsaW5lLmRyYXdMaW5lKCk7XHJcbiAgICAgICAgbGluZS5maWxsVGhlbWVDb2xvdXIoKTtcclxuICAgICAgICAvLyBjaGFuZ2UgdGhlIGZ1bmMgY2FsbCBoZXJlXHJcblxyXG4gICAgICAgIGxpbmUuZHJhd1N0cmlwKCk7XHJcbiAgICAgICAgbGluZS5kcmF3RGVzdEluZm8oKTtcclxuICAgICAgICBsaW5lLmxvYWRGb250cygpO1xyXG4gICAgICAgIGxpbmUudXBkYXRlU3RuTmFtZUJnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGNhbGwgZmlsbFRoZW1lQ29sb3VyIHdoZW4gZmxpcCBkaXJlY3Rpb25cclxuICAgIHNldCBkaXJlY3Rpb24odmFsKSB7XHJcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnZGlyZWN0aW9uJywgdmFsKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHsgY29udGludWU7IH1cclxuICAgICAgICAgICAgc3RuSW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9zdG5TdGF0ZShzdG5JZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRoZSBmdW5jIGNhbGwgaGVyZVxyXG4gICAgICAgIHRoaXMuZmlsbFRoZW1lQ29sb3VyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV3cml0ZSB0aGlzIHRvIGdldCBkcmF3U3RucyByZWNhbGxlZFxyXG4gICAgdXBkYXRlU3RuVHJhbnNmZXIoc3RuSWQ6IElELCB0eXBlLCBpbmZvPW51bGwpIHtcclxuICAgICAgICBzdXBlci51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgdHlwZSwgaW5mbylcclxuXHJcbiAgICAgICAgLy8gY2xlYXIgdGhlIG9yaWdpbmFsIHN0YXRpb25zXHJcbiAgICAgICAgJCgnI3N0bl9pY29ucycpLmVtcHR5KClcclxuICAgICAgICB0aGlzLmRyYXdTdG5zKClcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9