(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(7),a=s(1);class i extends a.l{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get _dxdy(){var t=this.name[1].split("\\").length;let e;return e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6,[e,0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5]}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-60)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends i{constructor(t,e){super(t,e),this._intInfos=e.interchange[0][0]}get ungrpHTML(){return[this.iconHTML,this.nameHTML,...this.intTickHTML]}get iconHTML(){var[t,e]=-1==this.state?["int2_sh_pass","Pass"]:["int2_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn",stroke:this._intInfos[a.d.colour]}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})`}).append($("<g>",{"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1]))))}get intTickHTML(){var t=1==this.namePos?180:0,e=this._intInfos[a.d.colour],s=$("<use>",{"xlink:href":"#int_sh",fill:e,transform:`translate(10,-10)rotate(${t})`,class:"rmg-line__shmetro rmg-line__change"});-1==this.state&&s.addClass("rmg-line__pass");var n=String(this._intInfos[a.d.nameZH]).match(/(\d*)\w+/);if(n)var i=n[0];else i=String(this._intInfos[a.d.nameZH]);return[s,$("<text>",{transform:`translate(15,10)rotate(${t})`,class:"rmg-name__zh rmg-name__shmetro--line_name"}).text(i)]}get _nameClass(){return-1==this.state?"Pass":"Future"}}s.d(e,"RMGLineSH",(function(){return h}));class h extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":return new r(t,e);default:return new i(t,e)}}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));var n=(a=this._linePath(e)).match(/[\d.]+/g);a=`M ${n[0]},${n[1]} H ${Number(n[2])+30}`,$("#line_main").append($("<path>",{d:a}));var a;n=(a=this._linePath(s)).match(/[\d.]+/g);a=`M ${Number(n[0])-30},${n[1]} H ${n[2]}`,$("#line_pass").append($("<path>",{d:a}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#int2_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("path#int2_sh_pass").attr("stroke","#aaa"),$("#line_shmetro_left_use").attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff")}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);var t=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,e="r"==this._direction?1:-1,s=(this._svgDestWidth-e*t)/20;s="r"==this._direction?s:this._svgDestWidth-20;var n=90*(1-e);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${s},135)rotate(${n})`);var a=s+285*e;if($("#station_info_shmetro > #platform").attr("transform",`translate(${a},130)`),"l"===this._direction)var i="end",r=.8*this._svgDestWidth;else i="start",r=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${r},135)`,"text-anchor":i});var[h,o]=["",""];if(this[`${this._direction}ValidDests`].forEach(t=>{h+=this.stations[t].name[0],o+=this.stations[t].name[1]}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${h}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${o}`),"l"===this._direction){i="end";var _=180}else i="start",_=this._svgDestWidth;var[l,m]=this._lineNames,d=l.match(/(\d*)\w+/);d?(_-=180,l="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${_-120},70)`}),$("#station_info_shmetro > #line_number > text").text(d[0]).attr("transform",`translate(${_-100},170)`)):(_-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${_-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(l),$("#station_info_shmetro > #line_name_text > text:last-child").text(m),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${_},135)`,"text-anchor":i}),$("#line_shmetro_left_use").attr({transform:"translate(0,220)"})}updateStnNameBg(){$("#current_bg").hide()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,