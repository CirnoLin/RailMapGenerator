(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["LineSH"],{

/***/ "./src/Line/LineSH.ts":
/*!****************************!*\
  !*** ./src/Line/LineSH.ts ***!
  \****************************/
/*! exports provided: RMGLineSH */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLineSH", function() { return RMGLineSH; });
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Line */ "./src/Line/Line.ts");
/* harmony import */ var _Station_StationSH__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Station/StationSH */ "./src/Station/StationSH.ts");


class RMGLineSH extends _Line__WEBPACK_IMPORTED_MODULE_0__["RMGLine"] {
    constructor(param) {
        super(param);
    }
    _initStnInstance(stnId, stnInfo) {
        switch (stnInfo.change_type) {
            case 'int2':
            case 'int3_l':
            case 'int3_r':
                return new _Station_StationSH__WEBPACK_IMPORTED_MODULE_1__["IntStationSH"](stnId, stnInfo);
            case 'osi11_ul':
            case 'osi11_pl':
            case 'osi11_ur':
            case 'osi11_pr':
            case 'osi12_ul':
            case 'osi12_pl':
            case 'osi12_ur':
            case 'osi12_pr':
            case 'osi21_ul':
            case 'osi21_pl':
            case 'osi21_ur':
            case 'osi21_pr':
            case 'osi22_ul':
            case 'osi22_pl':
            case 'osi22_ur':
            case 'osi22_pr':
            default:
                return new _Station_StationSH__WEBPACK_IMPORTED_MODULE_1__["RMGStationSH"](stnId, stnInfo);
        }
    }
    // draw the destination
    drawDestInfo() {
        $('#station_info_shmetro > #platform > text').text(this._platformNum);
        var bcr = $('#station_info_shmetro > #dest_text')[0].getBoundingClientRect();
        var flagLength = 160 + 150 + bcr.width + 45 + 50;
        // arrow
        var isLeft = (this._direction == 'l') ? 1 : -1;
        var arrowX = (this._svgDestWidth - isLeft * flagLength) / 20;
        arrowX = (this._direction == 'l') ? arrowX : this._svgDestWidth - 20;
        var arrowRotate = 90 * (1 - isLeft);
        $('#station_info_shmetro > #arrow_left_use').attr('transform', `translate(${arrowX},135)rotate(${arrowRotate})`);
        // not in use now
        var platformNumX = arrowX + isLeft * (160 + 50 + 75);
        $('#station_info_shmetro > #platform').attr('transform', `translate(${platformNumX},130)`);
        // list the destination text
        // Todo: fix svg_dest_width*0.8, this has only been tested on 1000 width
        if (this._direction === 'r') {
            var txtAnchor = 'end';
            var destNameX = this._svgDestWidth * 0.8;
        }
        else {
            var txtAnchor = 'start';
            var destNameX = this._svgDestWidth * 0.2;
        }
        $('#station_info_shmetro > #dest_text').attr({
            transform: `translate(${destNameX},135)`,
            'text-anchor': txtAnchor
        });
        // for each left valid destinations, get the name from id
        var [destinations_zh, destinations_en] = [[], []];
        this[`${this._direction}ValidDests`].forEach(stn => {
            destinations_zh.push(this.stations[stn].name[0]);
            destinations_en.push(this.stations[stn].name[1]);
        });
        $('#station_info_shmetro > #dest_text > text:first-child').text(`往${destinations_zh.join("，")}`);
        $('#station_info_shmetro > #dest_text > text:last-child').text(`To ${destinations_en.join(", ")}`);
        // prepare for the line name
        let lineNameX = this._direction === 'l' ? this._svgDestWidth : 320;
        var [lineNameZH, lineNameEN] = this._lineNames;
        // line starts with numbers or letters
        var lineNumber = lineNameZH.match(/(\d*)\w+/);
        if (lineNumber) {
            lineNameX -= 180;
            lineNameZH = "号线";
            $('#station_info_shmetro > #line_number > rect').attr({
                fill: this._themeColour,
                'transform': `translate(${lineNameX - 150},70)`,
            });
            $('#station_info_shmetro > #line_number > text')
                .show().text(lineNumber[0])
                .attr({
                transform: `translate(${lineNameX - 95},170)`,
                style: 'letter-spacing:-10px',
                'text-anchor': 'middle'
            });
            // Chito: If match format X号线, "号线" always black
            // ignore inherit style from g#line_name_text
            $('#station_info_shmetro > #line_name_text text').attr('fill', 'black');
        }
        else {
            lineNameX -= 280;
            $('#station_info_shmetro > #line_number > rect').attr({
                fill: this._themeColour,
                'transform': `translate(${lineNameX - 10},60)`,
                'width': 260,
                'height': 150
            });
            $('#station_info_shmetro > #line_number > text').hide();
            // Chito: If not match format X号线, use inherit style
            $('#station_info_shmetro > #line_name_text text').removeAttr('fill');
            // Todo: set the eng in the middle
            $('#station_info_shmetro > #line_name_text > text:last-child').attr('dx', 10);
        }
        // set the line name
        $('#station_info_shmetro > #line_name_text > text:first-child').text(lineNameZH);
        $('#station_info_shmetro > #line_name_text > text:last-child').text(lineNameEN);
        $('#station_info_shmetro > #line_name_text').attr({
            transform: `translate(${lineNameX},135)`,
            'text-anchor': 'start'
        });
        // the last decoration line
        let path = '';
        if (this._direction == 'l') {
            path = `M30,10 H ${this._svgDestWidth - 20} V 20 H 20 Z`;
        }
        else {
            path = `M20,10 H ${this._svgDestWidth - 30} l 10,10 H 20 Z`;
        }
        $('#line_shmetro_use').attr({
            transform: `translate(0,220)`,
            d: path,
        });
    }
    // rewrite this to append dom and then getBoundingClientRect
    // to get the exact position where int icon can be fit
    drawStns() {
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $('#stn_icons').append(stnInstance.html);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
        for (let [stnId, stnInstance] of Object.entries(this.stations)
            .filter(stn => stn[1] instanceof _Station_StationSH__WEBPACK_IMPORTED_MODULE_1__["IntStationSH"])) {
            $(`#rmg-name__shmetro--${stnId}`).parent().append(stnInstance.ungrpIconHTML);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
    }
    // rewrite this to change the y of branch station
    _stnYShare(stnId) {
        if (this.branches[0].includes(stnId))
            return 0;
        else
            return 3;
    }
    _linePath(stnIds, type) {
        var [prevId, prevY, prevX] = [];
        var path = {};
        const e = 30;
        stnIds.forEach(stnId => {
            var [x, y] = ['_stnRealX', '_stnRealY'].map(fun => this[fun](stnId));
            if (!prevY && prevY !== 0) {
                [prevId, prevX, prevY] = [stnId, x, y];
                path['start'] = [x, y];
                return;
            }
            if (y === 0) {
                // merge back to main line
                if (y != prevY) {
                    path['bifurcate'] = [prevX, prevY];
                }
            }
            else {
                // on the branch line
                if (y != prevY) {
                    path['bifurcate'] = [x, y];
                }
            }
            path['end'] = [x, y];
            [prevId, prevX, prevY] = [stnId, x, y];
        });
        // generate path
        if (!path.hasOwnProperty('start')) {
            // no line generated
            // keys in path: none
            return '';
        }
        else if (!path.hasOwnProperty('end')) {
            // litte line (only beyond terminal station)
            // keys in path: start
            let [x, y] = path['start'];
            if (type === 'main') {
                // current at terminal(end) station, draw the litte main line
                if (this._direction === 'l') {
                    return `M ${x},${y - 6} L ${x - e},${y - 6} l -12,12 L ${x},${y + 6} Z`;
                }
                else {
                    return `M ${x},${y - 6} L ${x + e},${y - 6} l 12,12 L ${x},${y + 6} Z`;
                }
            }
            else {
                // type === 'pass'
                // current at terminal(start) station, draw the litte pass line
                if (this._direction === 'l') {
                    return `M ${x},${y - 6} L ${x + e},${y - 6} l 0,12 L ${x - e},${y + 6} Z`;
                }
                else {
                    return `M ${x - e},${y - 6} L ${x},${y - 6} l 0,12 L ${x - e},${y + 6} Z`;
                }
            }
        }
        else if (!path.hasOwnProperty('bifurcate')) {
            // general main line
            // keys in path: start, end
            let [x, y] = path['start'], h = path['end'][0];
            if (type === 'main') {
                if (this._direction === 'l') {
                    return `M ${x - e},${y - 6} H ${h} l 0,12 L ${x - 42},${y + 6} Z`;
                }
                else {
                    return `M ${x},${y - 6} H ${h + e} l 12,12 L ${x},${y + 6} Z`;
                }
            }
            else {
                // type === 'pass'
                if (this._direction === 'l') {
                    return `M ${x - e},${y - 6} H ${h + e} l 0,12 L ${x - e},${y + 6} Z`;
                }
                else {
                    return `M ${x - e},${y - 6} H ${h + e} l 0,12 L ${x - e},${y + 6} Z`;
                }
            }
        }
        else {
            // main line bifurcate here to become the branch line
            // and path return here are only branch line
            // keys in path: start, bifurcate, end
            // Todo: disable lower branch
            let [x, y] = path['start'], h = path['end'][0];
            let [xb, yb] = path['bifurcate'], [xm, ym] = path['end'];
            if (type === 'main') {
                if (this._direction === 'l') {
                    if (ym > y) {
                        // main line, left direction, center to upper
                        return `M ${x - e},${y - 6} H ${xb + e} L ${xm},${ym - 6} l 0,12 L ${xb + e},${yb + 6} L ${x - e - 12},${y + 6} Z`;
                    }
                    else {
                        // main line, left direction, upper to center
                        // this same as the other, but replace x with xm and xm with x
                        return `M ${xm},${ym - 6} H ${xb - e} L ${x},${y - 6} l 0,12 L ${xb - e},${yb + 6} L ${xm},${ym + 6} Z`;
                    }
                }
                else {
                    if (ym > y) {
                        // main line, right direction, upper to center
                        return `M ${x},${y - 6} H ${xb + e} L ${xm},${ym - 6} l 0,12 L ${xb + e},${yb + 6} L ${x},${y + 6} Z`;
                    }
                    else {
                        // main line, right direction, center to upper
                        // this same as the other, but replace x with xm and xm with x
                        return `M ${xm + e},${ym - 6} H ${xb - e} L ${x},${y - 6} l 0,12 L ${xb - e},${yb + 6} L ${xm + e + 12},${ym + 6} Z`;
                    }
                }
            }
            else {
                // type === 'pass'
                if (this._direction === 'l') {
                    if (ym > y) {
                        // pass line, left direction, center to upper
                        return `M ${x - e},${y - 6} H ${xb + e} L ${xm},${ym - 6} l 0,12 L ${xb + e},${yb + 6} L ${x - e},${y + 6} Z`;
                    }
                    else {
                        // pass line, left direction, upper to center
                        // this same as the other, but replace x with xm and xm with x
                        return `M ${x},${y - 6} L ${xb - e},${yb - 6} H ${xm + e} l 0,12 L ${xb - e},${yb + 6} L ${x},${y + 6} Z`;
                    }
                }
                else {
                    if (ym > y) {
                        // pass line, right direction, upper to center
                        return `M ${x - e},${y - 6} H ${xb + e} L ${xm},${ym - 6} l 0,12 L ${xb + e},${yb + 6} L ${x - e},${y + 6} Z`;
                    }
                    else {
                        // pass line, right direction, center to upper
                        // this same as the other, but replace x with xm and xm with x
                        return `M ${x},${y - 6} L ${xb - e},${yb - 6} H ${xm + e} l 0,12 L ${xb - e},${yb + 6} L ${x},${y + 6} Z`;
                    }
                }
            }
        }
    }
    // draw the line in railmap
    drawLine() {
        $('.rmg-line').removeClass('rmg-line__mtr').addClass('rmg-line__shmetro');
        this.branches.map(branch => {
            var lineMainStns = branch.filter(stnId => this.stations[stnId].state >= 0);
            var linePassStns = branch.filter(stnId => this.stations[stnId].state <= 0);
            if (lineMainStns.length === 1) {
                linePassStns = branch;
            }
            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {
                // if two set disjoint
                if (linePassStns[0] === branch[0]) {
                    // -1 -1 1 1
                    linePassStns.push(lineMainStns[0]);
                }
                else if (lineMainStns[0] === branch[0] && lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] && linePassStns.length) {
                    linePassStns = branch;
                    lineMainStns = [];
                }
                else {
                    // 1 1 -1 -1
                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);
                }
            }
            // rewrite the second parameter to get the path correctly
            $('#line_main').append($('<path>', { d: this._linePath(lineMainStns, 'main') }));
            $('#line_pass').append($('<path>', { d: this._linePath(linePassStns, 'pass') }));
        });
        $('#line_main').html($('#line_main').html());
        $('#line_pass').html($('#line_pass').html());
    }
    fillThemeColour() {
        super.fillThemeColour();
        // this will add the stroke of the station circle
        // however the stroke path is defined in index.html
        // which made changing station style strange
        $('circle#' + _Station_StationSH__WEBPACK_IMPORTED_MODULE_1__["station_id"]).attr('stroke', this._themeColour);
        $('path#int2_sh').attr('stroke', this._themeColour);
        // pass stroke should be added somewhere else
        // but I can't figure it out
        // Chito: path#stn_sh now have stroke attribute #aaa, no need to change. 
        // the railmap line
        $('#line_main').children().attr('fill', this._themeColour);
        $('#line_pass').children().attr('fill', '#aaa');
        // the last decoration line
        $(`#line_shmetro_use`).attr('fill', this._themeColour);
        // if (this._lineNames[0].match(/(\d*)\w+/)) {
        //     // the line starts with number
        //     $('#station_info_shmetro > #line_number > text').attr('fill', '#fff')
        // } else {
        //     // the line starts with letter
        //     $('#station_info_shmetro > #line_name_text').attr('fill', '#fff')
        // }
        // Chito: g#line_name_text's fill always equal to the foreground colour, 
        // while inner text elements may have different fill, see drawDestInfo()
        $('#station_info_shmetro > #line_name_text').attr('fill', this._fgColour);
        // dest info line color (both background and foreground)
        $('#station_info_shmetro > #line_number > rect').attr('fill', this._themeColour);
        $('#station_info_shmetro > #line_number > text').attr('fill', this._fgColour);
    }
    updateStnNameBg() {
        $('#current_bg').hide(); // fix the mysterious black rect
    }
    // rewrite this to make sure the line is draw before color
    static initSVG(line) {
        line.drawSVGFrame();
        line.showFrameOuter();
        line.drawStns();
        // change the func call here
        line.drawLine();
        line.fillThemeColour();
        // change the func call here
        line.drawStrip();
        line.drawDestInfo();
        line.updateStnNameBg();
    }
    // rewrite this to call fillThemeColour when flip direction
    set direction(val) {
        super.direction = val;
        this.fillThemeColour();
    }
    // rewrite this to call fillThemeColour when set current station
    set currentStnId(val) {
        super.currentStnId = val;
        this.fillThemeColour();
    }
    set lineNames(val) {
        super.lineNames = val;
        this.drawDestInfo();
    }
    // rewrite this to get drawStns and recalled
    updateStnTransfer(stnId, type, info = null) {
        super.updateStnTransfer(stnId, type, info);
        this.fillThemeColour();
        // clear the original stations
        $('#stn_icons').empty();
        this.drawStns();
    }
    // rewrite this to call fillThemeColour when add station
    addStn(prep, stnId, loc, end) {
        let [newId, newInfo] = super.addStn(prep, stnId, loc, end);
        this.fillThemeColour();
        return [newId, newInfo];
    }
    // rewrite this to change the railmap position
    set yPc(val) {
        super.yPc = val;
        let y = val * this._svgHeight / 50;
        $('g#main').attr('transform', `translate(0,${y})`);
    }
    set padding(val) {
        super.padding = val;
        this.fillThemeColour();
    }
    set branchSpacing(val) {
        super.branchSpacing = val;
        this.fillThemeColour();
    }
    removeStn(stnId) {
        if (super.removeStn(stnId)) {
            this.fillThemeColour();
            return true;
        }
        else {
            return false;
        }
    }
    updateBranchType(stnId, direction, type) {
        // Chito: This method should be remove when this._stnState() is updated. 
        if (!super.updateBranchType(stnId, direction, type)) {
            return false;
        }
        this.fillThemeColour();
        return true;
    }
    updateBranchFirst(stnId, direction, first) {
        if (super.updateBranchFirst(stnId, direction, first)) {
            this.fillThemeColour();
            return true;
        }
        else {
            return false;
        }
    }
    updateBranchPos(stnId, direction, pos) {
        // Chito: This method should be remove when this._stnState() is updated. 
        if (!super.updateBranchPos(stnId, direction, pos)) {
            return false;
        }
        this.fillThemeColour();
        return true;
    }
}


/***/ }),

/***/ "./src/Station/StationSH.ts":
/*!**********************************!*\
  !*** ./src/Station/StationSH.ts ***!
  \**********************************/
/*! exports provided: RMGStationSH, IntStationSH, station_id */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStationSH", function() { return RMGStationSH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntStationSH", function() { return IntStationSH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "station_id", function() { return station_id; });
/* harmony import */ var _Station__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Station */ "./src/Station/Station.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");


const station_id = 'stn_sh';
class RMGStationSH extends _Station__WEBPACK_IMPORTED_MODULE_0__["RMGStation"] {
    constructor(id, data) {
        super(id, data);
        this.stnNum = data.num;
    }
    get _nameShift() { return false; }
    get _tickRotation() { return this.y > 0 ? 180 : 0; }
    get _dxdy() {
        var nameENLn = this.name[1].split('\\').length;
        let dx;
        if (this._nameShift) {
            dx = this._tickRotation === 0 ? -9 : 16 + (nameENLn - 1) * 12 * Math.cos(-45);
        }
        else {
            dx = this._tickRotation === 0 ? (24 + (nameENLn - 1) * 12) * Math.cos(-45) : -6;
        }
        // let dx = this._nameShift ? -8 : (24 + (nameENLn-1)*12) * Math.cos(-45);
        let dy = this._tickRotation === 0 ? (-4 - 21.921875 - (nameENLn - 1) * 12 * Math.cos(-45)) : 17.5;
        // var dy = (-4 - 21.921875 - (nameENLn-1)*12*Math.cos(-45)) * (this._tickRotation === 0 ? 1 : -1);
        return [dx, dy];
    }
    get iconHTML() {
        var [iconType, numClass] = (this.state == -1) ? [station_id + '_pass', 'Pass'] : [station_id, 'Future'];
        return $('<g>', { transform: `translate(${this.x},${this.y})` })
            .append($('<use>', { 'xlink:href': '#' + iconType, class: 'rmg-stn' }));
    }
    get nameHTML() {
        let [dx, dy] = this._dxdy;
        return $('<g>', {
            'transform': `translate(${this.x - dx},${this.y + dy})rotate(-50)`,
            'text-anchor': this._tickRotation === 0 ? 'start' : 'end',
            // class: `Name ${this.nameClass}`
            class: `Name Future` // todo: fix this
        }).append($('<text>').addClass('rmg-name__zh rmg-name__shmetro--station').text(this.name[0])).append($('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__shmetro--station'
        }).text(this.name[1].split('\\')[0]).append($('<tspan>', {
            'x': 0, 'dy': 12
        }).text(this.name[1].split('\\')[1])));
    }
}
class IntStationSH extends RMGStationSH {
    constructor(id, data) {
        super(id, data);
        this._intInfos = data.transfer.info[0];
    }
    // rewrite this to append dom and then getBoundingClientRect
    // to get the exact position where int icon can be fit
    get html() {
        return $('<g>', { id: this.id }).append(...this.ungrpHTML);
    }
    // rewrite this to get all drawing function to be called
    get ungrpHTML() {
        return [this.iconHTML, this.nameHTML];
    }
    get ungrpIconHTML() {
        return [...this.intTickHTML];
    }
    // interchange station icon on main line
    get iconHTML() {
        var [iconType, numClass] = (this.state == -1) ? ['int2_sh_pass', 'Pass'] : ['int2_sh', 'Future'];
        return $('<g>', { transform: `translate(${this.x},${this.y})` })
            .append($('<use>', { 'xlink:href': '#' + iconType, class: 'rmg-stn', stroke: this._intInfos[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour] }));
    }
    // regular station name
    get nameHTML() {
        let [dx, dy] = this._dxdy;
        // wrap the name, decro_line and int_line under g in order to rotate at once
        return $('<g>', {
            transform: `translate(${this.x - dx},${this.y + dy})`,
        }).append(
        // the original name text
        $('<g>', {
            id: `rmg-name__shmetro--${this.id}`,
            'text-anchor': this._tickRotation === 0 ? 'start' : 'end',
            class: `Name Future` // todo: fix this
        }).append($('<text>').addClass('rmg-name__zh rmg-name__shmetro--station').text(this.name[0])).append($('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__shmetro--station'
        }).text(this.name[1].split('\\')[0]).append($('<tspan>', {
            'x': 0, 'dy': 12
        }).text(this.name[1].split('\\')[1]))));
    }
    // interchange station icon after the station name
    get intTickHTML() {
        let lineElems = [];
        // get the exact station name width so that the
        // interchange station icon can be right after the station name
        let stnNameElem = $(`#rmg-name__shmetro--${this.id}`);
        let bcr = stnNameElem.get(0).getBoundingClientRect();
        let dx = bcr.right - bcr.left + 5;
        this._intInfos.map((stn, index) => {
            // interchange line icon after station name
            let lineIconColour = stn[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour];
            let lineIconElem = $('<use>', {
                fill: lineIconColour,
                class: 'rmg-line__shmetro rmg-line__change',
            });
            if (this.state == -1) {
                lineIconElem.addClass('rmg-line__pass');
            }
            // interchange line name
            let lineNameElem = $('<text>', {
                class: 'rmg-name__zh rmg-name__shmetro--line_name',
                'text-anchor': 'middle',
                fill: stn[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].fg],
            });
            // line starts with numbers or letters
            let lineNumber = String(stn[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH]).match(/(\d*)\w+/);
            if (lineNumber) {
                // number line
                var lineName = lineNumber[0];
                lineIconElem.attr({
                    'xlink:href': '#int_sh_number',
                    transform: `translate(${dx + index * 25},-12)`,
                });
                lineNameElem.attr({
                    // Todo: fix this hard-coded center(10) position
                    transform: `translate(${dx + 10 + index * 25},8)`,
                }).text(lineName);
            }
            else {
                // letter line
                var lineName = String(stn[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH]);
                lineIconElem.attr({
                    'xlink:href': '#int_sh_letter',
                    transform: `translate(${dx + index * 70},-12)`,
                });
                lineNameElem.attr({
                    // Todo: fix this hard-coded center(30) position
                    transform: `translate(${dx + 30 + index * 70},8)`,
                }).text(lineName);
            }
            lineElems.push(lineIconElem, lineNameElem);
        });
        // rotate the station info now
        // other wise the bcr will be inaccurate due to the rotation
        let stnInfoElem = stnNameElem.parent();
        stnInfoElem.attr('transform', `${stnInfoElem.attr('transform')}rotate(-50)`);
        return lineElems;
    }
    get _nameClass() {
        return (this.state == -1) ? 'Pass' : 'Future';
    }
}



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,