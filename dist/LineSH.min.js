(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(7),i=s(1);class a extends i.l{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get _dxdy(){var t=this.name[1].split("\\").length;let e;return e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6,[e,0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5]}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})rotate(-60)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends a{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get ungrpIconHTML(){return[...this.intTickHTML]}get iconHTML(){var[t,e]=-1==this.state?["int2_sh_pass","Pass"]:["int2_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn",stroke:this._intInfos[i.d.colour]}))}get nameHTML(){let[t,e]=this._dxdy;return $("<g>",{transform:`translate(${this.x-t},${this.y+e})`}).append($("<g>",{id:`rmg-name__shmetro--${this.id}`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1]))))}get intTickHTML(){let t=[],e=$(`#rmg-name__shmetro--${this.id}`),s=e.get(0).getBoundingClientRect(),n=s.right-s.left+5;this._intInfos.map((e,s)=>{var a=e[i.d.colour],r=$("<use>",{"xlink:href":"#int_sh",fill:a,transform:`translate(${n+25*s},-12)`,class:"rmg-line__shmetro rmg-line__change"});-1==this.state&&r.addClass("rmg-line__pass");let o=String(e[i.d.nameZH]).match(/(\d*)\w+/);if(o)var h=o[0];else h=String(e[i.d.nameZH]);var l=$("<text>",{transform:`translate(${n+6+25*s},8)`,class:"rmg-name__zh rmg-name__shmetro--line_name"}).text(h);t.push(r,l)});let a=e.parent();return a.attr("transform",`${a.attr("transform")}rotate(-45)`),t}get _nameClass(){return-1==this.state?"Pass":"Future"}}s.d(e,"RMGLineSH",(function(){return o}));class o extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":case"int3_l":case"int3_r":return new r(t,e);case"osi11_ul":case"osi11_pl":case"osi11_ur":case"osi11_pr":case"osi12_ul":case"osi12_pl":case"osi12_ur":case"osi12_pr":case"osi21_ul":case"osi21_pl":case"osi21_ur":case"osi21_pr":case"osi22_ul":case"osi22_pl":case"osi22_ur":case"osi22_pr":default:return new a(t,e)}}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);var t=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,e="l"==this._direction?1:-1,s=(this._svgDestWidth-e*t)/20;s="l"==this._direction?s:this._svgDestWidth-20;var n=90*(1-e);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${s},135)rotate(${n})`);var i=s+285*e;if($("#station_info_shmetro > #platform").attr("transform",`translate(${i},130)`),"r"===this._direction)var a="end",r=.8*this._svgDestWidth;else a="start",r=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${r},135)`,"text-anchor":a});var[o,h]=[[],[]];this[`${this._direction}ValidDests`].forEach(t=>{o.push(this.stations[t].name[0]),h.push(this.stations[t].name[1])}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${o.join("，")}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${h.join(", ")}`);let l="l"===this._direction?this._svgDestWidth:320;var[_,m]=this._lineNames,d=_.match(/(\d*)\w+/);d?(l-=180,_="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-120},70)`}),$("#station_info_shmetro > #line_number > text").text(d[0]).attr("transform",`translate(${l-100},170)`)):(l-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${l-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(_),$("#station_info_shmetro > #line_name_text > text:last-child").text(m),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${l},135)`,"text-anchor":"start"});let c="l"==this._direction?"left":"right";$("#line_shmetro_use").attr({"xlink:href":`#line_shmetro_${c}`,transform:"translate(0,220)"})}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html());for(let[t,e]of Object.entries(this.stations).filter(t=>t[1]instanceof r))$(`#rmg-name__shmetro--${t}`).parent().append(e.ungrpIconHTML);$("#stn_icons").html($("#stn_icons").html())}_stnYShare(t){if(["linestart","lineend"].includes(t)||this._stnIndegree(t)>1||this._stnOutdegree(t)>1)return 0;var e=this.stations[t].parents[0];return e?1==this._stnOutdegree(e)?this._stnYShare(e):0==this.stations[e].children.indexOf(t)?3:0:0}_linePath(t,e){var[s,n,i]=[],a={};if(t.forEach(t=>{var[e,r]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!n&&0!==n)return[s,i,n]=[t,e,r],void(a.start=[e,r]);r===this.y?r!=n&&(a.bifurcate=[i,n]):r!=n&&(a.bifurcate=[e,r]),a.end=[e,r],[s,i,n]=[t,e,r]}),console.log(t,e),console.log(a),a.hasOwnProperty("end")){let[t,s]=a.start,n=a.end[0];if(a.hasOwnProperty("bifurcate")){let[n,i]=a.bifurcate,[r,o]=a.end;return"main"===e?"l"===this._direction?o>s?`M ${t-30},${s-6} H ${n} L ${r},${o-6} l 0,12 L ${n},${i+6} L ${t-42},${s+6} Z`:`M ${r},${o-6} H ${n} L ${t},${s-6} l 0,12 L ${n},${i+6} L ${r},${o+6} Z`:o>s?`M ${t},${s-6} H ${n} L ${r},${o-6} l 0,12 L ${n},${i+6} L ${t},${s+6} Z`:`M ${r},${o-6} H ${n} L ${t},${s-6} l 0,12 L ${n},${i+6} L ${r},${o+6} Z`:(this._direction,o>s?`M ${t-30},${s-6} H ${n} L ${r},${o-6} l 0,12 L ${n},${i+6} L ${t-30},${s+6} Z`:`M ${t},${s-6} L ${n},${i-6} H ${r} l 0,12 L ${n},${i+6} L ${t},${s+6} Z`)}return"main"===e?"l"===this._direction?`M ${t-30},${s-6} H ${n} l 0,12 L ${t-42},${s+6} Z`:`M ${t},${s-6} H ${n+30} l 12,12 L ${t},${s+6} Z`:"l"===this._direction?`M ${t},${s-6} H ${n+30} l 0,12 L ${t},${s+6} Z`:`M ${t-30},${s-6} H ${n} l 0,12 L ${t-30},${s+6} Z`}return""}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));let n=this._linePath(e,"main");(n||""!=n)&&$("#line_main").append($("<path>",{id:"line_main_path",d:n})),n=this._linePath(s,"pass"),(n||""!=n)&&$("#line_pass").append($("<path>",{id:"line_pass_path",d:n}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#int2_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("path#int2_sh_pass").attr("stroke","#aaa"),$("path#line_main_path").attr("fill",this._themeColour),$("path#line_pass_path").attr("fill","#aaa");let t="l"==this._direction?"left":"right";$(`#line_shmetro_${t}`).attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff")}updateStnNameBg(){$("#current_bg").hide()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.drawLine(),t.fillThemeColour(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}set direction(t){super.direction=t,this.fillThemeColour()}set currentStnId(t){super.currentStnId=t,this.fillThemeColour()}updateStnTransfer(t,e,s=null){super.updateStnTransfer(t,e,s),this.fillThemeColour(),$("#stn_icons").empty(),this.drawStns()}addStn(t,e,s,n){let[i,a]=super.addStn(t,e,s,n);return this.fillThemeColour(),[i,a]}set yPc(t){super.yPc=t;let e=t*this._svgHeight/50;$("g#main").attr("transform",`translate(0,${e})`)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,