(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{16:function(t,e,s){"use strict";s.r(e);var n=s(7),a=s(1);class i extends a.l{constructor(t,e){super(t,e),this.stnNum=e.num}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get iconHTML(){var[t,e]=-1==this.state?["stn_sh_pass","Pass"]:["stn_sh","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"}))}get nameHTML(){var t=this.name[1].split("\\").length;let e;e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6;let s=0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5;return $("<g>",{transform:`translate(${this.x-e},${this.y+s})rotate(-45)`,"text-anchor":0===this._tickRotation?"start":"end",class:"Name Future"}).append($("<text>").addClass("rmg-name__zh rmg-name__shmetro--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__shmetro--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:12}).text(this.name[1].split("\\")[1])))}}class r extends i{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}}s.d(e,"RMGLineSH",(function(){return o}));class o extends n.a{constructor(t){super(t)}_initStnInstance(t,e){switch(e.change_type){case"int2":return new r(t,e);default:return new i(t,e)}}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__shmetro"),this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),s=t.filter(t=>this.stations[t].state<=0);1===e.length&&(s=t),0==e.filter(t=>-1!==s.indexOf(t)).length&&e.length&&(s[0]===t[0]?s.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&s.length?(s=t,e=[]):s.unshift(e[e.length-1]));var n=(a=this._linePath(e)).match(/[\d.]+/g);a=`M ${n[0]},${n[1]} H ${Number(n[2])+30}`,$("#line_main").append($("<path>",{d:a}));var a;n=(a=this._linePath(s)).match(/[\d.]+/g);a=`M ${Number(n[0])-30},${n[1]} H ${n[2]}`,$("#line_pass").append($("<path>",{d:a}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}fillThemeColour(){super.fillThemeColour(),$("path#stn_sh").attr("stroke",this._themeColour),$("path#stn_sh_pass").attr("stroke","#aaa"),$("#line_shmetro_left_use").attr("fill",this._themeColour),this._lineNames[0].match(/(\d*)\w+/)?$("#station_info_shmetro > #line_number > text").attr("fill","#fff"):$("#station_info_shmetro > #line_name_text").attr("fill","#fff")}drawDestInfo(){$("#station_info_shmetro > #platform > text").text(this._platformNum);let t=this[this._direction+"ValidDests"];var[e,s]=[0,1].map(e=>t.map(t=>this.stations[t].name[e].replace(/\\/g," ")).join("/")),n=310+$("#station_info_shmetro > #dest_text")[0].getBoundingClientRect().width+45+50,a="r"==this._direction?1:-1,i=(this._svgDestWidth-a*n)/20;i="r"==this._direction?i:this._svgDestWidth-20;var r=90*(1-a);$("#station_info_shmetro > #arrow_left_use").attr("transform",`translate(${i},135)rotate(${r})`);var o=i+285*a;if($("#station_info_shmetro > #platform").attr("transform",`translate(${o},130)`),"l"===this._direction)var h="end",_=.8*this._svgDestWidth;else h="start",_=.2*this._svgDestWidth;$("#station_info_shmetro > #dest_text").attr({transform:`translate(${_},135)`,"text-anchor":h});var[l,m]=["",""];if(this.lValidDests.forEach(t=>{l+=this.stations[t].name[0],m+=this.stations[t].name[1]}),$("#station_info_shmetro > #dest_text > text:first-child").text(`往${l}`),$("#station_info_shmetro > #dest_text > text:last-child").text(`To ${m}`),"l"===this._direction){h="end";var f=180}else h="start",f=this._svgDestWidth;var[d,c]=this._lineNames,u=d.match(/(\d*)\w+/);u?(f-=180,d="号线",$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${f-120},70)`}),$("#station_info_shmetro > #line_number > text").text(u[0]).attr("transform",`translate(${f-100},170)`)):(f-=280,$("#station_info_shmetro > #line_number > rect").attr({style:`fill:${this._themeColour}`,transform:`translate(${f-10},60)`,width:260,height:150}),$("#station_info_shmetro > #line_number > text").hide(),$("#station_info_shmetro > #line_name_text > text:last-child").attr("dx",10)),$("#station_info_shmetro > #line_name_text > text:first-child").text(`${d}`),$("#station_info_shmetro > #line_name_text > text:last-child").text(`${c}`),$("#station_info_shmetro > #line_name_text").attr({transform:`translate(${f},135)`,"text-anchor":h}),$("#line_shmetro_left_use").attr({transform:"translate(0,220)"})}updateStnNameBg(){$("#current_bg").hide()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,