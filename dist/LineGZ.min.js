(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(t,e,i){"use strict";i.r(e);var n=i(0),s=i(1);class a extends s.l{constructor(t,e){super(t,e),this.stnNum=e.num}get nameClass(){switch(this.state){case-1:return"Pass";case 0:return"CurrentGZ";default:return"Future"}}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get iconHTML(){var[t,e]=-1==this.state?["stn_gz_pass","Pass"]:["stn_gz","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"})).append($("<g>",{class:"Name "+e}).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--line-num"})).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--station-num",x:0}).text(this.stnNum)))}get nameHTML(){var t=this.name[1].split("\\").length;let e;e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6;let i=0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5;return $("<g>",{transform:`translate(${this.x-e},${this.y+i})rotate(-45)`,"text-anchor":0===this._tickRotation?"start":"end",class:`Name ${this.nameClass}`}).append($("<text>").addClass("rmg-name__zh rmg-name__gzmtr--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__gzmtr--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:10,class:"rmg-name__en rmg-name__gzmtr--station"}).text(this.name[1].split("\\")[1])))}}class r extends a{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}get intTickHTML(){var t=this._intInfos.map(t=>t[s.d.colour]).map((t,e)=>{let i=this.x-2*(this._intInfos.length-1)+4*e;return $("<use>",{"xlink:href":"#inttick_gz",stroke:-1==this.state?"#aaa":t,transform:`translate(${i},${this.y})rotate(${this._tickRotation})`})});return $("<g>",{class:"rmg-line rmg-line__gzmtr rmg-line__change"}).append(...t)}get intNameHTML(){var t=this._intInfos.map(t=>t[s.d.nameZH]).map(t=>t.match(/[\d]+|[\D]+/g)||[""]).map((t,e)=>{var i=!1;return 2==t.length&&!isNaN(Number(t[0]))&&isNaN(Number(t[1]))&&(i=!0),$("<text>",{y:8.5+28*e*(0===this._tickRotation?1:-1),class:"rmg-name__zh rmg-name__gzmtr--int"}).append($("<tspan>",{"font-size":"16px","alignment-baseline":"central"}).text(i?t[0]:"")).append($("<tspan>",{dy:-.5,"alignment-baseline":"central"}).text(i?t[1]:t.join("")))}),e=this._intInfos.map(t=>t[s.d.nameEN]).map((t,e)=>{let i=$("<text>",{y:19.5+28*e*(0===this._tickRotation?1:-1),class:"rmg-name__en"}).text(t);return i.addClass(t.length>10?"rmg-name__gzmtr--int-small":"rmg-name__gzmtr--int"),i});this._intInfos.map(t=>t[s.d.fg]).map((i,n)=>{"#fff"!=i&&-1!=this.state||([t[n],e[n]]=[t[n],e[n]].map(t=>t.addClass("rmg-name__gzmtr--white-fg")))});var i=this._intInfos.map(t=>t[s.d.colour]).map((t,e)=>$("<use>",{"xlink:href":"#intbox_gz",fill:-1==this.state?"#aaa":t,y:28*e*(0===this._tickRotation?1:-1)}));return $("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+(0===this._tickRotation?23:-47)})`}).append(...i,...t,...e)}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML]}}class h extends r{constructor(t,e,i){e.interchange[0].unshift(i),e.interchange[1]&&e.interchange[0].push(...e.interchange[1].slice(1)),super(t,e)}get _nameShift(){return!0}get _tickRotation(){return 0===this.parents.indexOf(this.branch.left[1])||0===this.children.indexOf(this.branch.right[1])?0:180}}class _ extends r{constructor(t,e){e.interchange[0].push(...e.interchange[1].slice(1)),super(t,e)}}var o=i(7);i.d(e,"RMGLineGZ",(function(){return l}));class l extends o.a{constructor(t){super(t),this._psdNum=t.psd_num,this._lineNum=t.line_num,this._infoPanelType=t.info_panel_type,this._directionGZX=t.direction_gz_x,this._directionGZY=t.direction_gz_y}_initStnInstance(t,e){if(2===e.children.length||2===e.parents.length)return new h(t,e,[this.themeCity,this.themeLine,this._themeColour,this._fgColour,...this._lineNames]);switch(e.change_type){case"int2":case"int3_l":case"int3_r":return new r(t,e);case"osi11_ul":case"osi11_pl":case"osi11_ur":case"osi11_pr":case"osi12_ul":case"osi12_pl":case"osi12_ur":case"osi12_pr":case"osi22_ul":case"osi22_pl":case"osi22_ur":case"osi22_pr":return new _(t,e);case"osi22_end_p":case"osi22_end_u":if("linestart"==e.parents[0]||"lineend"==e.children[0])return new _(t,e);default:return new a(t,e)}}get lineXs(){return"r"==this._direction?[this._svgWidth*this._padding/100+65,this._svgWidth*(1-this._padding/100)]:[this._svgWidth*this._padding/100,this._svgWidth*(1-this._padding/100)-65]}set svgWidth(t){super.svgWidth=t,this.loadLineNum(),this.loadLineName(),this.loadDirection()}set padding(t){super.padding=t,this.loadLineNum(),this.loadLineName()}set branchSpacing(t){super.branchSpacing=t,this.loadLineNum()}set direction(t){this._direction=t,Object(n.l)("direction",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t));l.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadLineNum(),this.loadLineName(),this.loadDirection(),this.loadFonts()}set txtFlip(t){super.txtFlip=t,this.loadLineNum()}set currentStnId(t){super.currentStnId=t,this.loadLineNum(),this.loadDirection()}set lineNum(t){this._lineNum=t,Object(n.l)("line_num",t),this.loadLineNum(),this.loadFonts()}set lineNames(t){this._lineNames=t,Object(n.l)("line_name",t),this.loadLineName(),this.loadFonts()}set psdNum(t){this._psdNum=t,Object(n.l)("psd_num",t),$(".rmg-psd-num").text(t)}set infoPanelType(t){this._infoPanelType=t,Object(n.l)("info_panel_type",t),$("#station_info_gzmtr #indicator_light").attr("xlink:href","#indicator_"+t),this.drawStrip(),this.fillThemeColour(),this.drawPSD()}set directionGZX(t){this._directionGZX=t,Object(n.l)("direction_gz_x",t);let e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;$("#direction_gz").attr("transform",`translate(${e},${i})`)}set directionGZY(t){this._directionGZY=t,Object(n.l)("direction_gz_y",t);let e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;$("#direction_gz").attr("transform",`translate(${e},${i})`)}_stnXShare(t){let{criticalPath:e,branches:i}=this,n=this;if(e.nodes.includes(t))return super._stnXShare(t);if(this.criticalPath.nodes.join(",")!==i[0].join(","))return super._stnXShare(t);{let e=i.slice(1).filter(e=>e.includes(t))[0],s=this._cp(e[0],t).len,a=this._cp(t,e[e.length-1]).len;return i[0].includes(e[0])&&i[0].includes(e[e.length-1])?(n._stnXShare(e[0])*a+n._stnXShare(e[e.length-1])*s)/(s+a):i[0].includes(e[0])?n._stnXShare(e[0])+s:n._stnXShare(e[e.length-1])-a}}_stnYShare(t){if(["linestart","lineend"].includes(t))return 0;var e=this.branches;if(e[0].includes(t))return 0;{let s=1;for(;!e[s].includes(t);)s++;if(e[0].includes(e[s][0])){var i=e[s][0],n="children";return 0==this.stations[i][n].indexOf(e[s][1])?2:-2}i=e[s].slice().reverse()[0],n="parents";return 0==this.stations[i][n].indexOf(e[s].slice().reverse()[1])?2:-2}}drawStrip(){let t=(t=>{switch(this._infoPanelType){case"gz28":case"gzgf":return 60;case"gz3":return 40;case"gz1421":return 20}})();$("#dest_strip_gz, #strip_gz").attr({y:this._svgHeight-t,height:t})}_rightWideFactor(t){return"BranchStationGZ"===this.stations[t].constructor.name&&0===this.stations[t]._tickRotation?.25:0}_leftWideFactor(t){return"BranchStationGZ"===this.stations[t].constructor.name&&0!==this.stations[t]._tickRotation?.5:0}_pathWeight(t,e){return this.stations[t].children.includes(e)?1+this._rightWideFactor(t)+this._leftWideFactor(e):-1/0}_linePath(t){var[e,i,n]=[],s=[],{stnExtraH:a,stnSpareH:r,pathTurnESE:h,pathTurnSEE:_,pathTurnENE:o,pathTurnNEE:l,stnDX:m}=this;return t.forEach(t=>{var[a,r]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!i&&0!==i)return[e,n,i]=[t,a,r],void s.push(`M ${a},${r}`);r===this.y?(r<i&&s.push(`H ${a-30}`,"a 30,30 0 0,0 30,-30",`V ${r}`),r>i&&s.push(`H ${a-30}`,"a 30,30 0 0,1 30,30",`V ${r}`)):(r<i&&s.push(`V ${r+30}`,"a 30,30 0 0,1 30,-30",`H ${a}`),r>i&&s.push(`V ${r-30}`,"a 30,30 0 0,0 30,30",`H ${a}`)),s.push(`H ${a}`),[e,n,i]=[t,a,r]}),s.join(" ").replace(/( H ([\d.]+))+/g," H $2")}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__gzmtr"),super.drawLine()}loadFonts(){$(".rmg-name__zh, .rmg-name__en").addClass("rmg-name__gzmtr")}fillThemeColour(){super.fillThemeColour(),$("#dest_strip_gz, #strip_gz").attr("fill",this._themeColour),["gz3","gz1421"].includes(this._infoPanelType)?($("#big_psd use").attr("fill",this._themeColour),"#fff"===this._fgColour?$("#big_psd text").addClass("rmg-name__gzmtr--white-fg"):$("#big_psd text").removeClass("rmg-name__gzmtr--white-fg")):($("#big_psd use").attr("fill","white"),$("#big_psd text").removeClass("rmg-name__gzmtr--white-fg")),$("path#stn_gz").attr("stroke",this._themeColour),$("#station_info_gzmtr > #platform > circle").attr("fill",this._themeColour),$("#line_name use").attr("fill",this._themeColour),"#fff"===this._fgColour?($("#station_info_gzmtr > #platform text").addClass("rmg-name__gzmtr--white-fg"),$("#line_name text").addClass("rmg-name__gzmtr--white-fg")):($("#station_info_gzmtr > #platform text").removeClass("rmg-name__gzmtr--white-fg"),$("#line_name text").removeClass("rmg-name__gzmtr--white-fg"))}loadLineNum(){$(".rmg-name__gzmtr--line-num").text(this._lineNum).attr("transform","translate(-9.25,0)");var t=Object(n.h)($(".rmg-name__gzmtr--line-num")[1],"railmap");if(2===this._lineNum.length){var e=t.width>15.59375?15.59375/t.width:1;$(".rmg-name__gzmtr--line-num").attr("transform",`translate(-9.25,0)scale(${e})`),$(".rmg-name__gzmtr--station-num").attr("transform",`translate(9.25,0)scale(${e})`)}else{e=t.width>15.59375?15.59375/t.width:1;$(".rmg-name__gzmtr--line-num").attr("transform",`translate(-9.25,0)scale(${e})`),$(".rmg-name__gzmtr--station-num").attr("transform","translate(9.25,0)")}}loadLineName(){var t=this._lineNames[0].match(/[\d]+|[\D]+/g)||"",e=!1;2==t.length&&!isNaN(Number(t[0]))&&isNaN(Number(t[1]))&&(e=!0),e?($("#line_name tspan").eq(0).text(t[0]),$("#line_name tspan").eq(1).text(t[1]),$("#line_name tspan").eq(1).attr("dy","-0.5")):($("#line_name tspan").eq(0).text(""),$("#line_name tspan").eq(1).text(this._lineNames[0]),$("#line_name tspan").eq(1).attr("dy","-0.5")),$("#line_name text:last-child").text(this._lineNames[1]),this._lineNames[1].length>10?$("#line_name text:last-child").text(this._lineNames[1]).addClass("rmg-name__gzmtr--int-small").removeClass("rmg-name__gzmtr--int"):$("#line_name text:last-child").text(this._lineNames[1]).removeClass("rmg-name__gzmtr--int-small").addClass("rmg-name__gzmtr--int"),"#fff"==this._fgColour&&$("#line_name text").addClass("rmg-name__gzmtr--white-fg");var i="r"==this._direction?this.lineXs[0]-65:this.lineXs[1]+65;$("#line_name").attr({transform:`translate(${i},${this.y-18})scale(1.5)`})}loadDirection(){let t,e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;$("#direction_gz").attr("transform",`translate(${e},${i})`),"l"==this._direction?($("#direction_gz use").attr("transform","scale(0.35)"),$("#direction_gz g").attr({"text-anchor":"start",transform:"translate(65,-5)"}),t=this.lValidDests):($("#direction_gz use").attr("transform","scale(0.35)rotate(180)"),$("#direction_gz g").attr({"text-anchor":"end",transform:"translate(-65,-5)"}),t=this.rValidDests);var[n,s]=[0,1].map(e=>t.map(t=>this.stations[t].name[e].replace(/\\/g," ")).join("/"));$("#direction_gz text").eq(0).text(n+"方向"),$("#direction_gz text").eq(1).text("Towards "+s)}updateStnName(t,e,i){super.updateStnName(t,e,i),this.loadLineNum(),(this.stations[this._currentStnId].parents.includes(t)||this.stations[this._currentStnId].children.includes(t))&&(this.drawDestInfo(),this.loadFonts()),this._currentStnId===t&&(this.drawDestInfo(),this.loadFonts()),(this.leftDests.includes(t)||this.rightDests.includes(t))&&this.loadDirection()}drawDestInfo(){$("#station_info_gzmtr #big_stn_num text").eq(1).text(this.stations[this._currentStnId].stnNum),$("#station_info_gzmtr > #platform > text").eq(0).text(this._platformNum),$("#station_info_gzmtr > #big_psd text").eq(0).text(this._psdNum),$("#station_info_gzmtr #big_name").empty().attr("transform",`translate(${this._svgDestWidth/2},${100-20*(this.stations[this._currentStnId].name[1].split("\\").length-1)})`).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--dest"}).text(this.stations[this._currentStnId].name[0])).append($("<text>",{dy:70,class:"rmg-name__en rmg-name__gzmtr--dest"}).text(this.stations[this._currentStnId].name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:40,"alignment-baseline":"middle"}).text(this.stations[this._currentStnId].name[1].split("\\")[1]||""))),$("#terminus_gz").attr("transform",`translate(${this._svgWidth/2},100)`);let t=this.stations[this._currentStnId]["l"===this._direction?"parents":"children"].filter(t=>(this.stations[this._currentStnId].branch["l"===this._direction?"left":"right"].length,!0));["linestart","lineend"].includes(t[0])?($("#station_info_gzmtr").find("#big_next, #big_next_2").hide(),$("#station_info_gzmtr > use").eq(0).hide(),$("#line_main, #line_pass, #line_name, #stn_icons, #direction_gz").hide(),$("#terminus_gz").show()):(1===t.length?($("#station_info_gzmtr #big_next").show(),$("#station_info_gzmtr #big_next_2").hide()):($("#station_info_gzmtr #big_next").hide(),$("#station_info_gzmtr #big_next_2").show()),$("#station_info_gzmtr > use").eq(0).show(),$("#line_main, #line_pass, #line_name, #stn_icons, #direction_gz").show(),$("#terminus_gz").hide());let[e,i]=["",""],s=0;if(1===t.length){var a=this.stations[t[0]];[e,i]=a.name,s=e.length,$("#station_info_gzmtr #big_next g:nth-child(2) text").eq(0).text(e),$("#station_info_gzmtr #big_next g:nth-child(2) text").eq(1).text(i.split("\\")[0]).append($("<tspan>",{x:0,dy:17,"alignment-baseline":"middle"}).text(i.split("\\")[1]||""))}else t.forEach((t,n)=>{let a=this.stations[t];[e,i]=a.name,e.length>s&&(s=e.length),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(2).text(e),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(3).text(i.split("\\")[0]).append($("<tspan>",{x:0,dy:13,"alignment-baseline":"middle"}).text(i.split("\\")[1]||""));let r,h=this.routes.filter(e=>-1!==e.indexOf(t)).map(t=>t.filter(t=>"linestart"!==t&&"lineend"!==t));r="l"===this._direction?Array.from(new Set(h.map(t=>t[0]))).reverse():Array.from(new Set(h.map(t=>t.reverse()[0]))),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(0).text(r.map(t=>this.stations[t].name[0]).join("/")+"方向"),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(1).text("Towards "+r.map(t=>this.stations[t].name[1]).join("/"))});$("#station_info_gzmtr").html($("#station_info_gzmtr").html());var r=Object(n.h)($("#station_info_gzmtr #big_name text")[0],"destination");$("#station_info_gzmtr #big_stn_num").attr("transform",`translate(${(this._svgDestWidth+r.width)/2+55},${120-20*(this.stations[this._currentStnId].name[1].split("\\").length-1)})scale(1.4)`);let h={x:0,y:0,width:0,height:0};if(1===t.length)h=Object(n.h)($("#station_info_gzmtr #big_next g:nth-child(2)")[0],"destination");else{let t=[Object(n.h)($("#station_info_gzmtr #big_next_2 g:nth-child(2)")[0],"destination"),Object(n.h)($("#station_info_gzmtr #big_next_2 g:nth-child(4)")[0],"destination")];h=t[0].width>t[1].width?t[0]:t[1]}"l"==this._direction?($("#station_info_gzmtr #platform").attr("transform",`translate(${this._svgDestWidth-100},120)`),1===t.length?s<=2?($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform","translate(150,110)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(115+35*(1+s)+r.x)/2-20},120)scale(0.25)`)):($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform","translate(132.5,110)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(115+35*(.5+s)+r.x)/2-20},120)scale(0.25)`)):($("#station_info_gzmtr #big_next_2 g:nth-child(2)").attr("transform","translate(113,80)"),$("#station_info_gzmtr #big_next_2 g:nth-child(4)").attr("transform","translate(113,190)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(99+27*(1+s)+r.x)/2-20},120)scale(0.25)`)),$("#station_info_gzmtr #big_next g:first-child").attr("transform","translate(80,110)"),$("#station_info_gzmtr #big_next_2 g:first-child").attr("transform","translate(72,80)"),$("#station_info_gzmtr #big_next_2 g:nth-child(3)").attr("transform","translate(72,190)")):($("#station_info_gzmtr #platform").attr("transform","translate(100,120)"),1===t.length?($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform",`translate(${this._svgDestWidth-45-h.width},110)`),s<=2?($("#station_info_gzmtr #big_next g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-70},110)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-70-35+r.x+r.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`)):($("#station_info_gzmtr #big_next g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-52.5},110)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-87.5+r.x+r.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`))):($("#station_info_gzmtr #big_next_2 g:nth-child(2)").attr("transform",`translate(${this._svgDestWidth-45-h.width},80)`),$("#station_info_gzmtr #big_next_2 g:nth-child(4)").attr("transform",`translate(${this._svgDestWidth-45-h.width},190)`),$("#station_info_gzmtr #big_next_2 g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-41},80)`),$("#station_info_gzmtr #big_next_2 g:nth-child(3)").attr("transform",`translate(${this._svgDestWidth-45-h.width-41},190)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-41-27+r.x+r.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`))),$("#station_info_gzmtr #indicator_light").attr({x:this._svgDestWidth/2,y:270,"xlink:href":"#indicator_"+this._infoPanelType}),this.drawPSD()}drawPSD(){$("#station_info_gzmtr #big_psd").attr("transform",`translate(${this._svgDestWidth/2+80},${(t=>{switch(this._infoPanelType){case"gz3":return 218;case"gz1421":return 238;default:return 242}})()})`)}addStn(t,e,i,n){var s=super.addStn(t,e,i,n);return this.loadLineNum(),this.loadDirection(),s}removeStn(t){return!!super.removeStn(t)&&(this.loadLineNum(),this.loadDirection(),!0)}updateStnTransfer(t,e,i=null){super.updateStnTransfer(t,e,i),this.loadLineNum()}updateBranchType(t,e,i){super.updateBranchType(t,e,i),this.loadLineNum(),this.loadDirection()}updateBranchFirst(t,e,i){return!!super.updateBranchFirst(t,e,i)&&(this.loadLineNum(),this.loadDirection(),!0)}updateBranchPos(t,e,i){super.updateBranchPos(t,e,i),this.loadLineNum(),this.loadDirection()}static initSVG(t){super.initSVG(t),t.loadLineNum(),t.loadLineName(),t.loadDirection()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,