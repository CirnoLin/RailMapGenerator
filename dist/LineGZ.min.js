(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["LineGZ"],{

/***/ "./src/Line/LineGZ.ts":
/*!****************************!*\
  !*** ./src/Line/LineGZ.ts ***!
  \****************************/
/*! exports provided: RMGLineGZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLineGZ", function() { return RMGLineGZ; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Station/StationGZ */ "./src/Station/StationGZ.ts");
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line */ "./src/Line/Line.ts");



class RMGLineGZ extends _Line__WEBPACK_IMPORTED_MODULE_2__["RMGLine"] {
    constructor(param) {
        super(param);
        this._psdNum = param.psd_num;
        this._lineNum = param.line_num;
        this._infoPanelType = param.info_panel_type;
        this._directionGZX = param.direction_gz_x;
        this._directionGZY = param.direction_gz_y;
    }
    _initStnInstance(stnId, stnInfo) {
        if (stnInfo.children.length === 2 || stnInfo.parents.length === 2) {
            return new _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["BranchStationGZ"](stnId, stnInfo, [this.themeCity, this.themeLine, this._themeColour, this._fgColour, ...this._lineNames]);
        }
        switch (stnInfo.transfer.type) {
            case 'int2':
            case 'int3':
                return new _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["IntStationGZ"](stnId, stnInfo);
            case 'osi11':
            case 'osi12':
            case 'osi13':
            case 'osi21':
            case 'osi22':
            case 'osi31':
                return new _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["OSIStationGZ"](stnId, stnInfo);
            default:
                return new _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["RMGStationGZ"](stnId, stnInfo);
        }
    }
    get lineXs() {
        if (this._direction == 'r') {
            return [
                this._svgWidth * this._padding / 100 + 65,
                this._svgWidth * (1 - this._padding / 100)
            ];
        }
        else {
            return [
                this._svgWidth * this._padding / 100,
                this._svgWidth * (1 - this._padding / 100) - 65
            ];
        }
    }
    set svgWidth(val) {
        super.svgWidth = val;
        this.loadLineNum();
        this.loadLineName();
        this.loadDirection();
    }
    set padding(val) {
        super.padding = val;
        this.loadLineNum();
        this.loadLineName();
    }
    set branchSpacing(val) {
        super.branchSpacing = val;
        this.loadLineNum();
    }
    set direction(val) {
        this._direction = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            this._updateStnInstance(stnId);
        }
        RMGLineGZ.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadLineNum();
        this.loadLineName();
        this.loadDirection();
    }
    set currentStnId(val) {
        super.currentStnId = val;
        this.loadLineNum();
        this.loadDirection();
    }
    set lineNum(val) {
        this._lineNum = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('line_num', val);
        this.loadLineNum();
    }
    set lineNames(val) {
        this._lineNames = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('line_name', val);
        this.loadLineName();
        // (to be fixed) redraw branching station
    }
    set psdNum(val) {
        this._psdNum = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('psd_num', val);
        $('.rmg-psd-num').text(val);
    }
    set infoPanelType(val) {
        this._infoPanelType = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('info_panel_type', val);
        $('#station_info_gzmtr #indicator_light').attr('xlink:href', '#indicator_' + val);
        // $('#dest_strip, #strip').removeAttr('class').addClass(`rmg-strip__gzmtr--${this._infoPanelType}`);
        this.drawStrip();
        this.fillThemeColour();
        this.drawPSD();
    }
    set directionGZX(val) {
        this._directionGZX = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction_gz_x', val);
        let x = this._svgWidth * this._directionGZX / 100;
        let y = this._svgHeight * this._directionGZY / 100;
        $('#direction_gz').attr('transform', `translate(${x},${y})`);
    }
    set directionGZY(val) {
        this._directionGZY = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction_gz_y', val);
        let x = this._svgWidth * this._directionGZX / 100;
        let y = this._svgHeight * this._directionGZY / 100;
        $('#direction_gz').attr('transform', `translate(${x},${y})`);
    }
    _stnXShare(stnId) {
        let { criticalPath, branches } = this;
        let self = this;
        if (criticalPath.nodes.includes(stnId)) {
            return super._stnXShare(stnId);
        }
        if (this.criticalPath.nodes.join(',') !== branches[0].join(',')) {
            return super._stnXShare(stnId);
        }
        else {
            let branchWithStn = branches.slice(1).filter(branch => branch.includes(stnId))[0];
            let lenToLeft = this._cp(branchWithStn[0], stnId).len;
            let lenToRight = this._cp(stnId, branchWithStn[branchWithStn.length - 1]).len;
            if (branches[0].includes(branchWithStn[0]) && branches[0].includes(branchWithStn[branchWithStn.length - 1])) {
                return (self._stnXShare(branchWithStn[0]) * lenToRight + self._stnXShare(branchWithStn[branchWithStn.length - 1]) * lenToLeft) / (lenToLeft + lenToRight);
            }
            else if (branches[0].includes(branchWithStn[0])) {
                return self._stnXShare(branchWithStn[0]) + lenToLeft;
            }
            else {
                return self._stnXShare(branchWithStn[branchWithStn.length - 1]) - lenToRight;
            }
        }
    }
    /**
     * Vertical position (in shares) of station icon.
     */
    _stnYShare(stnId) {
        if (['linestart', 'lineend'].includes(stnId)) {
            return 0;
        }
        var branches = this.branches;
        if (branches[0].includes(stnId)) {
            return 0;
        }
        else {
            let i = 1;
            while (i < branches.length) {
                if (branches[i].includes(stnId)) {
                    break;
                }
                i++;
            }
            if (branches[0].includes(branches[i][0])) {
                var branchingStnId = branches[i][0];
                var neToFind = 'children';
                if (this.stations[branchingStnId][neToFind].indexOf(branches[i][1]) == 0) {
                    return 2;
                }
                else {
                    return -2;
                }
            }
            else {
                var branchingStnId = branches[i].slice().reverse()[0];
                var neToFind = 'parents';
                if (this.stations[branchingStnId][neToFind].indexOf(branches[i].slice().reverse()[1]) == 0) {
                    return 2;
                }
                else {
                    return -2;
                }
            }
        }
    }
    drawStrip() {
        let stripHeight = (type => {
            switch (type) {
                case 'gz28':
                case 'gzgf':
                    return 60;
                case 'gz3':
                    return 40;
                case 'gz1421':
                    return 20;
            }
        })(this._infoPanelType);
        $('#dest_strip_gz, #strip_gz').attr({
            y: this._svgHeight - stripHeight,
            height: stripHeight
        });
    }
    _rightWideFactor(stnId) {
        if (this.stations[stnId] instanceof _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["BranchStationGZ"] && this.stations[stnId]._tickRotation === 0) {
            return 0.25;
        }
        else {
            return 0;
        }
    }
    _leftWideFactor(stnId) {
        if (this.stations[stnId] instanceof _Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["BranchStationGZ"] && this.stations[stnId]._tickRotation !== 0) {
            return 0.25;
        }
        else {
            return 0;
        }
    }
    _pathWeight(stnId1, stnId2) {
        if (!this.stations[stnId1].children.includes(stnId2)) {
            return -Infinity;
        }
        return 1 + this._rightWideFactor(stnId1) + this._leftWideFactor(stnId2);
        // return 1;
    }
    /**
     * Set width for colour strips. (Height of strips are controlled by `RMGLineGZ.drawStrip`. )
     */
    drawSVGFrame() {
        super.drawSVGFrame();
        $('#dest_strip_gz').attr('width', this._svgDestWidth);
        $('#strip_gz').attr('width', this._svgWidth);
    }
    drawStns() {
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $('#stn_icons').append(stnInstance.html);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $(`#stn_icons #${stnId} g#stn_name`).append(stnInstance.expressTagHTML(this._themeColour));
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
    }
    _linePath(stnIds) {
        let prevY;
        var path = [];
        stnIds.forEach(stnId => {
            var [x, y] = ['_stnRealX', '_stnRealY'].map(fun => this[fun](stnId));
            if (!prevY && prevY !== 0) {
                prevY = y;
                path.push(`M ${x},${y}`);
                return;
            }
            if (y === 0) {
                if (y < prevY) {
                    path.push(`H ${x - 30}`, 'a 30,30 0 0,0 30,-30', `V ${y}`);
                }
                if (y > prevY) {
                    path.push(`H ${x - 30}`, 'a 30,30 0 0,1 30,30', `V ${y}`);
                }
            }
            else {
                if (y < prevY) {
                    path.push(`V ${y + 30}`, 'a 30,30 0 0,1 30,-30', `H ${x}`);
                }
                if (y > prevY) {
                    path.push(`V ${y - 30}`, 'a 30,30 0 0,0 30,30', `H ${x}`);
                }
            }
            path.push(`H ${x}`);
            prevY = y;
        });
        // simplify path
        return path.join(' ').replace(/( H ([\d.]+))+/g, ' H $2');
    }
    drawLine() {
        $('.rmg-line').removeClass('rmg-line__mtr').addClass('rmg-line__gzmtr');
        super.drawLine();
    }
    initFonts() {
        let styleSheet = $('link#css_share')[0].sheet;
        let idx = [];
        Array.from(styleSheet.cssRules).forEach((rule, i) => {
            if (rule.cssText.indexOf('.rmg-name__zh') !== -1) {
                idx.push(i);
            }
            else if (rule.cssText.indexOf('.rmg-name__en') !== -1) {
                idx.push(i);
            }
        });
        idx.forEach(i => styleSheet.deleteRule(i));
        styleSheet.insertRule('.rmg-name__zh {alignment-baseline: central; font-family: Arial, SimHei, STHeiti, PingFangSC-Regular, sans-serif;}');
        styleSheet.insertRule('.rmg-name__en {alignment-baseline: middle; font-family: Arial, sans-serif;}');
    }
    fillThemeColour() {
        super.fillThemeColour();
        $('#dest_strip_gz, #strip_gz').attr('fill', this._themeColour);
        if (['gz3', 'gz1421'].includes(this._infoPanelType)) {
            $('#big_psd use').attr('fill', this._themeColour);
            if (this._fgColour === '#fff') {
                $('#big_psd text').addClass('rmg-name__gzmtr--white-fg');
            }
            else {
                $('#big_psd text').removeClass('rmg-name__gzmtr--white-fg');
            }
        }
        else {
            $('#big_psd use').attr('fill', 'white');
            $('#big_psd text').removeClass('rmg-name__gzmtr--white-fg');
        }
        $('path#stn_gz').attr('stroke', this._themeColour);
        $('#station_info_gzmtr > #platform > circle').attr('fill', this._themeColour);
        $('#line_name use').attr('fill', this._themeColour);
        if (this._fgColour === '#fff') {
            $('#station_info_gzmtr > #platform text').addClass('rmg-name__gzmtr--white-fg');
            $('#line_name text').addClass('rmg-name__gzmtr--white-fg');
        }
        else {
            $('#station_info_gzmtr > #platform text').removeClass('rmg-name__gzmtr--white-fg');
            $('#line_name text').removeClass('rmg-name__gzmtr--white-fg');
        }
    }
    loadLineNum() {
        const LINE_NUM_MAX_WIDTH = 15.59375;
        $('.rmg-name__gzmtr--line-num').text(this._lineNum).attr('transform', `translate(-9.25,0)`);
        var lineNumDim = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($('.rmg-name__gzmtr--line-num')[1], 'railmap');
        if (this._lineNum.length === 2) {
            var lineNumScale = lineNumDim.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / lineNumDim.width : 1;
            $('.rmg-name__gzmtr--line-num').attr('transform', `translate(-9.25,0)scale(${lineNumScale})`);
            $('.rmg-name__gzmtr--station-num').attr('transform', `translate(9.25,0)scale(${lineNumScale})`);
        }
        else {
            var lineNumScale = lineNumDim.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / lineNumDim.width : 1;
            $('.rmg-name__gzmtr--line-num').attr('transform', `translate(-9.25,0)scale(${lineNumScale})`);
            $('.rmg-name__gzmtr--station-num').attr('transform', `translate(9.25,0)`);
        }
    }
    loadLineName() {
        // simulate interchange info
        let info = [this.themeCity, this.themeLine, this._themeColour, this._fgColour, this._lineNames[0], this._lineNames[1]];
        $('#line_name')
            .empty()
            .append(Object(_Station_StationGZ__WEBPACK_IMPORTED_MODULE_1__["getIntBoxGZ"])(info, 1));
        $('#line_name').html($('#line_name').html());
        var lineNameX = this._direction == 'r' ? this.lineXs[0] - 65 : this.lineXs[1] + 65;
        $('#line_name')
            .attr({
            transform: `translate(${lineNameX},-18)scale(1.5)`
        });
    }
    loadDirection() {
        let validDest;
        let x = this._svgWidth * this._directionGZX / 100;
        let y = this._svgHeight * this._directionGZY / 100;
        $('#direction_gz').attr('transform', `translate(${x},${y})`);
        // to be fixed: validDest ordering
        if (this._direction == 'l') {
            $('#direction_gz use').attr('transform', `scale(0.35)`);
            $('#direction_gz g').attr({
                'text-anchor': 'start',
                transform: 'translate(65,-5)'
            });
            validDest = this.lValidDests;
        }
        else {
            $('#direction_gz use').attr('transform', `scale(0.35)rotate(180)`);
            $('#direction_gz g').attr({
                'text-anchor': 'end',
                transform: 'translate(-65,-5)'
            });
            validDest = this.rValidDests;
        }
        if (validDest.length !== 2) {
            var [destNameZH, destNameEN] = [0, 1].map(idx => {
                return validDest.map(stnId => this.stations[stnId].name[idx].replace(/\\/g, ' ')).join('/');
            });
            $('#direction_gz g').eq(0).find('text').eq(0).text(destNameZH + '方向');
            $('#direction_gz g').eq(0).find('text').eq(1).text('Towards ' + destNameEN.replace('\\', ' '));
            $('#direction_gz g').eq(0).show();
            $('#direction_gz g').eq(1).hide();
        }
        else {
            // flatMap and flat are not supported by some browsers!
            // however targeting ES5 caused other issues?
            validDest
                .map(stnId => this.stations[stnId].name)
                .reduce((acc, val) => acc.concat(val), [])
                .forEach((txt, i) => {
                if (i % 2) {
                    txt = 'Towards ' + txt.replace('\\', ' ');
                }
                $('#direction_gz g').eq(1).find('text').eq(i).text(txt);
            });
            $('#direction_gz g').eq(1).find('text').css('letter-spacing', 0);
            let charCounts = validDest.map(stnId => this.stations[stnId].name[0].length);
            let minCharCounts = Math.min(...charCounts);
            if (minCharCounts > 1 && charCounts[0] !== charCounts[1]) {
                let charSpacing = Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1);
                $('#direction_gz g').eq(1).find('text')
                    .eq(charCounts[0] > charCounts[1] ? 2 : 0)
                    .css('letter-spacing', `${charSpacing}em`);
            }
            if (this._direction === 'l') {
                let maxCharCount = Math.max(...charCounts);
                $('#direction_gz g').eq(1).find('text').eq(4).attr('x', 25 * (maxCharCount + 1));
                $('#direction_gz g').eq(1).find('text').slice(0, 4).removeAttr('x');
            }
            else {
                $('#direction_gz g').eq(1).find('text').eq(4).removeAttr('x');
                $('#direction_gz g').eq(1).find('text').slice(0, 4).attr('x', '-75');
            }
            $('#direction_gz g').eq(0).hide();
            $('#direction_gz g').eq(1).show();
        }
    }
    updateStnName(stnId, names, stnNum) {
        super.updateStnName(stnId, names, stnNum);
        $(`#stn_icons #${stnId} g#stn_name`).append(this.stations[stnId].expressTagHTML(this._themeColour));
        $('#stn_icons').html($('#stn_icons').html());
        this.loadLineNum();
        if (this.stations[this._currentStnId].parents.includes(stnId) || this.stations[this._currentStnId].children.includes(stnId)) {
            this.drawDestInfo();
        }
        if (this._currentStnId === stnId) {
            this.drawDestInfo();
        }
        if (this.leftDests.includes(stnId) || this.rightDests.includes(stnId)) {
            this.loadDirection();
        }
    }
    updateStnServices(stnId, detail) {
        super.updateStnServices(stnId, detail);
        $(`#stn_icons #${stnId}`).remove();
        $('#stn_icons').append(this.stations[stnId].html);
        $('#stn_icons').html($('#stn_icons').html());
        $(`#stn_icons #${stnId} g#stn_name`).append(this.stations[stnId].expressTagHTML(this._themeColour));
        $('#stn_icons').html($('#stn_icons').html());
        this.loadLineNum();
    }
    drawDestInfo() {
        $('#station_info_gzmtr #big_stn_num text').eq(1).text(this.stations[this._currentStnId].stnNum);
        $('#station_info_gzmtr > #platform > text').eq(0).text(this._platformNum);
        $('#station_info_gzmtr > #big_psd text').eq(0).text(this._psdNum);
        $('#station_info_gzmtr #big_name').empty()
            .attr('transform', `translate(${this._svgDestWidth / 2},${100 - (this.stations[this._currentStnId].name[1].split('\\').length - 1) * 20})`)
            .append($('<text>', { class: 'rmg-name__zh rmg-name__gzmtr--dest' })
            .text(this.stations[this._currentStnId].name[0]))
            .append($('<text>', { dy: 70, class: 'rmg-name__en rmg-name__gzmtr--dest' })
            .text(this.stations[this._currentStnId].name[1].split('\\')[0])
            .append($('<tspan>', { x: 0, dy: 40, 'alignment-baseline': 'middle' }).text(this.stations[this._currentStnId].name[1].split('\\')[1] || '')));
        $('#terminus_gz').attr('transform', `translate(${this._svgWidth / 2},100)`);
        let nextStnId = this
            .stations[this._currentStnId][this._direction === 'l' ? 'parents' : 'children']
            .filter(stnId => {
            let branchTmp = this.stations[this._currentStnId].branch[this._direction === 'l' ? 'left' : 'right'];
            if (branchTmp.length) {
                return true;
                // return branchTmp[0] === 'through' ? true : stnId !== branchTmp[1];
            }
            else {
                return true;
            }
        });
        if (['linestart', 'lineend'].includes(nextStnId[0])) {
            $('#station_info_gzmtr').find('#big_next, #big_next_2').hide();
            $('#station_info_gzmtr > use').eq(0).hide();
            $('#line_main, #line_pass, #line_name, #stn_icons, #direction_gz').hide();
            $('#terminus_gz').show();
        }
        else {
            if (nextStnId.length === 1) {
                $('#station_info_gzmtr #big_next').show();
                $('#station_info_gzmtr #big_next_2').hide();
            }
            else {
                $('#station_info_gzmtr #big_next').hide();
                $('#station_info_gzmtr #big_next_2').show();
            }
            $('#station_info_gzmtr > use').eq(0).show();
            $('#line_main, #line_pass, #line_name, #stn_icons, #direction_gz').show();
            $('#terminus_gz').hide();
        }
        let [nextNameZH, nextNameEN] = ['', ''];
        let nextNameZHCount = 0;
        if (nextStnId.length === 1) {
            var nextStnInfo = this.stations[nextStnId[0]];
            [nextNameZH, nextNameEN] = nextStnInfo.name;
            nextNameZHCount = nextNameZH.length;
            $('#station_info_gzmtr #big_next g:nth-child(2) text').eq(0).text(nextNameZH);
            $('#station_info_gzmtr #big_next g:nth-child(2) text').eq(1).text(nextNameEN.split('\\')[0])
                .append($('<tspan>', { x: 0, dy: 17, 'alignment-baseline': 'middle' }).text(nextNameEN.split('\\')[1] || ''));
        }
        else {
            nextStnId.forEach((stnId, idx) => {
                let nextStnInfo = this.stations[stnId];
                [nextNameZH, nextNameEN] = nextStnInfo.name;
                if (nextNameZH.length > nextNameZHCount) {
                    nextNameZHCount = nextNameZH.length;
                }
                $(`#station_info_gzmtr #big_next_2 g:nth-child(${2 * (idx + 1)}) text`).eq(2).text(nextNameZH);
                $(`#station_info_gzmtr #big_next_2 g:nth-child(${2 * (idx + 1)}) text`).eq(3).text(nextNameEN.split('\\')[0])
                    .append($('<tspan>', { x: 0, dy: 13, 'alignment-baseline': 'middle' }).text(nextNameEN.split('\\')[1] || ''));
                let validRoutes = this.routes
                    .filter(route => route.indexOf(stnId) !== -1)
                    .map(route => route.filter(s => s !== 'linestart' && s !== 'lineend'));
                let validEnds;
                if (this._direction === 'l') {
                    validEnds = Array.from(new Set(validRoutes.map(route => route[0]))).reverse();
                }
                else {
                    validEnds = Array.from(new Set(validRoutes.map(route => route.reverse()[0])));
                }
                $(`#station_info_gzmtr #big_next_2 g:nth-child(${2 * (idx + 1)}) text`).eq(0)
                    .text(validEnds.map(s => this.stations[s].name[0]).join('/') + '方向');
                $(`#station_info_gzmtr #big_next_2 g:nth-child(${2 * (idx + 1)}) text`).eq(1)
                    .text('Towards ' + validEnds.map(s => this.stations[s].name[1]).join('/'));
            });
        }
        $('#station_info_gzmtr').html($('#station_info_gzmtr').html());
        // Position big name
        var bigNameDim = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($('#station_info_gzmtr #big_name text')[0], 'destination');
        $('#station_info_gzmtr #big_stn_num')
            .attr('transform', `translate(${(this._svgDestWidth + bigNameDim.width) / 2 + 55},${120 - (this.stations[this._currentStnId].name[1].split('\\').length - 1) * 20})scale(1.4)`);
        let bigNextDim = { x: 0, y: 0, width: 0, height: 0 };
        if (nextStnId.length === 1) {
            bigNextDim = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($('#station_info_gzmtr #big_next g:nth-child(2)')[0], 'destination');
        }
        else {
            let bigNextDims = [
                Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($('#station_info_gzmtr #big_next_2 g:nth-child(2)')[0], 'destination'),
                Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($('#station_info_gzmtr #big_next_2 g:nth-child(4)')[0], 'destination')
            ];
            if (bigNextDims[0].width > bigNextDims[1].width) {
                bigNextDim = bigNextDims[0];
            }
            else {
                bigNextDim = bigNextDims[1];
            }
        }
        // var nextNameZHCount = nextNameZH.length;
        if (this._direction == 'l') {
            $('#station_info_gzmtr #platform').attr('transform', `translate(${this._svgDestWidth - 100},120)`);
            if (nextStnId.length === 1) {
                if (nextNameZHCount <= 2) {
                    $('#station_info_gzmtr #big_next g:nth-child(2)').attr('transform', `translate(${115 + 35},110)`);
                    $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(115 + 35 * (1 + nextNameZHCount) + bigNameDim.x) / 2 - 20},120)scale(0.25)`);
                }
                else {
                    $('#station_info_gzmtr #big_next g:nth-child(2)').attr('transform', `translate(${115 + 35 * 0.5},110)`);
                    $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(115 + 35 * (0.5 + nextNameZHCount) + bigNameDim.x) / 2 - 20},120)scale(0.25)`);
                }
            }
            else {
                $('#station_info_gzmtr #big_next_2 g:nth-child(2)').attr('transform', `translate(113,80)`);
                $('#station_info_gzmtr #big_next_2 g:nth-child(4)').attr('transform', `translate(113,190)`);
                $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(99 + 27 * (1 + nextNameZHCount) + bigNameDim.x) / 2 - 20},120)scale(0.25)`);
            }
            $('#station_info_gzmtr #big_next g:first-child').attr('transform', `translate(80,110)`);
            $('#station_info_gzmtr #big_next_2 g:first-child').attr('transform', `translate(72,80)`);
            $('#station_info_gzmtr #big_next_2 g:nth-child(3)').attr('transform', `translate(72,190)`);
        }
        else {
            $('#station_info_gzmtr #platform').attr('transform', `translate(100,120)`);
            if (nextStnId.length === 1) {
                $('#station_info_gzmtr #big_next g:nth-child(2)').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width},110)`);
                if (nextNameZHCount <= 2) {
                    $('#station_info_gzmtr #big_next g:first-child').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width - 70},110)`);
                    $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(this._svgDestWidth - 45 - bigNextDim.width - 70 - 35 + bigNameDim.x + bigNameDim.width + 55 + 18.5 * 1.4) / 2 + 20},120)scale(0.25)rotate(180)`);
                }
                else {
                    $('#station_info_gzmtr #big_next g:first-child').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width - 35 * 1.5},110)`);
                    $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(this._svgDestWidth - 45 - bigNextDim.width - 35 * 2.5 + bigNameDim.x + bigNameDim.width + 55 + 18.5 * 1.4) / 2 + 20},120)scale(0.25)rotate(180)`);
                }
            }
            else {
                $('#station_info_gzmtr #big_next_2 g:nth-child(2)').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width},80)`);
                $('#station_info_gzmtr #big_next_2 g:nth-child(4)').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width},190)`);
                $('#station_info_gzmtr #big_next_2 g:first-child').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width - 41},80)`);
                $('#station_info_gzmtr #big_next_2 g:nth-child(3)').attr('transform', `translate(${this._svgDestWidth - 45 - bigNextDim.width - 41},190)`);
                $('#station_info_gzmtr > use').eq(0).attr('transform', `translate(${(this._svgDestWidth - 45 - bigNextDim.width - 41 - 27 + bigNameDim.x + bigNameDim.width + 55 + 18.5 * 1.4) / 2 + 20},120)scale(0.25)rotate(180)`);
            }
        }
        $('#station_info_gzmtr #indicator_light').attr({
            x: this._svgDestWidth / 2, y: 270,
            'xlink:href': '#indicator_' + this._infoPanelType
        });
        this.drawPSD();
    }
    drawPSD() {
        $('#station_info_gzmtr #big_psd').attr('transform', `translate(${this._svgDestWidth / 2 + 80},${(type => {
            switch (type) {
                case 'gz3': return 218;
                case 'gz1421': return 238;
                default: return 242;
            }
        })(this._infoPanelType)})`);
    }
    addStn(prep, stnId, loc, end) {
        var res = super.addStn(prep, stnId, loc, end);
        this.loadLineNum();
        this.loadDirection();
        return res;
    }
    removeStn(stnId) {
        if (super.removeStn(stnId)) {
            this.loadLineNum();
            this.loadDirection();
            return true;
        }
        else {
            return false;
        }
    }
    updateStnTransfer(stnId, type, info = null) {
        super.updateStnTransfer(stnId, type, info);
        this.loadLineNum();
    }
    updateBranchType(stnId, direction, type) {
        if (!super.updateBranchType(stnId, direction, type)) {
            return false;
        }
        this.loadLineNum();
        this.loadDirection();
        return true;
    }
    updateBranchFirst(stnId, direction, first) {
        if (!super.updateBranchFirst(stnId, direction, first)) {
            return false;
        }
        this.loadLineNum();
        this.loadDirection();
        return true;
    }
    updateBranchPos(stnId, direction, pos) {
        if (!super.updateBranchPos(stnId, direction, pos)) {
            return false;
        }
        this.loadLineNum();
        this.loadDirection();
        return true;
    }
    static initSVG(line) {
        super.initSVG(line);
        line.loadLineNum();
        line.loadLineName();
        line.loadDirection();
    }
}


/***/ }),

/***/ "./src/Station/StationGZ.ts":
/*!**********************************!*\
  !*** ./src/Station/StationGZ.ts ***!
  \**********************************/
/*! exports provided: getIntBoxGZ, RMGStationGZ, IntStationGZ, BranchStationGZ, OSIStationGZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntBoxGZ", function() { return getIntBoxGZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStationGZ", function() { return RMGStationGZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntStationGZ", function() { return IntStationGZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BranchStationGZ", function() { return BranchStationGZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSIStationGZ", function() { return OSIStationGZ; });
/* harmony import */ var _Station__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Station */ "./src/Station/Station.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");


function getIntBoxGZ(intInfo, state) {
    let bg = intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour];
    let fg = intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].fg];
    let names = [
        intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH],
        intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameEN]
    ];
    let nameZHs = names[0].match(/[\d]+|[\D]+/g) || [''];
    let intNameSplitOk = false;
    if (nameZHs.length == 2) {
        if (!isNaN(Number(nameZHs[0])) && isNaN(Number(nameZHs[1]))) {
            intNameSplitOk = true;
        }
    }
    let boxEl = $('<g>')
        .append($('<use>', {
        'xlink:href': '#intbox_gz',
        fill: state === -1 ? '#aaa' : bg
    }))
        .append($('<text>', { y: 8.5, class: 'rmg-name__zh rmg-name__gzmtr--int' })
        .append($('<tspan>', { 'font-size': '16px', 'dominant-baseline': 'central' }).text(intNameSplitOk ? nameZHs[0] : ''))
        .append($('<tspan>', { dy: -1, 'dominant-baseline': 'central' }).text(intNameSplitOk ? nameZHs[1] : nameZHs.join(''))))
        .append($('<text>', {
        y: 19.5,
        class: 'rmg-name__en'
    })
        .addClass(names[1].length > 10 ? 'rmg-name__gzmtr--int-small' : 'rmg-name__gzmtr--int')
        .text(names[1]));
    if (fg === '#fff' || state === -1) {
        $(boxEl).find('text').addClass('rmg-name__gzmtr--white-fg');
    }
    return boxEl;
}
class RMGStationGZ extends _Station__WEBPACK_IMPORTED_MODULE_0__["RMGStation"] {
    constructor(id, data) {
        super(id, data);
        this.stnNum = data.num;
    }
    get nameClass() {
        switch (this.state) {
            case -1:
                return 'Pass';
            case 0:
                return 'CurrentGZ';
            default:
                return 'Future';
        }
    }
    get _nameShift() { return false; }
    get _tickRotation() { return this.y > 0 ? 180 : 0; }
    get iconHTML() {
        var [iconType, numClass] = (this.state == -1) ? ['stn_gz_pass', 'Pass'] : ['stn_gz', 'Future'];
        return $('<g>', { transform: `translate(${this.x},${this.y})` })
            .append($('<use>', { 'xlink:href': '#' + iconType, class: 'rmg-stn' }))
            .append($('<g>', { class: 'Name ' + numClass })
            .append($('<text>', { class: 'rmg-name__zh rmg-name__gzmtr--line-num' }))
            .append($('<text>', { class: 'rmg-name__zh rmg-name__gzmtr--station-num', x: 0 }).text(this.stnNum)));
    }
    get nameHTML() {
        var nameENLn = this.name[1].split('\\').length;
        let dx;
        if (this._nameShift) {
            dx = this._tickRotation === 0 ? -9 : 16 + (nameENLn - 1) * 12 * Math.cos(-45);
        }
        else {
            dx = this._tickRotation === 0 ? (24 + (nameENLn - 1) * 12) * Math.cos(-45) : -6;
        }
        // let dx = this._nameShift ? -8 : (24 + (nameENLn-1)*12) * Math.cos(-45);
        let dy = this._tickRotation === 0 ? (-4 - 21.921875 - (nameENLn - 1) * 12 * Math.cos(-45)) : 17.5;
        // var dy = (-4 - 21.921875 - (nameENLn-1)*12*Math.cos(-45)) * (this._tickRotation === 0 ? 1 : -1);
        let nameGEl = $('<g>', { class: 'Name ' + this.nameClass }).append($('<text>').addClass('rmg-name__zh rmg-name__gzmtr--station').text(this.name[0])).append($('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__gzmtr--station'
        }).text(this.name[1].split('\\')[0]).append($('<tspan>', {
            'x': 0, 'dy': 10, class: 'rmg-name__en rmg-name__gzmtr--station'
        }).text(this.name[1].split('\\')[1])));
        return $('<g>', {
            'id': 'stn_name',
            'transform': `translate(${this.x - dx},${this.y + dy})rotate(-45)`,
            'text-anchor': this._tickRotation === 0 ? 'start' : 'end'
        }).append(nameGEl);
    }
    expressTagHTML(colour) {
        if (!this.services.has('express')) {
            return $('<g>');
        }
        let stnNameDim = $(`#stn_icons #${this.id} g#stn_name g`)[0].getBBox();
        return $('<g>', {
            transform: `translate(${(stnNameDim.width + 35) * (this._tickRotation === 0 ? 1 : -1)},${2 + 5 * (this.name[1].split('\\').length - 1)})`,
            fill: this.state === -1 ? '#aaa' : colour,
            'text-anchor': 'middle'
        })
            .append($('<text>', { class: 'rmg-name__zh rmg-name__gzmtr--express' }).text('快车停靠站'))
            .append($('<text>', { y: 10, class: 'rmg-name__en rmg-name__gzmtr--express' }).text('Express Station'));
    }
}
class IntStationGZ extends RMGStationGZ {
    constructor(id, data) {
        super(id, data);
        this._intInfos = data.transfer.info[0];
    }
    // get _tickRotation() {return 0;}
    get intTickHTML() {
        var ticks = this._intInfos
            .map(info => info[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour])
            .map((colour, idx) => {
            let x = this.x - 2 * (this._intInfos.length - 1) + 4 * idx;
            return $('<use>', {
                'xlink:href': '#inttick_gz',
                stroke: this.state == -1 ? '#aaa' : colour,
                transform: `translate(${x},${this.y})rotate(${this._tickRotation})`
            });
        });
        return $('<g>', { class: 'rmg-line rmg-line__gzmtr rmg-line__change' })
            .append(...ticks);
    }
    get intNameHTML() {
        let intBoxEls = this._intInfos.map(info => getIntBoxGZ(info, this.state));
        intBoxEls.forEach((el, i) => {
            $(el).attr('transform', `translate(0,${i * 28 * (this._tickRotation === 0 ? 1 : -1)})`);
        });
        return $('<g>', {
            'text-anchor': 'middle',
            transform: `translate(${this.x},${this.y + (this._tickRotation === 0 ? 23 : -47)})`
        }).append(...intBoxEls);
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML];
    }
}
class BranchStationGZ extends IntStationGZ {
    constructor(id, data, lineInf) {
        data.transfer.info[0].unshift(lineInf);
        if (data.transfer.info[1]) {
            data.transfer.info[0].push(...data.transfer.info[1]);
        }
        super(id, data);
    }
    get _nameShift() { return true; }
    get _tickRotation() {
        return (this.parents.indexOf(this.branch.left[1]) === 0 || this.children.indexOf(this.branch.right[1]) === 0) ? 0 : 180;
    }
}
class OSIStationGZ extends IntStationGZ {
    constructor(id, data) {
        // data.transfer.info[0].push(...data.transfer.info[1]);
        super(id, data);
    }
}



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,