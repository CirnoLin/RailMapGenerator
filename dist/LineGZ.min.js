(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(t,e,i){"use strict";i.r(e);var n=i(0),s=i(1);class r extends s.m{constructor(t,e){super(t,e),this.stnNum=e.num}get nameClass(){switch(this.state){case-1:return"Pass";case 0:return"CurrentGZ";default:return"Future"}}get _nameShift(){return!1}get _tickRotation(){return this.y>0?180:0}get iconHTML(){var[t,e]=-1==this.state?["stn_gz_pass","Pass"]:["stn_gz","Future"];return $("<g>",{transform:`translate(${this.x},${this.y})`}).append($("<use>",{"xlink:href":"#"+t,class:"rmg-stn"})).append($("<g>",{class:"Name "+e}).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--line-num"})).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--station-num",x:0}).text(this.stnNum)))}get nameHTML(){var t=this.name[1].split("\\").length;let e;e=this._nameShift?0===this._tickRotation?-9:16+12*(t-1)*Math.cos(-45):0===this._tickRotation?(24+12*(t-1))*Math.cos(-45):-6;let i=0===this._tickRotation?-25.921875-12*(t-1)*Math.cos(-45):17.5;return $("<g>",{transform:`translate(${this.x-e},${this.y+i})rotate(-45)`,"text-anchor":0===this._tickRotation?"start":"end",class:`Name ${this.nameClass}`}).append($("<text>").addClass("rmg-name__zh rmg-name__gzmtr--station").text(this.name[0])).append($("<text>",{dy:15,class:"rmg-name__en rmg-name__gzmtr--station"}).text(this.name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:10,class:"rmg-name__en rmg-name__gzmtr--station"}).text(this.name[1].split("\\")[1])))}}class a extends r{constructor(t,e){super(t,e),this._intInfos=e.interchange[0]}get intTickHTML(){var t=this._intInfos.map(t=>t[s.d.colour]).map((t,e)=>{let i=this.x-2*(this._intInfos.length-1)+4*e;return $("<use>",{"xlink:href":"#inttick_gz",stroke:-1==this.state?"#aaa":t,transform:`translate(${i},${this.y})rotate(${this._tickRotation})`})});return $("<g>",{class:"rmg-line rmg-line__gzmtr rmg-line__change"}).append(...t)}get intNameHTML(){let t=this._intInfos.map(t=>Object(n.e)(t,this.state));return t.forEach((t,e)=>{$(t).attr("transform",`translate(0,${28*e*(0===this._tickRotation?1:-1)})`)}),$("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+(0===this._tickRotation?23:-47)})`}).append(...t)}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML]}}class h extends a{constructor(t,e,i){e.interchange[0].unshift(i),e.interchange[1]&&e.interchange[0].push(...e.interchange[1].slice(1)),super(t,e)}get _nameShift(){return!0}get _tickRotation(){return 0===this.parents.indexOf(this.branch.left[1])||0===this.children.indexOf(this.branch.right[1])?0:180}}class o extends a{constructor(t,e){e.interchange[0].push(...e.interchange[1].slice(1)),super(t,e)}}var _=i(8);i.d(e,"RMGLineGZ",(function(){return l}));class l extends _.a{constructor(t){super(t),this._psdNum=t.psd_num,this._lineNum=t.line_num,this._infoPanelType=t.info_panel_type,this._directionGZX=t.direction_gz_x,this._directionGZY=t.direction_gz_y}_initStnInstance(t,e){if(2===e.children.length||2===e.parents.length)return new h(t,e,[this.themeCity,this.themeLine,this._themeColour,this._fgColour,...this._lineNames]);switch(e.change_type){case"int2":case"int3_l":case"int3_r":return new a(t,e);case"osi11_ul":case"osi11_pl":case"osi11_ur":case"osi11_pr":case"osi12_ul":case"osi12_pl":case"osi12_ur":case"osi12_pr":case"osi22_ul":case"osi22_pl":case"osi22_ur":case"osi22_pr":return new o(t,e);case"osi22_end_p":case"osi22_end_u":if("linestart"==e.parents[0]||"lineend"==e.children[0])return new o(t,e);default:return new r(t,e)}}get lineXs(){return"r"==this._direction?[this._svgWidth*this._padding/100+65,this._svgWidth*(1-this._padding/100)]:[this._svgWidth*this._padding/100,this._svgWidth*(1-this._padding/100)-65]}set svgWidth(t){super.svgWidth=t,this.loadLineNum(),this.loadLineName(),this.loadDirection()}set padding(t){super.padding=t,this.loadLineNum(),this.loadLineName()}set branchSpacing(t){super.branchSpacing=t,this.loadLineNum()}set direction(t){this._direction=t,Object(n.n)("direction",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t));l.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadLineNum(),this.loadLineName(),this.loadDirection(),this.loadFonts()}set txtFlip(t){super.txtFlip=t,this.loadLineNum()}set currentStnId(t){super.currentStnId=t,this.loadLineNum(),this.loadDirection()}set lineNum(t){this._lineNum=t,Object(n.n)("line_num",t),this.loadLineNum(),this.loadFonts()}set lineNames(t){this._lineNames=t,Object(n.n)("line_name",t),this.loadLineName(),this.loadFonts()}set psdNum(t){this._psdNum=t,Object(n.n)("psd_num",t),$(".rmg-psd-num").text(t)}set infoPanelType(t){this._infoPanelType=t,Object(n.n)("info_panel_type",t),$("#station_info_gzmtr #indicator_light").attr("xlink:href","#indicator_"+t),this.drawStrip(),this.fillThemeColour(),this.drawPSD()}set directionGZX(t){this._directionGZX=t,Object(n.n)("direction_gz_x",t);let e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;$("#direction_gz").attr("transform",`translate(${e},${i})`)}set directionGZY(t){this._directionGZY=t,Object(n.n)("direction_gz_y",t);let e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;$("#direction_gz").attr("transform",`translate(${e},${i})`)}_stnXShare(t){let{criticalPath:e,branches:i}=this,n=this;if(e.nodes.includes(t))return super._stnXShare(t);if(this.criticalPath.nodes.join(",")!==i[0].join(","))return super._stnXShare(t);{let e=i.slice(1).filter(e=>e.includes(t))[0],s=this._cp(e[0],t).len,r=this._cp(t,e[e.length-1]).len;return i[0].includes(e[0])&&i[0].includes(e[e.length-1])?(n._stnXShare(e[0])*r+n._stnXShare(e[e.length-1])*s)/(s+r):i[0].includes(e[0])?n._stnXShare(e[0])+s:n._stnXShare(e[e.length-1])-r}}_stnYShare(t){if(["linestart","lineend"].includes(t))return 0;var e=this.branches;if(e[0].includes(t))return 0;{let s=1;for(;s<e.length&&!e[s].includes(t);)s++;if(e[0].includes(e[s][0])){var i=e[s][0],n="children";return 0==this.stations[i][n].indexOf(e[s][1])?2:-2}i=e[s].slice().reverse()[0],n="parents";return 0==this.stations[i][n].indexOf(e[s].slice().reverse()[1])?2:-2}}drawStrip(){let t=(t=>{switch(this._infoPanelType){case"gz28":case"gzgf":return 60;case"gz3":return 40;case"gz1421":return 20}})();$("#dest_strip_gz, #strip_gz").attr({y:this._svgHeight-t,height:t})}_rightWideFactor(t){return this.stations[t]instanceof h&&0===this.stations[t]._tickRotation?.25:0}_leftWideFactor(t){return this.stations[t]instanceof h&&0!==this.stations[t]._tickRotation?.25:0}_pathWeight(t,e){return this.stations[t].children.includes(e)?1+this._rightWideFactor(t)+this._leftWideFactor(e):-1/0}drawSVGFrame(){super.drawSVGFrame(),$("#dest_strip_gz").attr("width",this._svgDestWidth),$("#strip_gz").attr("width",this._svgWidth)}_linePath(t){let e;var i=[];return t.forEach(t=>{var[n,s]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!e&&0!==e)return e=s,void i.push(`M ${n},${s}`);0===s?(s<e&&i.push(`H ${n-30}`,"a 30,30 0 0,0 30,-30",`V ${s}`),s>e&&i.push(`H ${n-30}`,"a 30,30 0 0,1 30,30",`V ${s}`)):(s<e&&i.push(`V ${s+30}`,"a 30,30 0 0,1 30,-30",`H ${n}`),s>e&&i.push(`V ${s-30}`,"a 30,30 0 0,0 30,30",`H ${n}`)),i.push(`H ${n}`),e=s}),i.join(" ").replace(/( H ([\d.]+))+/g," H $2")}drawLine(){$(".rmg-line").removeClass("rmg-line__mtr").addClass("rmg-line__gzmtr"),super.drawLine()}loadFonts(){}initFonts(){let t=$("link#css_share")[0].sheet,e=[];Array.from(t.cssRules).forEach((t,i)=>{-1!==t.cssText.indexOf(".rmg-name__zh")?e.push(i):-1!==t.cssText.indexOf(".rmg-name__en")&&e.push(i)}),e.forEach(e=>t.deleteRule(e)),t.insertRule(".rmg-name__zh {alignment-baseline: central; font-family: Arial, SimHei, STHeiti, PingFangSC-Regular, sans-serif;}"),t.insertRule(".rmg-name__en {alignment-baseline: middle; font-family: Arial, sans-serif;}")}fillThemeColour(){super.fillThemeColour(),$("#dest_strip_gz, #strip_gz").attr("fill",this._themeColour),["gz3","gz1421"].includes(this._infoPanelType)?($("#big_psd use").attr("fill",this._themeColour),"#fff"===this._fgColour?$("#big_psd text").addClass("rmg-name__gzmtr--white-fg"):$("#big_psd text").removeClass("rmg-name__gzmtr--white-fg")):($("#big_psd use").attr("fill","white"),$("#big_psd text").removeClass("rmg-name__gzmtr--white-fg")),$("path#stn_gz").attr("stroke",this._themeColour),$("#station_info_gzmtr > #platform > circle").attr("fill",this._themeColour),$("#line_name use").attr("fill",this._themeColour),"#fff"===this._fgColour?($("#station_info_gzmtr > #platform text").addClass("rmg-name__gzmtr--white-fg"),$("#line_name text").addClass("rmg-name__gzmtr--white-fg")):($("#station_info_gzmtr > #platform text").removeClass("rmg-name__gzmtr--white-fg"),$("#line_name text").removeClass("rmg-name__gzmtr--white-fg"))}loadLineNum(){$(".rmg-name__gzmtr--line-num").text(this._lineNum).attr("transform","translate(-9.25,0)");var t=Object(n.j)($(".rmg-name__gzmtr--line-num")[1],"railmap");if(2===this._lineNum.length){var e=t.width>15.59375?15.59375/t.width:1;$(".rmg-name__gzmtr--line-num").attr("transform",`translate(-9.25,0)scale(${e})`),$(".rmg-name__gzmtr--station-num").attr("transform",`translate(9.25,0)scale(${e})`)}else{e=t.width>15.59375?15.59375/t.width:1;$(".rmg-name__gzmtr--line-num").attr("transform",`translate(-9.25,0)scale(${e})`),$(".rmg-name__gzmtr--station-num").attr("transform","translate(9.25,0)")}}loadLineName(){let t=[this.themeCity,this.themeLine,this._themeColour,this._fgColour,this._lineNames[0],this._lineNames[1]];$("#line_name").empty().append(Object(n.e)(t,1)),$("#line_name").html($("#line_name").html());var e="r"==this._direction?this.lineXs[0]-65:this.lineXs[1]+65;$("#line_name").attr({transform:`translate(${e},-18)scale(1.5)`}),this.loadFonts()}loadDirection(){let t,e=this._svgWidth*this._directionGZX/100,i=this._svgHeight*this._directionGZY/100;if($("#direction_gz").attr("transform",`translate(${e},${i})`),"l"==this._direction?($("#direction_gz use").attr("transform","scale(0.35)"),$("#direction_gz g").attr({"text-anchor":"start",transform:"translate(65,-5)"}),t=this.lValidDests):($("#direction_gz use").attr("transform","scale(0.35)rotate(180)"),$("#direction_gz g").attr({"text-anchor":"end",transform:"translate(-65,-5)"}),t=this.rValidDests),2!==t.length){var[n,s]=[0,1].map(e=>t.map(t=>this.stations[t].name[e].replace(/\\/g," ")).join("/"));$("#direction_gz g").eq(0).find("text").eq(0).text(n+"方向"),$("#direction_gz g").eq(0).find("text").eq(1).text("Towards "+s.replace("\\"," ")),$("#direction_gz g").eq(0).show(),$("#direction_gz g").eq(1).hide()}else{t.map(t=>this.stations[t].name).reduce((t,e)=>t.concat(e),[]).forEach((t,e)=>{e%2&&(t="Towards "+t.replace("\\"," ")),$("#direction_gz g").eq(1).find("text").eq(e).text(t)}),$("#direction_gz g").eq(1).find("text").css("letter-spacing",0);let e=t.map(t=>this.stations[t].name[0].length),i=Math.min(...e);if(i>1&&e[0]!==e[1]){let t=Math.abs(e[0]-e[1])/(i-1);$("#direction_gz g").eq(1).find("text").eq(e[0]>e[1]?2:0).css("letter-spacing",`${t}em`)}if("l"===this._direction){let t=Math.max(...e);$("#direction_gz g").eq(1).find("text").eq(4).attr("x",25*(t+1)),$("#direction_gz g").eq(1).find("text").slice(0,4).removeAttr("x")}else $("#direction_gz g").eq(1).find("text").eq(4).removeAttr("x"),$("#direction_gz g").eq(1).find("text").slice(0,4).attr("x","-75");$("#direction_gz g").eq(0).hide(),$("#direction_gz g").eq(1).show()}}updateStnName(t,e,i){super.updateStnName(t,e,i),this.loadLineNum(),(this.stations[this._currentStnId].parents.includes(t)||this.stations[this._currentStnId].children.includes(t))&&(this.drawDestInfo(),this.loadFonts()),this._currentStnId===t&&(this.drawDestInfo(),this.loadFonts()),(this.leftDests.includes(t)||this.rightDests.includes(t))&&this.loadDirection()}drawDestInfo(){$("#station_info_gzmtr #big_stn_num text").eq(1).text(this.stations[this._currentStnId].stnNum),$("#station_info_gzmtr > #platform > text").eq(0).text(this._platformNum),$("#station_info_gzmtr > #big_psd text").eq(0).text(this._psdNum),$("#station_info_gzmtr #big_name").empty().attr("transform",`translate(${this._svgDestWidth/2},${100-20*(this.stations[this._currentStnId].name[1].split("\\").length-1)})`).append($("<text>",{class:"rmg-name__zh rmg-name__gzmtr--dest"}).text(this.stations[this._currentStnId].name[0])).append($("<text>",{dy:70,class:"rmg-name__en rmg-name__gzmtr--dest"}).text(this.stations[this._currentStnId].name[1].split("\\")[0]).append($("<tspan>",{x:0,dy:40,"alignment-baseline":"middle"}).text(this.stations[this._currentStnId].name[1].split("\\")[1]||""))),$("#terminus_gz").attr("transform",`translate(${this._svgWidth/2},100)`);let t=this.stations[this._currentStnId]["l"===this._direction?"parents":"children"].filter(t=>(this.stations[this._currentStnId].branch["l"===this._direction?"left":"right"].length,!0));["linestart","lineend"].includes(t[0])?($("#station_info_gzmtr").find("#big_next, #big_next_2").hide(),$("#station_info_gzmtr > use").eq(0).hide(),$("#line_main, #line_pass, #line_name, #stn_icons, #direction_gz").hide(),$("#terminus_gz").show()):(1===t.length?($("#station_info_gzmtr #big_next").show(),$("#station_info_gzmtr #big_next_2").hide()):($("#station_info_gzmtr #big_next").hide(),$("#station_info_gzmtr #big_next_2").show()),$("#station_info_gzmtr > use").eq(0).show(),$("#line_main, #line_pass, #line_name, #stn_icons, #direction_gz").show(),$("#terminus_gz").hide());let[e,i]=["",""],s=0;if(1===t.length){var r=this.stations[t[0]];[e,i]=r.name,s=e.length,$("#station_info_gzmtr #big_next g:nth-child(2) text").eq(0).text(e),$("#station_info_gzmtr #big_next g:nth-child(2) text").eq(1).text(i.split("\\")[0]).append($("<tspan>",{x:0,dy:17,"alignment-baseline":"middle"}).text(i.split("\\")[1]||""))}else t.forEach((t,n)=>{let r=this.stations[t];[e,i]=r.name,e.length>s&&(s=e.length),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(2).text(e),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(3).text(i.split("\\")[0]).append($("<tspan>",{x:0,dy:13,"alignment-baseline":"middle"}).text(i.split("\\")[1]||""));let a,h=this.routes.filter(e=>-1!==e.indexOf(t)).map(t=>t.filter(t=>"linestart"!==t&&"lineend"!==t));a="l"===this._direction?Array.from(new Set(h.map(t=>t[0]))).reverse():Array.from(new Set(h.map(t=>t.reverse()[0]))),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(0).text(a.map(t=>this.stations[t].name[0]).join("/")+"方向"),$(`#station_info_gzmtr #big_next_2 g:nth-child(${2*(n+1)}) text`).eq(1).text("Towards "+a.map(t=>this.stations[t].name[1]).join("/"))});$("#station_info_gzmtr").html($("#station_info_gzmtr").html());var a=Object(n.j)($("#station_info_gzmtr #big_name text")[0],"destination");$("#station_info_gzmtr #big_stn_num").attr("transform",`translate(${(this._svgDestWidth+a.width)/2+55},${120-20*(this.stations[this._currentStnId].name[1].split("\\").length-1)})scale(1.4)`);let h={x:0,y:0,width:0,height:0};if(1===t.length)h=Object(n.j)($("#station_info_gzmtr #big_next g:nth-child(2)")[0],"destination");else{let t=[Object(n.j)($("#station_info_gzmtr #big_next_2 g:nth-child(2)")[0],"destination"),Object(n.j)($("#station_info_gzmtr #big_next_2 g:nth-child(4)")[0],"destination")];h=t[0].width>t[1].width?t[0]:t[1]}"l"==this._direction?($("#station_info_gzmtr #platform").attr("transform",`translate(${this._svgDestWidth-100},120)`),1===t.length?s<=2?($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform","translate(150,110)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(115+35*(1+s)+a.x)/2-20},120)scale(0.25)`)):($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform","translate(132.5,110)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(115+35*(.5+s)+a.x)/2-20},120)scale(0.25)`)):($("#station_info_gzmtr #big_next_2 g:nth-child(2)").attr("transform","translate(113,80)"),$("#station_info_gzmtr #big_next_2 g:nth-child(4)").attr("transform","translate(113,190)"),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(99+27*(1+s)+a.x)/2-20},120)scale(0.25)`)),$("#station_info_gzmtr #big_next g:first-child").attr("transform","translate(80,110)"),$("#station_info_gzmtr #big_next_2 g:first-child").attr("transform","translate(72,80)"),$("#station_info_gzmtr #big_next_2 g:nth-child(3)").attr("transform","translate(72,190)")):($("#station_info_gzmtr #platform").attr("transform","translate(100,120)"),1===t.length?($("#station_info_gzmtr #big_next g:nth-child(2)").attr("transform",`translate(${this._svgDestWidth-45-h.width},110)`),s<=2?($("#station_info_gzmtr #big_next g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-70},110)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-70-35+a.x+a.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`)):($("#station_info_gzmtr #big_next g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-52.5},110)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-87.5+a.x+a.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`))):($("#station_info_gzmtr #big_next_2 g:nth-child(2)").attr("transform",`translate(${this._svgDestWidth-45-h.width},80)`),$("#station_info_gzmtr #big_next_2 g:nth-child(4)").attr("transform",`translate(${this._svgDestWidth-45-h.width},190)`),$("#station_info_gzmtr #big_next_2 g:first-child").attr("transform",`translate(${this._svgDestWidth-45-h.width-41},80)`),$("#station_info_gzmtr #big_next_2 g:nth-child(3)").attr("transform",`translate(${this._svgDestWidth-45-h.width-41},190)`),$("#station_info_gzmtr > use").eq(0).attr("transform",`translate(${(this._svgDestWidth-45-h.width-41-27+a.x+a.width+55+25.9)/2+20},120)scale(0.25)rotate(180)`))),$("#station_info_gzmtr #indicator_light").attr({x:this._svgDestWidth/2,y:270,"xlink:href":"#indicator_"+this._infoPanelType}),this.drawPSD()}drawPSD(){$("#station_info_gzmtr #big_psd").attr("transform",`translate(${this._svgDestWidth/2+80},${(t=>{switch(this._infoPanelType){case"gz3":return 218;case"gz1421":return 238;default:return 242}})()})`)}addStn(t,e,i,n){var s=super.addStn(t,e,i,n);return this.loadLineNum(),this.loadDirection(),s}removeStn(t){return!!super.removeStn(t)&&(this.loadLineNum(),this.loadDirection(),!0)}updateStnTransfer(t,e,i=null){super.updateStnTransfer(t,e,i),this.loadLineNum()}updateBranchType(t,e,i){super.updateBranchType(t,e,i),this.loadLineNum(),this.loadDirection()}updateBranchFirst(t,e,i){return!!super.updateBranchFirst(t,e,i)&&(this.loadLineNum(),this.loadDirection(),!0)}updateBranchPos(t,e,i){super.updateBranchPos(t,e,i),this.loadLineNum(),this.loadDirection()}static initSVG(t){super.initSVG(t),t.loadLineNum(),t.loadLineName(),t.loadDirection()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvU3RhdGlvbi9TdGF0aW9uR1oudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xpbmUvTGluZUdaLnRzIl0sIm5hbWVzIjpbImlkIiwiZGF0YSIsInN1cGVyIiwidGhpcyIsInN0bk51bSIsIm51bSIsInN0YXRlIiwieSIsImljb25UeXBlIiwibnVtQ2xhc3MiLCIkIiwidHJhbnNmb3JtIiwieCIsImFwcGVuZCIsImNsYXNzIiwidGV4dCIsIm5hbWVFTkxuIiwibmFtZSIsInNwbGl0IiwibGVuZ3RoIiwiZHgiLCJfbmFtZVNoaWZ0IiwiX3RpY2tSb3RhdGlvbiIsIk1hdGgiLCJjb3MiLCJkeSIsIm5hbWVDbGFzcyIsImFkZENsYXNzIiwiX2ludEluZm9zIiwiaW50ZXJjaGFuZ2UiLCJ0aWNrcyIsIm1hcCIsImluZm8iLCJjb2xvdXIiLCJpZHgiLCJzdHJva2UiLCJpbnRCb3hFbHMiLCJmb3JFYWNoIiwiZWwiLCJpIiwiYXR0ciIsImludFRpY2tIVE1MIiwiaWNvbkhUTUwiLCJuYW1lSFRNTCIsImludE5hbWVIVE1MIiwiQnJhbmNoU3RhdGlvbkdaIiwibGluZUluZiIsInVuc2hpZnQiLCJwdXNoIiwic2xpY2UiLCJwYXJlbnRzIiwiaW5kZXhPZiIsImJyYW5jaCIsImxlZnQiLCJjaGlsZHJlbiIsInJpZ2h0IiwiT1NJU3RhdGlvbkdaIiwicGFyYW0iLCJfcHNkTnVtIiwicHNkX251bSIsIl9saW5lTnVtIiwibGluZV9udW0iLCJfaW5mb1BhbmVsVHlwZSIsImluZm9fcGFuZWxfdHlwZSIsIl9kaXJlY3Rpb25HWlgiLCJkaXJlY3Rpb25fZ3pfeCIsIl9kaXJlY3Rpb25HWlkiLCJkaXJlY3Rpb25fZ3pfeSIsInN0bklkIiwic3RuSW5mbyIsInRoZW1lQ2l0eSIsInRoZW1lTGluZSIsIl90aGVtZUNvbG91ciIsIl9mZ0NvbG91ciIsIl9saW5lTmFtZXMiLCJjaGFuZ2VfdHlwZSIsIl9kaXJlY3Rpb24iLCJfc3ZnV2lkdGgiLCJfcGFkZGluZyIsInZhbCIsInN2Z1dpZHRoIiwibG9hZExpbmVOdW0iLCJsb2FkTGluZU5hbWUiLCJsb2FkRGlyZWN0aW9uIiwicGFkZGluZyIsImJyYW5jaFNwYWNpbmciLCJzdG5JbnN0YW5jZSIsIk9iamVjdCIsImVudHJpZXMiLCJzdGF0aW9ucyIsImluY2x1ZGVzIiwiX3N0blJlYWxYIiwiX3N0blJlYWxZIiwiX3N0blN0YXRlIiwiY2xlYXJTVkciLCJkcmF3U3RucyIsImRyYXdMaW5lIiwiZHJhd0Rlc3RJbmZvIiwibG9hZEZvbnRzIiwidHh0RmxpcCIsImN1cnJlbnRTdG5JZCIsImRyYXdTdHJpcCIsImZpbGxUaGVtZUNvbG91ciIsImRyYXdQU0QiLCJfc3ZnSGVpZ2h0IiwiY3JpdGljYWxQYXRoIiwiYnJhbmNoZXMiLCJzZWxmIiwibm9kZXMiLCJfc3RuWFNoYXJlIiwiam9pbiIsImJyYW5jaFdpdGhTdG4iLCJmaWx0ZXIiLCJsZW5Ub0xlZnQiLCJfY3AiLCJsZW4iLCJsZW5Ub1JpZ2h0IiwiYnJhbmNoaW5nU3RuSWQiLCJuZVRvRmluZCIsInJldmVyc2UiLCJzdHJpcEhlaWdodCIsInR5cGUiLCJoZWlnaHQiLCJzdG5JZDEiLCJzdG5JZDIiLCJfcmlnaHRXaWRlRmFjdG9yIiwiX2xlZnRXaWRlRmFjdG9yIiwiSW5maW5pdHkiLCJkcmF3U1ZHRnJhbWUiLCJfc3ZnRGVzdFdpZHRoIiwic3RuSWRzIiwicHJldlkiLCJwYXRoIiwiZnVuIiwicmVwbGFjZSIsInJlbW92ZUNsYXNzIiwic3R5bGVTaGVldCIsInNoZWV0IiwiQXJyYXkiLCJmcm9tIiwiY3NzUnVsZXMiLCJydWxlIiwiY3NzVGV4dCIsImRlbGV0ZVJ1bGUiLCJpbnNlcnRSdWxlIiwibGluZU51bURpbSIsImxpbmVOdW1TY2FsZSIsIndpZHRoIiwiZW1wdHkiLCJodG1sIiwibGluZU5hbWVYIiwibGluZVhzIiwidmFsaWREZXN0IiwibFZhbGlkRGVzdHMiLCJyVmFsaWREZXN0cyIsImRlc3ROYW1lWkgiLCJkZXN0TmFtZUVOIiwiZXEiLCJmaW5kIiwic2hvdyIsImhpZGUiLCJyZWR1Y2UiLCJhY2MiLCJjb25jYXQiLCJ0eHQiLCJjc3MiLCJjaGFyQ291bnRzIiwibWluQ2hhckNvdW50cyIsIm1pbiIsImNoYXJTcGFjaW5nIiwiYWJzIiwibWF4Q2hhckNvdW50IiwibWF4IiwicmVtb3ZlQXR0ciIsIm5hbWVzIiwidXBkYXRlU3RuTmFtZSIsIl9jdXJyZW50U3RuSWQiLCJsZWZ0RGVzdHMiLCJyaWdodERlc3RzIiwiX3BsYXRmb3JtTnVtIiwibmV4dFN0bklkIiwibmV4dE5hbWVaSCIsIm5leHROYW1lRU4iLCJuZXh0TmFtZVpIQ291bnQiLCJuZXh0U3RuSW5mbyIsInZhbGlkRW5kcyIsInZhbGlkUm91dGVzIiwicm91dGVzIiwicm91dGUiLCJzIiwiU2V0IiwiYmlnTmFtZURpbSIsImJpZ05leHREaW0iLCJiaWdOZXh0RGltcyIsInByZXAiLCJsb2MiLCJlbmQiLCJyZXMiLCJhZGRTdG4iLCJyZW1vdmVTdG4iLCJ1cGRhdGVTdG5UcmFuc2ZlciIsImRpcmVjdGlvbiIsInVwZGF0ZUJyYW5jaFR5cGUiLCJmaXJzdCIsInVwZGF0ZUJyYW5jaEZpcnN0IiwicG9zIiwidXBkYXRlQnJhbmNoUG9zIiwibGluZSIsImluaXRTVkciXSwibWFwcGluZ3MiOiJrSEFHQSxNQUFNLFVBQXFCLElBQ3ZCLFlBQVlBLEVBQVFDLEdBQ2hCQyxNQUFNRixFQUFJQyxHQUNWRSxLQUFLQyxPQUFTSCxFQUFLSSxJQUd2QixnQkFDSSxPQUFRRixLQUFLRyxPQUNULEtBQU0sRUFDRixNQUFPLE9BQ1gsS0FBSyxFQUNELE1BQU8sWUFDWCxRQUNJLE1BQU8sVUFJbkIsaUJBQWtCLE9BQU8sRUFDekIsb0JBQXFCLE9BQU9ILEtBQUtJLEVBQUksRUFBSSxJQUFNLEVBRS9DLGVBQ0ksSUFBS0MsRUFBVUMsSUFBNEIsR0FBZk4sS0FBS0csTUFBZSxDQUFDLGNBQWMsUUFBVSxDQUFDLFNBQVMsVUFDbkYsT0FBT0ksRUFBRSxNQUFPLENBQUVDLFVBQVUsYUFBYVIsS0FBS1MsS0FBS1Qs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VW5JLEtBQ2hCakUsS0FBSzhFLGNBQ0w5RSxLQUFLZ0YsaUJBQ0UsR0FNZixrQkFBa0JmLEVBQU9xRCxFQUFNekYsRUFBSyxNQUNoQzlCLE1BQU1zTSxrQkFBa0JwSSxFQUFPcUQsRUFBTXpGLEdBQ3JDN0IsS0FBSzhFLGNBR1QsaUJBQWlCYixFQUFXcUksRUFBMEJoRixHQUNsRHZILE1BQU13TSxpQkFBaUJ0SSxFQUFPcUksRUFBV2hGLEdBQ3pDdEgsS0FBSzhFLGNBQ0w5RSxLQUFLZ0YsZ0JBR1Qsa0JBQWtCZixFQUFXcUksRUFBMEJFLEdBQ25ELFFBQUt6TSxNQUFNME0sa0JBQWtCeEksRUFBT3FJLEVBQVdFLEtBRy9DeE0sS0FBSzhFLGNBQ0w5RSxLQUFLZ0YsaUJBQ0UsR0FHWCxnQkFBZ0JmLEVBQVdxSSxFQUEwQkksR0FDakQzTSxNQUFNNE0sZ0JBQWdCMUksRUFBT3FJLEVBQVdJLEdBQ3hDMU0sS0FBSzhFLGNBQ0w5RSxLQUFLZ0YsZ0JBR1QsZUFBZTRILEdBQ1g3TSxNQUFNOE0sUUFBUUQsR0FDZEEsRUFBSzlILGNBQ0w4SCxFQUFLN0gsZUFDTDZILEVBQUs1SCIsImZpbGUiOiJMaW5lR1oubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUk1HU3RhdGlvbiwgSW50SW5mb1RhZywgSW50ZXJjaGFuZ2VJbmZvIH0gZnJvbSAnLi9TdGF0aW9uJztcclxuaW1wb3J0IHsgSUQsIE5hbWUsIEJyYW5jaEluZm8sIFN0YXRpb25JbmZvLCBnZXRJbnRCb3hHWiB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmNsYXNzIFJNR1N0YXRpb25HWiBleHRlbmRzIFJNR1N0YXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoaWQ6IElELCBkYXRhOiBTdGF0aW9uSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuICAgICAgICB0aGlzLnN0bk51bSA9IGRhdGEubnVtO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lQ2xhc3MoKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgLTE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Bhc3MnO1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0N1cnJlbnRHWic7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0Z1dHVyZSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfbmFtZVNoaWZ0KCkge3JldHVybiBmYWxzZTt9XHJcbiAgICBnZXQgX3RpY2tSb3RhdGlvbigpIHtyZXR1cm4gdGhpcy55ID4gMCA/IDE4MCA6IDA7fVxyXG5cclxuICAgIGdldCBpY29uSFRNTCgpIHtcclxuICAgICAgICB2YXIgW2ljb25UeXBlLCBudW1DbGFzc10gPSAodGhpcy5zdGF0ZSA9PSAtMSkgPyBbJ3N0bl9nel9wYXNzJywnUGFzcyddIDogWydzdG5fZ3onLCdGdXR1cmUnXTtcclxuICAgICAgICByZXR1cm4gJCgnPGc+JywgeyB0cmFuc2Zvcm06YHRyYW5zbGF0ZSgke3RoaXMueH0sJHt0aGlzLnl9KWAgfSlcclxuICAgICAgICAgICAgLmFwcGVuZCgkKCc8dXNlPicsIHsgJ3hsaW5rOmhyZWYnOiAnIycgKyBpY29uVHlwZSwgY2xhc3M6ICdybWctc3RuJyB9KSlcclxuICAgICAgICAgICAgLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzxnPicsIHsgY2xhc3M6ICdOYW1lICcgKyBudW1DbGFzcyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRleHQ+JywgeyBjbGFzczoncm1nLW5hbWVfX3poIHJtZy1uYW1lX19nem10ci0tbGluZS1udW0nIH0pKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRleHQ+JywgeyBjbGFzczoncm1nLW5hbWVfX3poIHJtZy1uYW1lX19nem10ci0tc3RhdGlvbi1udW0nLCB4OjAgfSkudGV4dCh0aGlzLnN0bk51bSkpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5hbWVIVE1MKCkge1xyXG4gICAgICAgIHZhciBuYW1lRU5MbiA9IHRoaXMubmFtZVsxXS5zcGxpdCgnXFxcXCcpLmxlbmd0aDtcclxuICAgICAgICBsZXQgZHg6IG51bWJlcjtcclxuICAgICAgICBpZiAodGhpcy5fbmFtZVNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGR4ID0gdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gLTkgOiAxNiArIChuYW1lRU5Mbi0xKSoxMiAqIE1hdGguY29zKC00NSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHggPSB0aGlzLl90aWNrUm90YXRpb24gPT09IDAgPyAoMjQgKyAobmFtZUVOTG4tMSkqMTIpICogTWF0aC5jb3MoLTQ1KSA6IC02O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBsZXQgZHggPSB0aGlzLl9uYW1lU2hpZnQgPyAtOCA6ICgyNCArIChuYW1lRU5Mbi0xKSoxMikgKiBNYXRoLmNvcygtNDUpO1xyXG4gICAgICAgIGxldCBkeSA9IHRoaXMuX3RpY2tSb3RhdGlvbiA9PT0gMCA/ICgtNCAtIDIxLjkyMTg3NSAtIChuYW1lRU5Mbi0xKSoxMipNYXRoLmNvcygtNDUpKSA6IDE3LjU7XHJcbiAgICAgICAgLy8gdmFyIGR5ID0gKC00IC0gMjEuOTIxODc1IC0gKG5hbWVFTkxuLTEpKjEyKk1hdGguY29zKC00NSkpICogKHRoaXMuX3RpY2tSb3RhdGlvbiA9PT0gMCA/IDEgOiAtMSk7XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnggLSBkeH0sJHt0aGlzLnkgKyBkeX0pcm90YXRlKC00NSlgLCBcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fdGlja1JvdGF0aW9uID09PSAwID8gJ3N0YXJ0JyA6ICdlbmQnLCBcclxuICAgICAgICAgICAgY2xhc3M6IGBOYW1lICR7dGhpcy5uYW1lQ2xhc3N9YFxyXG4gICAgICAgIH0pLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPHRleHQ+JykuYWRkQ2xhc3MoJ3JtZy1uYW1lX196aCBybWctbmFtZV9fZ3ptdHItLXN0YXRpb24nKS50ZXh0KHRoaXMubmFtZVswXSlcclxuICAgICAgICApLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPHRleHQ+Jywge1xyXG4gICAgICAgICAgICAgICAgZHk6IDE1LCBjbGFzczogJ3JtZy1uYW1lX19lbiBybWctbmFtZV9fZ3ptdHItLXN0YXRpb24nXHJcbiAgICAgICAgICAgIH0pLnRleHQodGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJylbMF0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzx0c3Bhbj4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3gnOiAwLCAnZHknOiAxMCwgY2xhc3M6ICdybWctbmFtZV9fZW4gcm1nLW5hbWVfX2d6bXRyLS1zdGF0aW9uJ1xyXG4gICAgICAgICAgICAgICAgfSkudGV4dCh0aGlzLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEludFN0YXRpb25HWiBleHRlbmRzIFJNR1N0YXRpb25HWiB7XHJcbiAgICBwcml2YXRlIF9pbnRJbmZvczogSW50ZXJjaGFuZ2VJbmZvW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IElELCBkYXRhOiBTdGF0aW9uSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuICAgICAgICB0aGlzLl9pbnRJbmZvcyA9IGRhdGEuaW50ZXJjaGFuZ2VbMF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0IF90aWNrUm90YXRpb24oKSB7cmV0dXJuIDA7fVxyXG5cclxuICAgIGdldCBpbnRUaWNrSFRNTCgpIHtcclxuICAgICAgICB2YXIgdGlja3MgPSB0aGlzLl9pbnRJbmZvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGluZm8gPT4gaW5mb1tJbnRJbmZvVGFnLmNvbG91cl0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGNvbG91cixpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54IC0gMioodGhpcy5faW50SW5mb3MubGVuZ3RoLTEpICsgNCppZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPHVzZT4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnOiAnI2ludHRpY2tfZ3onLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuc3RhdGU9PS0xID8gJyNhYWEnIDogY29sb3VyLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt4fSwke3RoaXMueX0pcm90YXRlKCR7dGhpcy5fdGlja1JvdGF0aW9ufSlgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtjbGFzczoncm1nLWxpbmUgcm1nLWxpbmVfX2d6bXRyIHJtZy1saW5lX19jaGFuZ2UnfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKC4uLnRpY2tzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaW50TmFtZUhUTUwoKSB7XHJcbiAgICAgICAgbGV0IGludEJveEVscyA9IHRoaXMuX2ludEluZm9zLm1hcChpbmZvID0+IGdldEludEJveEdaKGluZm8sIHRoaXMuc3RhdGUpKTtcclxuICAgICAgICBpbnRCb3hFbHMuZm9yRWFjaCgoZWwsIGkpID0+IHtcclxuICAgICAgICAgICAgJChlbCkuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7aSoyOCAqICh0aGlzLl90aWNrUm90YXRpb249PT0wID8gMSA6IC0xKX0pYCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCBcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54fSwke3RoaXMueSArICh0aGlzLl90aWNrUm90YXRpb24gPT09IDAgPyAyMyA6IC00Nyl9KWBcclxuICAgICAgICB9KS5hcHBlbmQoLi4uaW50Qm94RWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdW5ncnBIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbdGhpcy5pbnRUaWNrSFRNTCwgdGhpcy5pY29uSFRNTCwgdGhpcy5uYW1lSFRNTCwgdGhpcy5pbnROYW1lSFRNTF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJyYW5jaFN0YXRpb25HWiBleHRlbmRzIEludFN0YXRpb25HWiB7XHJcbiAgICBjb25zdHJ1Y3RvciAoaWQ6IElELCBkYXRhOiBTdGF0aW9uSW5mbywgbGluZUluZikge1xyXG4gICAgICAgIGRhdGEuaW50ZXJjaGFuZ2VbMF0udW5zaGlmdChsaW5lSW5mKTtcclxuICAgICAgICBpZiAoZGF0YS5pbnRlcmNoYW5nZVsxXSkge1xyXG4gICAgICAgICAgICBkYXRhLmludGVyY2hhbmdlWzBdLnB1c2goLi4uZGF0YS5pbnRlcmNoYW5nZVsxXS5zbGljZSgxKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX25hbWVTaGlmdCgpIHtyZXR1cm4gdHJ1ZTt9XHJcbiAgICBnZXQgX3RpY2tSb3RhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucGFyZW50cy5pbmRleE9mKHRoaXMuYnJhbmNoLmxlZnRbMV0pID09PSAwIHx8IHRoaXMuY2hpbGRyZW4uaW5kZXhPZih0aGlzLmJyYW5jaC5yaWdodFsxXSkgPT09IDApID8gMCA6IDE4MDtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgT1NJU3RhdGlvbkdaIGV4dGVuZHMgSW50U3RhdGlvbkdaIHtcclxuICAgIGNvbnN0cnVjdG9yIChpZDogSUQsIGRhdGE6IFN0YXRpb25JbmZvKSB7XHJcbiAgICAgICAgZGF0YS5pbnRlcmNoYW5nZVswXS5wdXNoKC4uLmRhdGEuaW50ZXJjaGFuZ2VbMV0uc2xpY2UoMSkpO1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUk1HU3RhdGlvbkdaLCBJbnRTdGF0aW9uR1osIEJyYW5jaFN0YXRpb25HWiwgT1NJU3RhdGlvbkdaIH07IiwiaW1wb3J0IHsgZ2V0VHh0Qm94RGltLCBzZXRQYXJhbXMsIGdldFBhcmFtcywgcHV0UGFyYW1zLCBnZXRSYW5kb21JZCwgRGlyZWN0aW9uTG9uZywgZ2V0SW50Qm94R1ogfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IFJNR1N0YXRpb25HWiwgSW50U3RhdGlvbkdaLCBCcmFuY2hTdGF0aW9uR1osIE9TSVN0YXRpb25HWiB9IGZyb20gJy4uL1N0YXRpb24vU3RhdGlvbkdaJztcclxuaW1wb3J0IHsgUk1HTGluZSB9IGZyb20gJy4vTGluZSc7XHJcblxyXG5pbXBvcnQgeyBJRCwgTmFtZSwgU3RhdGlvbkluZm8sIFJNR1BhcmFtIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBJbnRlcmNoYW5nZUluZm8gfSBmcm9tICcuLi9TdGF0aW9uL1N0YXRpb24nO1xyXG5cclxuaW50ZXJmYWNlIFN0YXRpb25EaWN0R1oge1xyXG4gICAgW2luZGV4OiBzdHJpbmddOiBSTUdTdGF0aW9uR1o7XHJcbn1cclxuXHJcbmNsYXNzIFJNR0xpbmVHWiBleHRlbmRzIFJNR0xpbmUge1xyXG4gICAgcHJpdmF0ZSBfcHNkTnVtOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9saW5lTnVtOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9pbmZvUGFuZWxUeXBlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9kaXJlY3Rpb25HWlg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2RpcmVjdGlvbkdaWTogbnVtYmVyO1xyXG4gICAgc3RhdGlvbnM6IFN0YXRpb25EaWN0R1o7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKHBhcmFtOiBSTUdQYXJhbSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcHNkTnVtID0gcGFyYW0ucHNkX251bTtcclxuICAgICAgICB0aGlzLl9saW5lTnVtID0gcGFyYW0ubGluZV9udW07XHJcbiAgICAgICAgdGhpcy5faW5mb1BhbmVsVHlwZSA9IHBhcmFtLmluZm9fcGFuZWxfdHlwZTtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb25HWlggPSBwYXJhbS5kaXJlY3Rpb25fZ3pfeDtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb25HWlkgPSBwYXJhbS5kaXJlY3Rpb25fZ3pfeTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdFN0bkluc3RhbmNlKHN0bklkOiBJRCwgc3RuSW5mbzogU3RhdGlvbkluZm8pIHtcclxuICAgICAgICBpZiAoc3RuSW5mby5jaGlsZHJlbi5sZW5ndGggPT09IDIgfHwgc3RuSW5mby5wYXJlbnRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJyYW5jaFN0YXRpb25HWihzdG5JZCwgc3RuSW5mbywgW3RoaXMudGhlbWVDaXR5LCB0aGlzLnRoZW1lTGluZSwgdGhpcy5fdGhlbWVDb2xvdXIsIHRoaXMuX2ZnQ29sb3VyLCAuLi50aGlzLl9saW5lTmFtZXNdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChzdG5JbmZvLmNoYW5nZV90eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDInOlxyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIG5ldyBJbnQyU3RhdGlvbkdaKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICAgICAgY2FzZSAnaW50M19sJzpcclxuICAgICAgICAgICAgY2FzZSAnaW50M19yJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW50U3RhdGlvbkdaKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTFfdWwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kxMV9wbCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTExX3VyJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTFfcHInOlxyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIG5ldyBPU0kxMVN0YXRpb25HWihzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTEyX3VsJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTJfcGwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kxMl91cic6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTEyX3ByJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMjJfdWwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kyMl9wbCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIyX3VyJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMjJfcHInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPU0lTdGF0aW9uR1ooc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBjYXNlICdvc2kyMl9lbmRfcCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIyX2VuZF91JzpcclxuICAgICAgICAgICAgICAgIGlmIChzdG5JbmZvLnBhcmVudHNbMF0gPT0gJ2xpbmVzdGFydCcgfHwgc3RuSW5mby5jaGlsZHJlblswXSA9PSAnbGluZWVuZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9TSVN0YXRpb25HWihzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJNR1N0YXRpb25HWihzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBsaW5lWHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PSAncicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N2Z1dpZHRoICogdGhpcy5fcGFkZGluZyAvIDEwMCArIDY1LCBcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N2Z1dpZHRoICogKDEgLSB0aGlzLl9wYWRkaW5nLzEwMClcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3ZnV2lkdGggKiB0aGlzLl9wYWRkaW5nIC8gMTAwLCBcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N2Z1dpZHRoICogKDEgLSB0aGlzLl9wYWRkaW5nLzEwMCkgLSA2NVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXQgc3ZnV2lkdGgodmFsOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlci5zdmdXaWR0aCA9IHZhbDtcclxuICAgICAgICB0aGlzLmxvYWRMaW5lTnVtKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU5hbWUoKTtcclxuICAgICAgICB0aGlzLmxvYWREaXJlY3Rpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcGFkZGluZyh2YWwpIHtcclxuICAgICAgICBzdXBlci5wYWRkaW5nID0gdmFsO1xyXG4gICAgICAgIHRoaXMubG9hZExpbmVOdW0oKTtcclxuICAgICAgICB0aGlzLmxvYWRMaW5lTmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBicmFuY2hTcGFjaW5nKHZhbCkge1xyXG4gICAgICAgIHN1cGVyLmJyYW5jaFNwYWNpbmcgPSB2YWw7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkaXJlY3Rpb24odmFsKSB7XHJcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnZGlyZWN0aW9uJywgdmFsKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnggPSB0aGlzLl9zdG5SZWFsWChzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnN0YXRlID0gdGhpcy5fc3RuU3RhdGUoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUk1HTGluZUdaLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpO1xyXG4gICAgICAgIHRoaXMubG9hZExpbmVOdW0oKTtcclxuICAgICAgICB0aGlzLmxvYWRMaW5lTmFtZSgpO1xyXG4gICAgICAgIHRoaXMubG9hZERpcmVjdGlvbigpO1xyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHR4dEZsaXAodmFsKSB7XHJcbiAgICAgICAgc3VwZXIudHh0RmxpcCA9IHZhbDtcclxuICAgICAgICB0aGlzLmxvYWRMaW5lTnVtKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGN1cnJlbnRTdG5JZCh2YWwpIHtcclxuICAgICAgICBzdXBlci5jdXJyZW50U3RuSWQgPSB2YWw7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgICAgIHRoaXMubG9hZERpcmVjdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBsaW5lTnVtKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2xpbmVOdW0gPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdsaW5lX251bScsIHZhbCk7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxpbmVOYW1lcyh2YWw6IE5hbWUpIHtcclxuICAgICAgICB0aGlzLl9saW5lTmFtZXMgPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdsaW5lX25hbWUnLCB2YWwpO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWRMaW5lTmFtZSgpO1xyXG4gICAgICAgIC8vICh0byBiZSBmaXhlZCkgcmVkcmF3IGJyYW5jaGluZyBzdGF0aW9uXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcHNkTnVtKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX3BzZE51bSA9IHZhbDtcclxuICAgICAgICBzZXRQYXJhbXMoJ3BzZF9udW0nLCB2YWwpO1xyXG4gICAgICAgICQoJy5ybWctcHNkLW51bScpLnRleHQodmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaW5mb1BhbmVsVHlwZSh2YWwpIHtcclxuICAgICAgICB0aGlzLl9pbmZvUGFuZWxUeXBlID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnaW5mb19wYW5lbF90eXBlJywgdmFsKTtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNpbmRpY2F0b3JfbGlnaHQnKS5hdHRyKCd4bGluazpocmVmJywgJyNpbmRpY2F0b3JfJyt2YWwpO1xyXG4gICAgICAgIC8vICQoJyNkZXN0X3N0cmlwLCAjc3RyaXAnKS5yZW1vdmVBdHRyKCdjbGFzcycpLmFkZENsYXNzKGBybWctc3RyaXBfX2d6bXRyLS0ke3RoaXMuX2luZm9QYW5lbFR5cGV9YCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RyaXAoKTtcclxuICAgICAgICB0aGlzLmZpbGxUaGVtZUNvbG91cigpO1xyXG4gICAgICAgIHRoaXMuZHJhd1BTRCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkaXJlY3Rpb25HWlgodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb25HWlggPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdkaXJlY3Rpb25fZ3pfeCcsIHZhbCk7XHJcblxyXG4gICAgICAgIGxldCB4ID0gdGhpcy5fc3ZnV2lkdGggKiB0aGlzLl9kaXJlY3Rpb25HWlggLyAxMDA7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLl9zdmdIZWlnaHQgKiB0aGlzLl9kaXJlY3Rpb25HWlkgLyAxMDA7XHJcbiAgICAgICAgJCgnI2RpcmVjdGlvbl9neicpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt4fSwke3l9KWApO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkaXJlY3Rpb25HWlkodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb25HWlkgPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdkaXJlY3Rpb25fZ3pfeScsIHZhbCk7XHJcblxyXG4gICAgICAgIGxldCB4ID0gdGhpcy5fc3ZnV2lkdGggKiB0aGlzLl9kaXJlY3Rpb25HWlggLyAxMDA7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLl9zdmdIZWlnaHQgKiB0aGlzLl9kaXJlY3Rpb25HWlkgLyAxMDA7XHJcbiAgICAgICAgJCgnI2RpcmVjdGlvbl9neicpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt4fSwke3l9KWApO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdG5YU2hhcmUoc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgbGV0IHsgY3JpdGljYWxQYXRoLCBicmFuY2hlcyB9ID0gdGhpcztcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGNyaXRpY2FsUGF0aC5ub2Rlcy5pbmNsdWRlcyhzdG5JZCkpIHtyZXR1cm4gc3VwZXIuX3N0blhTaGFyZShzdG5JZCk7fVxyXG4gICAgICAgIGlmICh0aGlzLmNyaXRpY2FsUGF0aC5ub2Rlcy5qb2luKCcsJykgIT09IGJyYW5jaGVzWzBdLmpvaW4oJywnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuX3N0blhTaGFyZShzdG5JZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGJyYW5jaFdpdGhTdG4gPSBicmFuY2hlcy5zbGljZSgxKS5maWx0ZXIoYnJhbmNoID0+IGJyYW5jaC5pbmNsdWRlcyhzdG5JZCkpWzBdO1xyXG4gICAgICAgICAgICBsZXQgbGVuVG9MZWZ0ID0gdGhpcy5fY3AoYnJhbmNoV2l0aFN0blswXSwgc3RuSWQpLmxlbjtcclxuICAgICAgICAgICAgbGV0IGxlblRvUmlnaHQgPSB0aGlzLl9jcChzdG5JZCwgYnJhbmNoV2l0aFN0blticmFuY2hXaXRoU3RuLmxlbmd0aC0xXSkubGVuO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJyYW5jaGVzWzBdLmluY2x1ZGVzKGJyYW5jaFdpdGhTdG5bMF0pICYmIGJyYW5jaGVzWzBdLmluY2x1ZGVzKGJyYW5jaFdpdGhTdG5bYnJhbmNoV2l0aFN0bi5sZW5ndGgtMV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBzZWxmLl9zdG5YU2hhcmUoYnJhbmNoV2l0aFN0blswXSkgKiBsZW5Ub1JpZ2h0ICsgc2VsZi5fc3RuWFNoYXJlKGJyYW5jaFdpdGhTdG5bYnJhbmNoV2l0aFN0bi5sZW5ndGgtMV0pICogbGVuVG9MZWZ0ICkgLyAobGVuVG9MZWZ0ICsgbGVuVG9SaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnJhbmNoZXNbMF0uaW5jbHVkZXMoYnJhbmNoV2l0aFN0blswXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9zdG5YU2hhcmUoYnJhbmNoV2l0aFN0blswXSkgKyBsZW5Ub0xlZnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fc3RuWFNoYXJlKGJyYW5jaFdpdGhTdG5bYnJhbmNoV2l0aFN0bi5sZW5ndGgtMV0pIC0gbGVuVG9SaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcnRpY2FsIHBvc2l0aW9uIChpbiBzaGFyZXMpIG9mIHN0YXRpb24gaWNvbi4gXHJcbiAgICAgKi9cclxuICAgIF9zdG5ZU2hhcmUoc3RuSWQpIHtcclxuICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJyYW5jaGVzID0gdGhpcy5icmFuY2hlcztcclxuICAgICAgICBpZiAoYnJhbmNoZXNbMF0uaW5jbHVkZXMoc3RuSWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwOyBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaSA9IDE7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYnJhbmNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJhbmNoZXNbaV0uaW5jbHVkZXMoc3RuSWQpKSB7YnJlYWs7fVxyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChicmFuY2hlc1swXS5pbmNsdWRlcyhicmFuY2hlc1tpXVswXSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBicmFuY2hpbmdTdG5JZCA9IGJyYW5jaGVzW2ldWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5lVG9GaW5kID0gJ2NoaWxkcmVuJztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW2JyYW5jaGluZ1N0bklkXVtuZVRvRmluZF0uaW5kZXhPZihicmFuY2hlc1tpXVsxXSkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnJhbmNoaW5nU3RuSWQgPSBicmFuY2hlc1tpXS5zbGljZSgpLnJldmVyc2UoKVswXTtcclxuICAgICAgICAgICAgICAgIHZhciBuZVRvRmluZCA9ICdwYXJlbnRzJztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW2JyYW5jaGluZ1N0bklkXVtuZVRvRmluZF0uaW5kZXhPZihicmFuY2hlc1tpXS5zbGljZSgpLnJldmVyc2UoKVsxXSkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd1N0cmlwKCkge1xyXG4gICAgICAgIGxldCBzdHJpcEhlaWdodCA9ICh0eXBlID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdnejI4JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2d6Z2YnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA2MDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2d6Myc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQwO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZ3oxNDIxJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSh0aGlzLl9pbmZvUGFuZWxUeXBlKTtcclxuICAgICAgICAkKCcjZGVzdF9zdHJpcF9neiwgI3N0cmlwX2d6JykuYXR0cih7XHJcbiAgICAgICAgICAgIHk6IHRoaXMuX3N2Z0hlaWdodCAtIHN0cmlwSGVpZ2h0LCBcclxuICAgICAgICAgICAgaGVpZ2h0OiBzdHJpcEhlaWdodFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9yaWdodFdpZGVGYWN0b3Ioc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbc3RuSWRdIGluc3RhbmNlb2YgQnJhbmNoU3RhdGlvbkdaICYmIHRoaXMuc3RhdGlvbnNbc3RuSWRdLl90aWNrUm90YXRpb24gPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDAuMjU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9sZWZ0V2lkZUZhY3RvcihzdG5JZDogSUQpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0gaW5zdGFuY2VvZiBCcmFuY2hTdGF0aW9uR1ogJiYgdGhpcy5zdGF0aW9uc1tzdG5JZF0uX3RpY2tSb3RhdGlvbiAhPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMC4yNTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3BhdGhXZWlnaHQoc3RuSWQxOiBJRCwgc3RuSWQyOiBJRCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0aW9uc1tzdG5JZDFdLmNoaWxkcmVuLmluY2x1ZGVzKHN0bklkMikpIHtyZXR1cm4gLUluZmluaXR5O31cclxuXHJcbiAgICAgICAgcmV0dXJuIDEgKyB0aGlzLl9yaWdodFdpZGVGYWN0b3Ioc3RuSWQxKSArIHRoaXMuX2xlZnRXaWRlRmFjdG9yKHN0bklkMik7XHJcbiAgICAgICAgLy8gcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgd2lkdGggZm9yIGNvbG91ciBzdHJpcHMuIChIZWlnaHQgb2Ygc3RyaXBzIGFyZSBjb250cm9sbGVkIGJ5IGBSTUdMaW5lR1ouZHJhd1N0cmlwYC4gKVxyXG4gICAgICovXHJcbiAgICBkcmF3U1ZHRnJhbWUoKSB7XHJcbiAgICAgICAgc3VwZXIuZHJhd1NWR0ZyYW1lKCk7XHJcbiAgICAgICAgJCgnI2Rlc3Rfc3RyaXBfZ3onKS5hdHRyKCd3aWR0aCcsIHRoaXMuX3N2Z0Rlc3RXaWR0aCk7XHJcbiAgICAgICAgJCgnI3N0cmlwX2d6JykuYXR0cignd2lkdGgnLCB0aGlzLl9zdmdXaWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2xpbmVQYXRoKHN0bklkczogSURbXSkge1xyXG4gICAgICAgIGxldCBwcmV2WTogbnVtYmVyO1xyXG4gICAgICAgIHZhciBwYXRoID0gW107XHJcblxyXG4gICAgICAgIHN0bklkcy5mb3JFYWNoKHN0bklkID0+IHtcclxuICAgICAgICAgICAgdmFyIFt4LHldID0gWydfc3RuUmVhbFgnLCAnX3N0blJlYWxZJ10ubWFwKGZ1biA9PiB0aGlzW2Z1bl0oc3RuSWQpKTtcclxuICAgICAgICAgICAgaWYgKCFwcmV2WSAmJiBwcmV2WSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcHJldlkgPSB5O1xyXG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGBNICR7eH0sJHt5fWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA8IHByZXZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wdXNoKGBIICR7eC0zMH1gLCAnYSAzMCwzMCAwIDAsMCAzMCwtMzAnLCBgViAke3l9YClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh5ID4gcHJldlkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2goYEggJHt4LTMwfWAsICdhIDMwLDMwIDAgMCwxIDMwLDMwJywgYFYgJHt5fWApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA8IHByZXZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wdXNoKGBWICR7eSszMH1gLCAnYSAzMCwzMCAwIDAsMSAzMCwtMzAnLCBgSCAke3h9YClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh5ID4gcHJldlkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2goYFYgJHt5LTMwfWAsICdhIDMwLDMwIDAgMCwwIDMwLDMwJywgYEggJHt4fWApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGF0aC5wdXNoKGBIICR7eH1gKTtcclxuICAgICAgICAgICAgcHJldlkgPSB5O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzaW1wbGlmeSBwYXRoXHJcbiAgICAgICAgcmV0dXJuIHBhdGguam9pbignICcpLnJlcGxhY2UoLyggSCAoW1xcZC5dKykpKy9nLCAnIEggJDInKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3TGluZSgpIHtcclxuICAgICAgICAkKCcucm1nLWxpbmUnKS5yZW1vdmVDbGFzcygncm1nLWxpbmVfX210cicpLmFkZENsYXNzKCdybWctbGluZV9fZ3ptdHInKTtcclxuICAgICAgICBzdXBlci5kcmF3TGluZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRGb250cygpIHtcclxuICAgICAgICAvLyAkKCcucm1nLW5hbWVfX3poLCAucm1nLW5hbWVfX2VuJykuYWRkQ2xhc3MoJ3JtZy1uYW1lX19nem10cicpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGb250cygpIHtcclxuICAgICAgICBsZXQgc3R5bGVTaGVldCA9ICg8SFRNTExpbmtFbGVtZW50PiQoJ2xpbmsjY3NzX3NoYXJlJylbMF0pLnNoZWV0IGFzIENTU1N0eWxlU2hlZXQ7XHJcbiAgICAgICAgbGV0IGlkeDogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBBcnJheS5mcm9tKHN0eWxlU2hlZXQuY3NzUnVsZXMpLmZvckVhY2goKHJ1bGUsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJ1bGUuY3NzVGV4dC5pbmRleE9mKCcucm1nLW5hbWVfX3poJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpZHgucHVzaChpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChydWxlLmNzc1RleHQuaW5kZXhPZignLnJtZy1uYW1lX19lbicpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgaWR4LnB1c2goaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZHguZm9yRWFjaChpID0+IHN0eWxlU2hlZXQuZGVsZXRlUnVsZShpKSk7XHJcbiAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKCcucm1nLW5hbWVfX3poIHthbGlnbm1lbnQtYmFzZWxpbmU6IGNlbnRyYWw7IGZvbnQtZmFtaWx5OiBBcmlhbCwgU2ltSGVpLCBTVEhlaXRpLCBQaW5nRmFuZ1NDLVJlZ3VsYXIsIHNhbnMtc2VyaWY7fScpO1xyXG4gICAgICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZSgnLnJtZy1uYW1lX19lbiB7YWxpZ25tZW50LWJhc2VsaW5lOiBtaWRkbGU7IGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjt9Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbFRoZW1lQ29sb3VyKCkge1xyXG4gICAgICAgIHN1cGVyLmZpbGxUaGVtZUNvbG91cigpO1xyXG4gICAgICAgICQoJyNkZXN0X3N0cmlwX2d6LCAjc3RyaXBfZ3onKS5hdHRyKCdmaWxsJywgdGhpcy5fdGhlbWVDb2xvdXIpO1xyXG4gICAgICAgIGlmIChbJ2d6MycsICdnejE0MjEnXS5pbmNsdWRlcyh0aGlzLl9pbmZvUGFuZWxUeXBlKSkge1xyXG4gICAgICAgICAgICAkKCcjYmlnX3BzZCB1c2UnKS5hdHRyKCdmaWxsJywgdGhpcy5fdGhlbWVDb2xvdXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmdDb2xvdXIgPT09ICcjZmZmJykge1xyXG4gICAgICAgICAgICAgICAgJCgnI2JpZ19wc2QgdGV4dCcpLmFkZENsYXNzKCdybWctbmFtZV9fZ3ptdHItLXdoaXRlLWZnJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjYmlnX3BzZCB0ZXh0JykucmVtb3ZlQ2xhc3MoJ3JtZy1uYW1lX19nem10ci0td2hpdGUtZmcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyNiaWdfcHNkIHVzZScpLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKTtcclxuICAgICAgICAgICAgJCgnI2JpZ19wc2QgdGV4dCcpLnJlbW92ZUNsYXNzKCdybWctbmFtZV9fZ3ptdHItLXdoaXRlLWZnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCdwYXRoI3N0bl9neicpLmF0dHIoJ3N0cm9rZScsIHRoaXMuX3RoZW1lQ29sb3VyKTtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gI3BsYXRmb3JtID4gY2lyY2xlJykuYXR0cignZmlsbCcsIHRoaXMuX3RoZW1lQ29sb3VyKTtcclxuICAgICAgICAkKCcjbGluZV9uYW1lIHVzZScpLmF0dHIoJ2ZpbGwnLCB0aGlzLl90aGVtZUNvbG91cik7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZnQ29sb3VyID09PSAnI2ZmZicpIHtcclxuICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciA+ICNwbGF0Zm9ybSB0ZXh0JykuYWRkQ2xhc3MoJ3JtZy1uYW1lX19nem10ci0td2hpdGUtZmcnKTtcclxuICAgICAgICAgICAgJCgnI2xpbmVfbmFtZSB0ZXh0JykuYWRkQ2xhc3MoJ3JtZy1uYW1lX19nem10ci0td2hpdGUtZmcnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gI3BsYXRmb3JtIHRleHQnKS5yZW1vdmVDbGFzcygncm1nLW5hbWVfX2d6bXRyLS13aGl0ZS1mZycpO1xyXG4gICAgICAgICAgICAkKCcjbGluZV9uYW1lIHRleHQnKS5yZW1vdmVDbGFzcygncm1nLW5hbWVfX2d6bXRyLS13aGl0ZS1mZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyB1cGRhdGVTdG5OYW1lQmcoKSB7XHJcbiAgICAvLyAgICAgJCgnI2N1cnJlbnRfYmcnKS5oaWRlKCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgbG9hZExpbmVOdW0oKSB7XHJcbiAgICAgICAgY29uc3QgTElORV9OVU1fTUFYX1dJRFRIID0gMTUuNTkzNzU7XHJcbiAgICAgICAgJCgnLnJtZy1uYW1lX19nem10ci0tbGluZS1udW0nKS50ZXh0KHRoaXMuX2xpbmVOdW0pLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoLTkuMjUsMClgKTtcclxuXHJcbiAgICAgICAgdmFyIGxpbmVOdW1EaW0gPSBnZXRUeHRCb3hEaW0oJCgnLnJtZy1uYW1lX19nem10ci0tbGluZS1udW0nKVsxXSBhcyBFbGVtZW50IGFzIFNWR0dyYXBoaWNzRWxlbWVudCwgJ3JhaWxtYXAnKTtcclxuICAgICAgICBpZiAodGhpcy5fbGluZU51bS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgdmFyIGxpbmVOdW1TY2FsZSA9IGxpbmVOdW1EaW0ud2lkdGg+TElORV9OVU1fTUFYX1dJRFRIID8gTElORV9OVU1fTUFYX1dJRFRIL2xpbmVOdW1EaW0ud2lkdGggOiAxO1xyXG4gICAgICAgICAgICAkKCcucm1nLW5hbWVfX2d6bXRyLS1saW5lLW51bScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoLTkuMjUsMClzY2FsZSgke2xpbmVOdW1TY2FsZX0pYCk7XHJcbiAgICAgICAgICAgICQoJy5ybWctbmFtZV9fZ3ptdHItLXN0YXRpb24tbnVtJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSg5LjI1LDApc2NhbGUoJHtsaW5lTnVtU2NhbGV9KWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaW5lTnVtU2NhbGUgPSBsaW5lTnVtRGltLndpZHRoPkxJTkVfTlVNX01BWF9XSURUSCA/IExJTkVfTlVNX01BWF9XSURUSC9saW5lTnVtRGltLndpZHRoIDogMTtcclxuICAgICAgICAgICAgJCgnLnJtZy1uYW1lX19nem10ci0tbGluZS1udW0nKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKC05LjI1LDApc2NhbGUoJHtsaW5lTnVtU2NhbGV9KWApO1xyXG4gICAgICAgICAgICAkKCcucm1nLW5hbWVfX2d6bXRyLS1zdGF0aW9uLW51bScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoOS4yNSwwKWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb2FkTGluZU5hbWUoKSB7XHJcbiAgICAgICAgLy8gc2ltdWxhdGUgaW50ZXJjaGFuZ2UgaW5mb1xyXG4gICAgICAgIGxldCBpbmZvID0gW3RoaXMudGhlbWVDaXR5LCB0aGlzLnRoZW1lTGluZSwgdGhpcy5fdGhlbWVDb2xvdXIsIHRoaXMuX2ZnQ29sb3VyLCB0aGlzLl9saW5lTmFtZXNbMF0sIHRoaXMuX2xpbmVOYW1lc1sxXV0gYXMgSW50ZXJjaGFuZ2VJbmZvO1xyXG5cclxuICAgICAgICAkKCcjbGluZV9uYW1lJylcclxuICAgICAgICAgICAgLmVtcHR5KClcclxuICAgICAgICAgICAgLmFwcGVuZChnZXRJbnRCb3hHWihpbmZvLCAxKSk7XHJcbiAgICAgICAgJCgnI2xpbmVfbmFtZScpLmh0bWwoJCgnI2xpbmVfbmFtZScpLmh0bWwoKSk7XHJcblxyXG4gICAgICAgIHZhciBsaW5lTmFtZVggPSB0aGlzLl9kaXJlY3Rpb249PSdyJyA/IHRoaXMubGluZVhzWzBdLTY1IDogdGhpcy5saW5lWHNbMV0rNjU7XHJcblxyXG4gICAgICAgICQoJyNsaW5lX25hbWUnKVxyXG4gICAgICAgICAgICAuYXR0cih7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtsaW5lTmFtZVh9LC0xOClzY2FsZSgxLjUpYFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmxvYWRGb250cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWREaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IHZhbGlkRGVzdDogSURbXTtcclxuICAgICAgICBsZXQgeCA9IHRoaXMuX3N2Z1dpZHRoICogdGhpcy5fZGlyZWN0aW9uR1pYIC8gMTAwO1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5fc3ZnSGVpZ2h0ICogdGhpcy5fZGlyZWN0aW9uR1pZIC8gMTAwO1xyXG4gICAgICAgICQoJyNkaXJlY3Rpb25fZ3onKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7eH0sJHt5fSlgKTtcclxuICAgICAgICAvLyB0byBiZSBmaXhlZDogdmFsaWREZXN0IG9yZGVyaW5nXHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PSAnbCcpIHtcclxuICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiB1c2UnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgc2NhbGUoMC4zNSlgKTtcclxuICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAnc3RhcnQnLCBcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSg2NSwtNSknXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YWxpZERlc3QgPSB0aGlzLmxWYWxpZERlc3RzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogdXNlJykuYXR0cigndHJhbnNmb3JtJywgYHNjYWxlKDAuMzUpcm90YXRlKDE4MClgKTtcclxuICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAnZW5kJywgXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTY1LC01KSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhbGlkRGVzdCA9IHRoaXMuclZhbGlkRGVzdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWxpZERlc3QubGVuZ3RoICE9PSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBbZGVzdE5hbWVaSCwgZGVzdE5hbWVFTl0gPSBbMCwxXS5tYXAoaWR4ID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZERlc3QubWFwKHN0bklkID0+IHRoaXMuc3RhdGlvbnNbc3RuSWRdLm5hbWVbaWR4XS5yZXBsYWNlKC9cXFxcL2csICcgJykpLmpvaW4oJy8nKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDApLmZpbmQoJ3RleHQnKS5lcSgwKS50ZXh0KGRlc3ROYW1lWkggKyAn5pa55ZCRJyk7XHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDApLmZpbmQoJ3RleHQnKS5lcSgxKS50ZXh0KCdUb3dhcmRzICcgKyBkZXN0TmFtZUVOLnJlcGxhY2UoJ1xcXFwnLCAnICcpKTtcclxuXHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDApLnNob3coKTtcclxuICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuZXEoMSkuaGlkZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZsYXRNYXAgYW5kIGZsYXQgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgc29tZSBicm93c2VycyFcclxuICAgICAgICAgICAgLy8gaG93ZXZlciB0YXJnZXRpbmcgRVM1IGNhdXNlZCBvdGhlciBpc3N1ZXM/XHJcbiAgICAgICAgICAgIHZhbGlkRGVzdFxyXG4gICAgICAgICAgICAgICAgLm1hcChzdG5JZCA9PiB0aGlzLnN0YXRpb25zW3N0bklkXS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgodHh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGklMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eHQgPSAnVG93YXJkcyAnICsgdHh0LnJlcGxhY2UoJ1xcXFwnLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkKCcjZGlyZWN0aW9uX2d6IGcnKS5lcSgxKS5maW5kKCd0ZXh0JykuZXEoaSkudGV4dCh0eHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDEpLmZpbmQoJ3RleHQnKS5jc3MoJ2xldHRlci1zcGFjaW5nJywgMCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgY2hhckNvdW50cyA9IHZhbGlkRGVzdC5tYXAoc3RuSWQgPT4gdGhpcy5zdGF0aW9uc1tzdG5JZF0ubmFtZVswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQgbWluQ2hhckNvdW50cyA9IE1hdGgubWluKC4uLmNoYXJDb3VudHMpO1xyXG4gICAgICAgICAgICBpZiAobWluQ2hhckNvdW50cyA+IDEgJiYgY2hhckNvdW50c1swXSAhPT0gY2hhckNvdW50c1sxXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoYXJTcGFjaW5nID0gTWF0aC5hYnMoY2hhckNvdW50c1swXSAtIGNoYXJDb3VudHNbMV0pIC8gKG1pbkNoYXJDb3VudHMgLSAxKTtcclxuICAgICAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDEpLmZpbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcShjaGFyQ291bnRzWzBdID4gY2hhckNvdW50c1sxXSA/IDIgOiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ2xldHRlci1zcGFjaW5nJywgYCR7Y2hhclNwYWNpbmd9ZW1gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF4Q2hhckNvdW50ID0gTWF0aC5tYXgoLi4uY2hhckNvdW50cyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGlyZWN0aW9uX2d6IGcnKS5lcSgxKS5maW5kKCd0ZXh0JykuZXEoNCkuYXR0cigneCcsIDI1KihtYXhDaGFyQ291bnQrMSkpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuZXEoMSkuZmluZCgndGV4dCcpLnNsaWNlKDAsNCkucmVtb3ZlQXR0cigneCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuZXEoMSkuZmluZCgndGV4dCcpLmVxKDQpLnJlbW92ZUF0dHIoJ3gnKTtcclxuICAgICAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDEpLmZpbmQoJ3RleHQnKS5zbGljZSgwLDQpLmF0dHIoJ3gnLCAnLTc1Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICQoJyNkaXJlY3Rpb25fZ3ogZycpLmVxKDApLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnI2RpcmVjdGlvbl9neiBnJykuZXEoMSkuc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5OYW1lKHN0bklkLCBuYW1lczogTmFtZSwgc3RuTnVtKSB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlU3RuTmFtZShzdG5JZCwgbmFtZXMsIHN0bk51bSk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZExpbmVOdW0oKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbdGhpcy5fY3VycmVudFN0bklkXS5wYXJlbnRzLmluY2x1ZGVzKHN0bklkKSB8fCB0aGlzLnN0YXRpb25zW3RoaXMuX2N1cnJlbnRTdG5JZF0uY2hpbGRyZW4uaW5jbHVkZXMoc3RuSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFN0bklkID09PSBzdG5JZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpOyBcclxuICAgICAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxlZnREZXN0cy5pbmNsdWRlcyhzdG5JZCkgfHwgdGhpcy5yaWdodERlc3RzLmluY2x1ZGVzKHN0bklkKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWREaXJlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGRyYXdEZXN0SW5mbygpIHtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfc3RuX251bSB0ZXh0JykuZXEoMSkudGV4dCh0aGlzLnN0YXRpb25zW3RoaXMuX2N1cnJlbnRTdG5JZF0uc3RuTnVtKTtcclxuXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciA+ICNwbGF0Zm9ybSA+IHRleHQnKS5lcSgwKS50ZXh0KHRoaXMuX3BsYXRmb3JtTnVtKTtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gI2JpZ19wc2QgdGV4dCcpLmVxKDApLnRleHQodGhpcy5fcHNkTnVtKTtcclxuXHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25hbWUnKS5lbXB0eSgpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7dGhpcy5fc3ZnRGVzdFdpZHRoLzJ9LCR7MTAwIC0gKHRoaXMuc3RhdGlvbnNbdGhpcy5fY3VycmVudFN0bklkXS5uYW1lWzFdLnNwbGl0KCdcXFxcJykubGVuZ3RoIC0gMSkqMjB9KWApXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dGV4dD4nLCB7IGNsYXNzOidybWctbmFtZV9femggcm1nLW5hbWVfX2d6bXRyLS1kZXN0JyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KHRoaXMuc3RhdGlvbnNbdGhpcy5fY3VycmVudFN0bklkXS5uYW1lWzBdKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dGV4dD4nLCB7IGR5OjcwLCBjbGFzczoncm1nLW5hbWVfX2VuIHJtZy1uYW1lX19nem10ci0tZGVzdCcgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGV4dCh0aGlzLnN0YXRpb25zW3RoaXMuX2N1cnJlbnRTdG5JZF0ubmFtZVsxXS5zcGxpdCgnXFxcXCcpWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJzx0c3Bhbj4nLCB7IHg6MCwgZHk6NDAsICdhbGlnbm1lbnQtYmFzZWxpbmUnOidtaWRkbGUnIH0pLnRleHQodGhpcy5zdGF0aW9uc1t0aGlzLl9jdXJyZW50U3RuSWRdLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKVsxXSB8fCAnJylcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJCgnI3Rlcm1pbnVzX2d6JykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuX3N2Z1dpZHRoLzJ9LDEwMClgKTtcclxuXHJcbiAgICAgICAgbGV0IG5leHRTdG5JZCA9IHRoaXNcclxuICAgICAgICAgICAgLnN0YXRpb25zW3RoaXMuX2N1cnJlbnRTdG5JZF1bdGhpcy5fZGlyZWN0aW9uID09PSAnbCcgPyAncGFyZW50cycgOiAnY2hpbGRyZW4nXVxyXG4gICAgICAgICAgICAuZmlsdGVyKHN0bklkID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBicmFuY2hUbXAgPSB0aGlzLnN0YXRpb25zW3RoaXMuX2N1cnJlbnRTdG5JZF0uYnJhbmNoW3RoaXMuX2RpcmVjdGlvbiA9PT0gJ2wnID8gJ2xlZnQnIDogJ3JpZ2h0J11cclxuICAgICAgICAgICAgICAgIGlmIChicmFuY2hUbXAubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGJyYW5jaFRtcFswXSA9PT0gJ3Rocm91Z2gnID8gdHJ1ZSA6IHN0bklkICE9PSBicmFuY2hUbXBbMV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhuZXh0U3RuSWRbMF0pKSB7XHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHInKS5maW5kKCcjYmlnX25leHQsICNiaWdfbmV4dF8yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gdXNlJykuZXEoMCkuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjbGluZV9tYWluLCAjbGluZV9wYXNzLCAjbGluZV9uYW1lLCAjc3RuX2ljb25zLCAjZGlyZWN0aW9uX2d6JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjdGVybWludXNfZ3onKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKG5leHRTdG5JZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25leHRfMicpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25leHRfMicpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gdXNlJykuZXEoMCkuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcjbGluZV9tYWluLCAjbGluZV9wYXNzLCAjbGluZV9uYW1lLCAjc3RuX2ljb25zLCAjZGlyZWN0aW9uX2d6Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcjdGVybWludXNfZ3onKS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgW25leHROYW1lWkgsIG5leHROYW1lRU5dID0gWycnLCAnJ107XHJcbiAgICAgICAgbGV0IG5leHROYW1lWkhDb3VudCA9IDA7XHJcbiAgICAgICAgaWYgKG5leHRTdG5JZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgdmFyIG5leHRTdG5JbmZvID0gdGhpcy5zdGF0aW9uc1tuZXh0U3RuSWRbMF1dO1xyXG4gICAgICAgICAgICBbbmV4dE5hbWVaSCwgbmV4dE5hbWVFTl0gPSBuZXh0U3RuSW5mby5uYW1lO1xyXG4gICAgICAgICAgICBuZXh0TmFtZVpIQ291bnQgPSBuZXh0TmFtZVpILmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0IGc6bnRoLWNoaWxkKDIpIHRleHQnKS5lcSgwKS50ZXh0KG5leHROYW1lWkgpO1xyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dCBnOm50aC1jaGlsZCgyKSB0ZXh0JykuZXEoMSkudGV4dChuZXh0TmFtZUVOLnNwbGl0KCdcXFxcJylbMF0pXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0c3Bhbj4nLCB7IHg6MCwgZHk6MTcsICdhbGlnbm1lbnQtYmFzZWxpbmUnOidtaWRkbGUnIH0pLnRleHQobmV4dE5hbWVFTi5zcGxpdCgnXFxcXCcpWzFdIHx8ICcnKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV4dFN0bklkLmZvckVhY2goKHN0bklkLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXh0U3RuSW5mbyA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdO1xyXG4gICAgICAgICAgICAgICAgW25leHROYW1lWkgsIG5leHROYW1lRU5dID0gbmV4dFN0bkluZm8ubmFtZTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0TmFtZVpILmxlbmd0aCA+IG5leHROYW1lWkhDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROYW1lWkhDb3VudCA9IG5leHROYW1lWkgubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQoYCNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpudGgtY2hpbGQoJHsyKihpZHgrMSl9KSB0ZXh0YCkuZXEoMikudGV4dChuZXh0TmFtZVpIKTtcclxuICAgICAgICAgICAgICAgICQoYCNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpudGgtY2hpbGQoJHsyKihpZHgrMSl9KSB0ZXh0YCkuZXEoMykudGV4dChuZXh0TmFtZUVOLnNwbGl0KCdcXFxcJylbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHNwYW4+JywgeyB4OjAsIGR5OjEzLCAnYWxpZ25tZW50LWJhc2VsaW5lJzonbWlkZGxlJyB9KS50ZXh0KG5leHROYW1lRU4uc3BsaXQoJ1xcXFwnKVsxXSB8fCAnJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWxpZFJvdXRlcyA9IHRoaXMucm91dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihyb3V0ZSA9PiByb3V0ZS5pbmRleE9mKHN0bklkKSAhPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChyb3V0ZSA9PiByb3V0ZS5maWx0ZXIocyA9PiBzICE9PSAnbGluZXN0YXJ0JyAmJiBzICE9PSAnbGluZWVuZCcpKTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWxpZEVuZHM6IElEW107XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZEVuZHMgPSBBcnJheS5mcm9tKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0KHZhbGlkUm91dGVzLm1hcChyb3V0ZSA9PiByb3V0ZVswXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRW5kcyA9IEFycmF5LmZyb20oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXQodmFsaWRSb3V0ZXMubWFwKHJvdXRlID0+IHJvdXRlLnJldmVyc2UoKVswXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoYCNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpudGgtY2hpbGQoJHsyKihpZHgrMSl9KSB0ZXh0YCkuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAudGV4dCh2YWxpZEVuZHMubWFwKHMgPT4gdGhpcy5zdGF0aW9uc1tzXS5uYW1lWzBdKS5qb2luKCcvJykgKyAn5pa55ZCRJyk7XHJcbiAgICAgICAgICAgICAgICAkKGAjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6bnRoLWNoaWxkKCR7MiooaWR4KzEpfSkgdGV4dGApLmVxKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoJ1Rvd2FyZHMgJyArIHZhbGlkRW5kcy5tYXAocyA9PiB0aGlzLnN0YXRpb25zW3NdLm5hbWVbMV0pLmpvaW4oJy8nKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyJykuaHRtbCgkKCcjc3RhdGlvbl9pbmZvX2d6bXRyJykuaHRtbCgpKTtcclxuXHJcbiAgICAgICAgLy8gUG9zaXRpb24gYmlnIG5hbWVcclxuICAgICAgICB2YXIgYmlnTmFtZURpbSA9IGdldFR4dEJveERpbShcclxuICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25hbWUgdGV4dCcpWzBdIGFzIEVsZW1lbnQgYXMgU1ZHR3JhcGhpY3NFbGVtZW50LCBcclxuICAgICAgICAgICAgJ2Rlc3RpbmF0aW9uJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX3N0bl9udW0nKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeyh0aGlzLl9zdmdEZXN0V2lkdGgrYmlnTmFtZURpbS53aWR0aCkvMis1NX0sJHsxMjAgLSAodGhpcy5zdGF0aW9uc1t0aGlzLl9jdXJyZW50U3RuSWRdLm5hbWVbMV0uc3BsaXQoJ1xcXFwnKS5sZW5ndGggLSAxKSoyMH0pc2NhbGUoMS40KWApO1xyXG5cclxuICAgICAgICBsZXQgYmlnTmV4dERpbSA9IHt4OjAsIHk6MCwgd2lkdGg6MCwgaGVpZ2h0OjB9O1xyXG4gICAgICAgIGlmIChuZXh0U3RuSWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGJpZ05leHREaW0gPSBnZXRUeHRCb3hEaW0oXHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dCBnOm50aC1jaGlsZCgyKScpWzBdIGFzIEVsZW1lbnQgYXMgU1ZHR3JhcGhpY3NFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgJ2Rlc3RpbmF0aW9uJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBiaWdOZXh0RGltcyA9IFtcclxuICAgICAgICAgICAgICAgIGdldFR4dEJveERpbShcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6bnRoLWNoaWxkKDIpJylbMF0gYXMgRWxlbWVudCBhcyBTVkdHcmFwaGljc0VsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2Rlc3RpbmF0aW9uJ1xyXG4gICAgICAgICAgICAgICAgKSwgXHJcbiAgICAgICAgICAgICAgICBnZXRUeHRCb3hEaW0oXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25leHRfMiBnOm50aC1jaGlsZCg0KScpWzBdIGFzIEVsZW1lbnQgYXMgU1ZHR3JhcGhpY3NFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICdkZXN0aW5hdGlvbidcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgaWYgKGJpZ05leHREaW1zWzBdLndpZHRoID4gYmlnTmV4dERpbXNbMV0ud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGJpZ05leHREaW0gPSBiaWdOZXh0RGltc1swXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJpZ05leHREaW0gPSBiaWdOZXh0RGltc1sxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB2YXIgbmV4dE5hbWVaSENvdW50ID0gbmV4dE5hbWVaSC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT0gJ2wnKSB7XHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI3BsYXRmb3JtJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuX3N2Z0Rlc3RXaWR0aC0xMDB9LDEyMClgKTtcclxuICAgICAgICAgICAgaWYgKG5leHRTdG5JZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0TmFtZVpIQ291bnQgPD0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0IGc6bnRoLWNoaWxkKDIpJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkezExNSszNX0sMTEwKWApO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgPiB1c2UnKS5lcSgwKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7KDExNSszNSooMStuZXh0TmFtZVpIQ291bnQpK2JpZ05hbWVEaW0ueCkvMi0yMH0sMTIwKXNjYWxlKDAuMjUpYCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0IGc6bnRoLWNoaWxkKDIpJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkezExNSszNSowLjV9LDExMClgKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gdXNlJykuZXEoMCkuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeygxMTUrMzUqKDAuNStuZXh0TmFtZVpIQ291bnQpK2JpZ05hbWVEaW0ueCkvMi0yMH0sMTIwKXNjYWxlKDAuMjUpYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6bnRoLWNoaWxkKDIpJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgxMTMsODApYCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6bnRoLWNoaWxkKDQpJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgxMTMsMTkwKWApO1xyXG4gICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciA+IHVzZScpLmVxKDApLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHsoOTkrMjcqKDErbmV4dE5hbWVaSENvdW50KStiaWdOYW1lRGltLngpLzItMjB9LDEyMClzY2FsZSgwLjI1KWApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dCBnOmZpcnN0LWNoaWxkJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSg4MCwxMTApYCk7XHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpmaXJzdC1jaGlsZCcpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoNzIsODApYCk7XHJcbiAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpudGgtY2hpbGQoMyknKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDcyLDE5MClgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNwbGF0Zm9ybScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMTAwLDEyMClgKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZXh0U3RuSWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dCBnOm50aC1jaGlsZCgyKScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLl9zdmdEZXN0V2lkdGgtNDUtYmlnTmV4dERpbS53aWR0aH0sMTEwKWApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuZXh0TmFtZVpIQ291bnQgPD0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0IGc6Zmlyc3QtY2hpbGQnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7dGhpcy5fc3ZnRGVzdFdpZHRoLTQ1LWJpZ05leHREaW0ud2lkdGgtNzB9LDExMClgKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gdXNlJykuZXEoMCkuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeyh0aGlzLl9zdmdEZXN0V2lkdGgtNDUtYmlnTmV4dERpbS53aWR0aC03MC0zNStiaWdOYW1lRGltLngrYmlnTmFtZURpbS53aWR0aCs1NSsxOC41KjEuNCkvMisyMH0sMTIwKXNjYWxlKDAuMjUpcm90YXRlKDE4MClgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25leHQgZzpmaXJzdC1jaGlsZCcpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLl9zdmdEZXN0V2lkdGgtNDUtYmlnTmV4dERpbS53aWR0aC0zNSoxLjV9LDExMClgKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyID4gdXNlJykuZXEoMCkuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeyh0aGlzLl9zdmdEZXN0V2lkdGgtNDUtYmlnTmV4dERpbS53aWR0aC0zNSoyLjUrYmlnTmFtZURpbS54K2JpZ05hbWVEaW0ud2lkdGgrNTUrMTguNSoxLjQpLzIrMjB9LDEyMClzY2FsZSgwLjI1KXJvdGF0ZSgxODApYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6bnRoLWNoaWxkKDIpJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuX3N2Z0Rlc3RXaWR0aC00NS1iaWdOZXh0RGltLndpZHRofSw4MClgKTtcclxuICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgI2JpZ19uZXh0XzIgZzpudGgtY2hpbGQoNCknKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7dGhpcy5fc3ZnRGVzdFdpZHRoLTQ1LWJpZ05leHREaW0ud2lkdGh9LDE5MClgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfbmV4dF8yIGc6Zmlyc3QtY2hpbGQnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7dGhpcy5fc3ZnRGVzdFdpZHRoLTQ1LWJpZ05leHREaW0ud2lkdGgtNDF9LDgwKWApO1xyXG4gICAgICAgICAgICAgICAgJCgnI3N0YXRpb25faW5mb19nem10ciAjYmlnX25leHRfMiBnOm50aC1jaGlsZCgzKScpLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLl9zdmdEZXN0V2lkdGgtNDUtYmlnTmV4dERpbS53aWR0aC00MX0sMTkwKWApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJyNzdGF0aW9uX2luZm9fZ3ptdHIgPiB1c2UnKS5lcSgwKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7KHRoaXMuX3N2Z0Rlc3RXaWR0aC00NS1iaWdOZXh0RGltLndpZHRoLTQxLTI3K2JpZ05hbWVEaW0ueCtiaWdOYW1lRGltLndpZHRoKzU1KzE4LjUqMS40KS8yKzIwfSwxMjApc2NhbGUoMC4yNSlyb3RhdGUoMTgwKWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNpbmRpY2F0b3JfbGlnaHQnKS5hdHRyKHtcclxuICAgICAgICAgICAgeDp0aGlzLl9zdmdEZXN0V2lkdGgvMiwgeToyNzAsIFxyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW5kaWNhdG9yXycgKyB0aGlzLl9pbmZvUGFuZWxUeXBlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kcmF3UFNEKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd1BTRCgpIHtcclxuICAgICAgICAkKCcjc3RhdGlvbl9pbmZvX2d6bXRyICNiaWdfcHNkJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuX3N2Z0Rlc3RXaWR0aC8yKzgwfSwke1xyXG4gICAgICAgICAgICAodHlwZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdnejMnOiByZXR1cm4gMjE4O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2d6MTQyMSc6IHJldHVybiAyMzg7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDI0MjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkodGhpcy5faW5mb1BhbmVsVHlwZSlcclxuICAgICAgICB9KWApO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFN0bihwcmVwLCBzdG5JZCwgbG9jLCBlbmQpIHtcclxuICAgICAgICB2YXIgcmVzID0gc3VwZXIuYWRkU3RuKHByZXAsIHN0bklkLCBsb2MsIGVuZCk7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgICAgIHRoaXMubG9hZERpcmVjdGlvbigpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlU3RuKHN0bklkKSB7XHJcbiAgICAgICAgaWYgKHN1cGVyLnJlbW92ZVN0bihzdG5JZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWREaXJlY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgdHlwZSwgaW5mbz1udWxsKSB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlU3RuVHJhbnNmZXIoc3RuSWQsIHR5cGUsIGluZm8pO1xyXG4gICAgICAgIHRoaXMubG9hZExpbmVOdW0oKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVCcmFuY2hUeXBlKHN0bklkOiBJRCwgZGlyZWN0aW9uOiBEaXJlY3Rpb25Mb25nLCB0eXBlOiAndGhyb3VnaCcgfCAnbm9udGhyb3VnaCcpIHtcclxuICAgICAgICBzdXBlci51cGRhdGVCcmFuY2hUeXBlKHN0bklkLCBkaXJlY3Rpb24sIHR5cGUpO1xyXG4gICAgICAgIHRoaXMubG9hZExpbmVOdW0oKTtcclxuICAgICAgICB0aGlzLmxvYWREaXJlY3Rpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVCcmFuY2hGaXJzdChzdG5JZDogSUQsIGRpcmVjdGlvbjogRGlyZWN0aW9uTG9uZywgZmlyc3Q6IElEKSB7XHJcbiAgICAgICAgaWYgKCFzdXBlci51cGRhdGVCcmFuY2hGaXJzdChzdG5JZCwgZGlyZWN0aW9uLCBmaXJzdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvYWRMaW5lTnVtKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkRGlyZWN0aW9uKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQnJhbmNoUG9zKHN0bklkOiBJRCwgZGlyZWN0aW9uOiBEaXJlY3Rpb25Mb25nLCBwb3M6IDAgfCAxKSB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlQnJhbmNoUG9zKHN0bklkLCBkaXJlY3Rpb24sIHBvcyk7XHJcbiAgICAgICAgdGhpcy5sb2FkTGluZU51bSgpO1xyXG4gICAgICAgIHRoaXMubG9hZERpcmVjdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbml0U1ZHKGxpbmUpIHtcclxuICAgICAgICBzdXBlci5pbml0U1ZHKGxpbmUpO1xyXG4gICAgICAgIGxpbmUubG9hZExpbmVOdW0oKTtcclxuICAgICAgICBsaW5lLmxvYWRMaW5lTmFtZSgpO1xyXG4gICAgICAgIGxpbmUubG9hZERpcmVjdGlvbigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBSTUdMaW5lR1ogfTsiXSwic291cmNlUm9vdCI6IiJ9