/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"index": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"LineGZ":"LineGZ"}[chunkId]||chunkId) + ".min.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@material/auto-init/constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/@material/auto-init/constants.js ***!
  \*******************************************************/
/*! exports provided: strings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings = {
    AUTO_INIT_ATTR: 'data-mdc-auto-init',
    AUTO_INIT_STATE_ATTR: 'data-mdc-auto-init-state',
    INITIALIZED_STATE: 'initialized',
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@material/auto-init/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/auto-init/index.js ***!
  \***************************************************/
/*! exports provided: mdcAutoInit, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mdcAutoInit", function() { return mdcAutoInit; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/auto-init/constants.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


var AUTO_INIT_ATTR = _constants__WEBPACK_IMPORTED_MODULE_1__["strings"].AUTO_INIT_ATTR, AUTO_INIT_STATE_ATTR = _constants__WEBPACK_IMPORTED_MODULE_1__["strings"].AUTO_INIT_STATE_ATTR, INITIALIZED_STATE = _constants__WEBPACK_IMPORTED_MODULE_1__["strings"].INITIALIZED_STATE;
var registry = {};
var CONSOLE_WARN = console.warn.bind(console); // tslint:disable-line:no-console
function emit(evtType, evtData, shouldBubble) {
    if (shouldBubble === void 0) { shouldBubble = false; }
    var evt;
    if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
            bubbles: shouldBubble,
            detail: evtData,
        });
    }
    else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    document.dispatchEvent(evt);
}
/* istanbul ignore next: optional argument is not a branch statement */
/**
 * Auto-initializes all MDC components on a page.
 */
function mdcAutoInit(root) {
    var e_1, _a;
    if (root === void 0) { root = document; }
    var components = [];
    var nodes = [].slice.call(root.querySelectorAll("[" + AUTO_INIT_ATTR + "]"));
    nodes = nodes.filter(function (node) { return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE; });
    try {
        for (var nodes_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
            var node = nodes_1_1.value;
            var ctorName = node.getAttribute(AUTO_INIT_ATTR);
            if (!ctorName) {
                throw new Error('(mdc-auto-init) Constructor name must be given.');
            }
            var Constructor = registry[ctorName]; // tslint:disable-line:variable-name
            if (typeof Constructor !== 'function') {
                throw new Error("(mdc-auto-init) Could not find constructor in registry for " + ctorName);
            }
            // TODO: Should we make an eslint rule for an attachTo() static method?
            // See https://github.com/Microsoft/TypeScript/issues/14600 for discussion of static interface support in TS
            var component = Constructor.attachTo(node);
            Object.defineProperty(node, ctorName, {
                configurable: true,
                enumerable: false,
                value: component,
                writable: false,
            });
            components.push(component);
            node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    emit('MDCAutoInit:End', {});
    return components;
}
// Constructor is PascalCased because it is a direct reference to a class, rather than an instance of a class.
// tslint:disable-next-line:variable-name
mdcAutoInit.register = function (componentName, Constructor, warn) {
    if (warn === void 0) { warn = CONSOLE_WARN; }
    if (typeof Constructor !== 'function') {
        throw new Error("(mdc-auto-init) Invalid Constructor value: " + Constructor + ". Expected function.");
    }
    var registryValue = registry[componentName];
    if (registryValue) {
        warn("(mdc-auto-init) Overriding registration for " + componentName + " with " + Constructor + ". Was: " + registryValue);
    }
    registry[componentName] = Constructor;
};
mdcAutoInit.deregister = function (componentName) {
    delete registry[componentName];
};
mdcAutoInit.deregisterAll = function () {
    var keys = Object.keys(registry);
    keys.forEach(this.deregister, this);
};
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (mdcAutoInit);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),

/***/ "./src/Line/Line.ts":
/*!**************************!*\
  !*** ./src/Line/Line.ts ***!
  \**************************/
/*! exports provided: RMGLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLine", function() { return RMGLine; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Station_Station__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Station/Station */ "./src/Station/Station.ts");



class RMGLine {
    constructor(param) {
        this._longInterval = 1;
        this.stations = {};
        this._svgHeight = param['svg_height'];
        this._svgWidth = param['svg_width'];
        this._svgDestWidth = param['svg_dest_width'];
        this._showOuter = param['show_outer'];
        [this.themeCity, this.themeLine, this._themeColour, this._fgColour] = param.theme;
        this.yPc = param['y_pc'];
        this._padding = param['padding'];
        this._stripPc = param['strip_pc'];
        this._branchSpacing = param.branch_spacing;
        this._txtFlip = param['txt_flip'];
        this._lineNames = param['line_name'];
        for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
            this.stations[stnId] = this._initStnInstance(stnId, stnInfo);
        }
        this._currentStnId = param['current_stn_idx'];
        this._direction = param['direction'];
        this._platformNum = param['platform_num'];
        this._destLegacy = param['dest_legacy'];
        this._charForm = param.char_form;
        // Calculate other properties of stations
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
            stnInstance.namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
        }
    }
    _initStnInstance(stnId, stnInfo) {
        switch (stnInfo.change_type) {
            case 'int2':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int2Station"](stnId, stnInfo);
            case 'int3_l':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3LStation"](stnId, stnInfo);
            case 'int3_r':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3RStation"](stnId, stnInfo);
            case 'osi11_ul':
            case 'osi11_pl':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11LStation"](stnId, stnInfo);
            case 'osi11_ur':
            case 'osi11_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11RStation"](stnId, stnInfo);
            case 'osi12_ul':
            case 'osi12_pl':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12LStation"](stnId, stnInfo);
            case 'osi12_ur':
            case 'osi12_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12RStation"](stnId, stnInfo);
            case 'osi22_pl':
            case 'osi22_ul':
                if (stnInfo.parents[0] == 'linestart' || stnInfo.children[0] == 'lineend') {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22EndStation"](stnId, stnInfo);
                }
                else {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22LStation"](stnId, stnInfo);
                }
            case 'osi22_pr':
            case 'osi22_ur':
                if (stnInfo.parents[0] == 'linestart' || stnInfo.children[0] == 'lineend') {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22EndStation"](stnId, stnInfo);
                }
                else {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22RStation"](stnId, stnInfo);
                }
            default:
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["RMGStation"](stnId, stnInfo);
        }
    }
    set svgDestWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgDestWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_dest_width', val);
        this.drawSVGFrame();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
    }
    set svgWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_width', val);
        this.drawSVGFrame();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set yPc(val) {
        val = Number(val);
        this._yPc = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('y_pc', val);
        let y = val * this._svgHeight / 100;
        $('g#main').attr('transform', `translate(0,${y})`);
    }
    set padding(val) {
        val = Number(val);
        this._padding = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('padding', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set branchSpacing(val) {
        val = Number(val);
        this._branchSpacing = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('branch_spacing', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set txtFlip(val) {
        this._txtFlip = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('txt_flip', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
        }
        $('#stn_icons').empty();
        this.drawStns();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set themeColour(rgbs) {
        this._themeColour = rgbs[0];
        this._fgColour = rgbs[1];
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.theme[2] = rgbs[0];
        param.theme[3] = rgbs[1];
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.fillThemeColour();
    }
    set direction(val) {
        this._direction = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    set platformNum(val) {
        this._platformNum = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('platform_num', val);
        $('.rmg-name__platformnum').text(val);
    }
    set charForm(val) {
        this._charForm = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('char_form', val);
        var prevCharForm = $('.rmg-name__zh').eq(0).attr('class').match(/rmg-name__char-\w{2,4}/g)[0];
        $('.rmg-name__zh').removeClass(prevCharForm);
        $('.rmg-name__zh').addClass(`rmg-name__char-${val}`);
    }
    set lineNames(val) {
        this._lineNames = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('line_name', val);
        this.drawDestInfo();
        this.loadFonts();
    }
    set destLegacy(val) {
        this._destLegacy = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('dest_legacy', val);
        this.drawDestInfo();
        this.loadFonts();
    }
    set currentStnId(val) {
        this._currentStnId = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('current_stn_idx', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
    }
    _rightWideFactor(stnId) {
        var res = 0;
        var stnClasses = ['Int3RStation', 'OSI11RStation', 'OSI12RStation', 'OSI22LStation', 'OSI22RStation'];
        if (stnClasses.includes(this.stations[stnId].constructor.name)) {
            res += this._longInterval;
        }
        if (this._stnOutdegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnIndegree(this.stations[stnId].children[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    _leftWideFactor(stnId) {
        var res = 0;
        var stnClasses = ['Int3LStation', 'OSI11LStation', 'OSI12LStation', 'OSI22LStation', 'OSI22RStation'];
        if (stnClasses.includes(this.stations[stnId].constructor.name)) {
            res += this._longInterval;
        }
        if (this._stnIndegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnOutdegree(this.stations[stnId].parents[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    _pathWeight(stnId1, stnId2) {
        // Path weight from stnId1 to stnId2
        // if (stnId1 == stnId2) {return 0;}
        if (!this.stations[stnId1].children.includes(stnId2)) {
            return -Infinity;
        }
        return 1 + this._rightWideFactor(stnId1) + this._leftWideFactor(stnId2);
    }
    _cpm(from, to) {
        var self = this;
        // Critical Path Method (FuOR)
        if (from == to) {
            return 0;
        }
        ;
        // var allLengths = [];
        var allLengths = this.stations[from].children.map(child => allLengths.push(1 + self._cpm(child, to)));
        // for (let child of this.stations[from].children) {
        //     allLengths.push(1 + self._cpm(child, to));
        // }
        return Math.max(...allLengths);
    }
    _cp(from, to) {
        var self = this;
        if (from == to) {
            return { len: 0, nodes: [from] };
        }
        let allLengths = [];
        let criticalPaths = [];
        this.stations[from].children.forEach(child => {
            let cp = self._cp(child, to);
            if (cp.len < 0) {
                return;
            }
            allLengths.push(this._pathWeight(from, child) + cp.len);
            cp.nodes.unshift(from);
            criticalPaths.push(cp.nodes);
        });
        let maxLength = Math.max(...allLengths);
        return {
            'len': maxLength,
            'nodes': criticalPaths[allLengths.indexOf(maxLength)]
        };
    }
    get criticalPath() {
        let allLengths = [];
        let criticalPaths = [];
        this.leftDests.forEach(ld => {
            this.rightDests.forEach(rd => {
                let cp = this._cp(ld, rd);
                allLengths.push(cp.len);
                criticalPaths.push(cp.nodes);
            });
        });
        let maxLen = Math.max(...allLengths);
        return {
            'len': maxLen,
            'nodes': criticalPaths[allLengths.indexOf(maxLen)]
        };
    }
    _topoOrder(from, tpo = []) {
        var self = this;
        tpo.push(from);
        this.stations[from].children.forEach(child => {
            if (this._stnIndegree(child) == 2 && this.stations[child].parents.indexOf(from) == 0) {
                // wait the other branch
                return;
            }
            tpo.concat(self._topoOrder(child, tpo));
        });
        return tpo;
    }
    get tpo() {
        let res = this._topoOrder('linestart');
        return res.slice(1, res.length - 1);
    }
    get y() {
        // return this._yPc * this._svgHeight / 100; 
        return 0;
    }
    get stripY() { return this._stripPc * this._svgHeight / 100; }
    get turningRadius() { return this._branchSpacing / 2 * (Math.sqrt(2) / (Math.sqrt(2) - 1)); }
    get lineXs() {
        return [
            this._svgWidth * this._padding / 100,
            this._svgWidth * (1 - this._padding / 100)
        ];
    }
    get leftDests() { return this.stations.linestart.children; }
    get rightDests() { return this.stations.lineend.parents; }
    get lValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart')[0])));
    }
    get rValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart').reverse()[0])));
    }
    _stnIndegree(stnId) { return this.stations[stnId].inDegree; }
    _stnOutdegree(stnId) { return this.stations[stnId].outDegree; }
    _stnXShare(stnId) {
        var self = this;
        var cp = this.criticalPath;
        if (cp.nodes.includes(stnId)) {
            return this._cp(cp.nodes[0], stnId).len;
        }
        var partSource = stnId;
        var partSink = stnId;
        var leftOpenJaw = false;
        var rightOpenJaw = false;
        while (true) {
            var parent = this.stations[partSource].parents[0];
            if (parent == 'linestart') {
                leftOpenJaw = true;
                break;
            }
            partSource = parent;
            if (this._stnOutdegree(partSource) > 1) {
                break;
            }
        }
        while (true) {
            var children = this.stations[partSink].children;
            if (children[0] != 'lineend') {
                partSink = children[0];
            }
            else {
                rightOpenJaw = true;
                break;
            }
            if (this._stnIndegree(partSink) > 1) {
                break;
            }
        }
        var lengthToSource = this._cp(partSource, stnId).len;
        var lengthToSink = this._cp(stnId, partSink).len;
        if (leftOpenJaw) {
            var actualPartLength = this._cp(cp.nodes[0], partSink).len;
            return self._stnXShare(partSink) - lengthToSink / (lengthToSource + lengthToSink) * actualPartLength;
        }
        else if (rightOpenJaw) {
            var actualPartLength = this._cp(partSource, cp.nodes.slice(-1)[0]).len;
        }
        else {
            var actualPartLength = this._cp(partSource, partSink).len;
        }
        return self._stnXShare(partSource) + lengthToSource / (lengthToSource + lengthToSink) * actualPartLength;
    }
    _stnRealX(stnId) {
        let [lineStart, lineEnd] = this.lineXs;
        return lineStart + this._stnXShare(stnId) / this.criticalPath.len * (lineEnd - lineStart);
    }
    _stnYShare(stnId) {
        if (['linestart', 'lineend'].includes(stnId) || this._stnIndegree(stnId) > 1 || this._stnOutdegree(stnId) > 1) {
            return 0;
        }
        var stnPred = this.stations[stnId].parents[0];
        if (stnPred) {
            // parent exist
            if (this._stnOutdegree(stnPred) == 1) {
                // no sibling, then y same as parent
                return this._stnYShare(stnPred);
            }
            else {
                // sibling exists, then y depends on its idx of being children
                return (this.stations[stnPred].children.indexOf(stnId) == 0) ? 1 : -1;
            }
        }
        else {
            // no parent, must be linestart
            return 0;
        }
        return 0;
    }
    _stnRealY(stnId) {
        return this.y - this._stnYShare(stnId) * this._branchSpacing;
    }
    _isSuccessor_old(stnId1, stnId2) {
        // Is stnId2 a successor of stnId1?
        var self = this;
        var descOfStn1 = this.stations[stnId1].children;
        if (!descOfStn1.length) {
            return false;
        }
        else if (descOfStn1.includes(stnId2)) {
            return true;
        }
        else {
            for (let desc of descOfStn1) {
                if (self._isSuccessor_old(desc, stnId2)) {
                    return true;
                }
            }
        }
        return false;
    }
    _isSuccessor(stnId1, stnId2) {
        // Is stnId2 a successor of stnId1?
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx1 < idx2) {
                return true;
            }
        }
        return false;
    }
    _isPredecessor_old(stnId1, stnId2) {
        // Is stnId2 a predecessor of stnId1?
        var self = this;
        var ancOfStn1 = this.stations[stnId1].parents;
        if (!ancOfStn1.length) {
            return false;
        }
        else if (ancOfStn1.includes(stnId2)) {
            return true;
        }
        else {
            for (let anc of ancOfStn1) {
                if (self._isPredecessor_old(anc, stnId2)) {
                    return true;
                }
            }
        }
        return false;
    }
    _isPredecessor(stnId1, stnId2) {
        // Is stnId2 a predecessor of stnId1?
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx2 < idx1) {
                return true;
            }
        }
        return false;
    }
    _stnState(stnId) {
        if (stnId == this._currentStnId) {
            return 0;
        }
        if (this._direction == 'r') {
            return this._isSuccessor(this._currentStnId, stnId) ? 1 : -1;
        }
        else {
            return this._isPredecessor(this._currentStnId, stnId) ? 1 : -1;
        }
    }
    _stnNamePos(stnId) {
        var self = this;
        var cp = this.criticalPath.nodes;
        if (stnId == 'linestart') {
            return 1;
        }
        var pos = cp.indexOf(stnId) % 2;
        if (pos == -1) {
            var parId = this.stations[stnId].parents[0];
            if (this._stnOutdegree(parId) == 2) {
                return self._stnNamePos(parId);
            }
            return Number(!self._stnNamePos(parId));
        }
        return pos;
    }
    drawSVGFrame() {
        $('#railmap, #outer').attr({
            width: this._svgWidth,
            height: this._svgHeight
        });
        $('#destination, #dest_outer').attr({
            width: this._svgDestWidth,
            height: this._svgHeight
        });
        $('#dest_strip_gz').attr('width', this._svgDestWidth);
        $('#strip_gz').attr('width', this._svgWidth);
    }
    showFrameOuter() {
        // var outerColour = this._showOuter ? 'black' : 'none';
        // $('#outer, #dest_outer').attr('stroke', outerColour);
        if (this._showOuter) {
            $('#outer, #dest_outer').show();
        }
        else {
            $('#outer, #dest_outer').hide();
        }
    }
    drawStns() {
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $('#stn_icons').append(stnInstance.html);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
    }
    updateStnNameBg() {
        var stnNameDim = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($(`#stn_icons > #${this._currentStnId} > .Name`)[0], 'railmap');
        console.log(stnNameDim);
        $('#current_bg').attr({
            x: stnNameDim.x - 3,
            width: stnNameDim.width + 6,
        });
    }
    get stnDX() { return this.turningRadius - this._branchSpacing / 2; }
    ;
    get stnDY() { return this._branchSpacing / 2; }
    ;
    get stnExtraH() {
        var [lineStart, lineEnd] = this.lineXs;
        return (lineEnd - lineStart) / this.criticalPath.len * this._longInterval;
    }
    get stnSpareH() {
        var [lineStart, lineEnd] = this.lineXs;
        var dh = ((lineEnd - lineStart) / this.criticalPath.len - 2 * this.stnDX) / 2;
        if (dh < 0) {
            console.warn(`SVG width too small! ${dh}`);
        }
        return dh;
    }
    get pathTurnENE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnNEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnESE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${this.stnDY}`; }
    ;
    get pathTurnSEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${this.stnDY}`; }
    ;
    _linePath(stnIds) {
        var [prevId, prevY, prevX] = [];
        var path = [];
        var { stnExtraH, stnSpareH, pathTurnESE, pathTurnSEE, pathTurnENE, pathTurnNEE, stnDX } = this;
        stnIds.forEach(stnId => {
            var [x, y] = ['_stnRealX', '_stnRealY'].map(fun => this[fun](stnId));
            if (!prevY && prevY !== 0) {
                [prevId, prevX, prevY] = [stnId, x, y];
                path.push(`M ${x},${y}`);
                return;
            }
            if (y > prevY) {
                path.push(y == this.y ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnESE, pathTurnSEE);
            }
            else if (y < prevY) {
                path.push(y == this.y ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnENE, pathTurnNEE);
            }
            path.push(`H ${x}`);
            [prevId, prevX, prevY] = [stnId, x, y];
        });
        // simplify path
        return path.join(' ').replace(/( H ([\d.]+))+/g, ' H $2');
    }
    drawLine() {
        this.branches.map(branch => {
            var lineMainStns = branch.filter(stnId => this.stations[stnId].state >= 0);
            var linePassStns = branch.filter(stnId => this.stations[stnId].state <= 0);
            if (lineMainStns.length === 1) {
                linePassStns = branch;
            }
            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {
                // if two set disjoint
                if (linePassStns[0] === branch[0]) {
                    // -1 -1 1 1
                    linePassStns.push(lineMainStns[0]);
                }
                else if (lineMainStns[0] === branch[0] && lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] && linePassStns.length) {
                    linePassStns = branch;
                    lineMainStns = [];
                }
                else {
                    // 1 1 -1 -1
                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);
                }
            }
            $('#line_main').append($('<path>', { d: this._linePath(lineMainStns) }));
            $('#line_pass').append($('<path>', { d: this._linePath(linePassStns) }));
        });
        $('#line_main').html($('#line_main').html());
        $('#line_pass').html($('#line_pass').html());
    }
    drawStrip() {
        // $('#strip, #dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`)
        $('#strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`);
        $('#dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgDestWidth}`);
    }
    fillThemeColour() {
        $('#line_main, #strip, #dest_strip').attr('stroke', this._themeColour);
        $('#dest_name > #platform > circle').attr('fill', this._themeColour);
    }
    drawDestInfo() {
        $('#dest_name > #platform > text').text(this._platformNum);
        let validDest = this[this._direction + 'ValidDests'];
        let txtAnchor = this._direction === 'l' ? 'start' : 'end';
        var [destNameZH, destNameEN] = [0, 1].map(idx => {
            return validDest.map(stnId => this.stations[stnId].name[idx].replace(/\\/g, ' ')).join('/');
        });
        if (this._destLegacy) {
            var [lineNameZH, lineNameEN] = this._lineNames;
            lineNameEN += ' ';
        }
        else {
            var lineNameZH = lineNameEN = '';
        }
        $('#dest_name > g:last-child text').eq(0).text(`${lineNameZH}往${destNameZH}`);
        $('#dest_name > g:last-child text').eq(1).text(`${lineNameEN}to ${destNameEN}`);
        var bcr = $('#dest_name > g:last-child')[0].getBoundingClientRect();
        var flagLength = 160 + 150 + bcr.width + 45 + 50;
        var isLeft = (this._direction == 'l') ? 1 : -1;
        var arrowX = (this._svgDestWidth - isLeft * flagLength) / 2;
        var arrowRotate = 90 * (1 - isLeft);
        var platformNumX = arrowX + isLeft * (160 + 50 + 75);
        var destNameX = platformNumX + isLeft * (75 + 45);
        $('#dest_name > use').attr('transform', `translate(${arrowX},130)rotate(${arrowRotate})`);
        $('#dest_name > #platform').attr('transform', `translate(${platformNumX},130)`);
        $('#dest_name > g:last-child').attr({
            transform: `translate(${destNameX},105)`,
            'text-anchor': txtAnchor
        });
    }
    loadFonts() {
        $('.rmg-name__zh, .rmg-name__en').addClass(`rmg-name__char-${this._charForm}`);
    }
    updateStnName(stnId, names, stnNum) {
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].name = names;
        param.stn_list[stnId].num = stnNum;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId].name = names;
        // this.stations[stnId]._nameZH = nameZH;
        // this.stations[stnId]._nameEN = nameEN;
        this.stations[stnId].stnNum = stnNum;
        $(`#stn_icons #${stnId}`).remove();
        $('#stn_icons').append(this.stations[stnId].html);
        $('#stn_icons').html($('#stn_icons').html());
        if (this.leftDests.includes(stnId) && this._direction == 'l') {
            this.drawDestInfo();
        }
        else if (this.rightDests.includes(stnId) && this._direction == 'r') {
            this.drawDestInfo();
        }
        this.loadFonts();
        if (stnId == this._currentStnId) {
            this.updateStnNameBg();
        }
    }
    updateStnTransfer(stnId, type, info = null) {
        var prevClass = this.stations[stnId].constructor.name;
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].change_type = type;
        if (type == 'none') {
            delete param.stn_list[stnId].transfer;
            // delete param.stn_list[stnId].interchange;
            param.stn_list[stnId].interchange = [[]];
        }
        else {
            // param.stn_list[stnId].transfer = info;
            param.stn_list[stnId].interchange = info;
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId] = this._initStnInstance(stnId, param.stn_list[stnId]);
        if (prevClass != this.stations[stnId].constructor.name) {
            // Not sure position, redraw all
            for (let [stnId, stnInstance] of Object.entries(this.stations)) {
                if (['linestart', 'lineend'].includes(stnId)) {
                    continue;
                }
                stnInstance.x = this._stnRealX(stnId);
                stnInstance.y = this._stnRealY(stnId);
                stnInstance.namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
                stnInstance.state = this._stnState(stnId);
            }
            RMGLine.clearSVG();
            this.drawStns();
            this.drawLine();
            this.drawStrip();
        }
        else {
            this.stations[stnId].x = this._stnRealX(stnId);
            this.stations[stnId].y = this._stnRealY(stnId);
            this.stations[stnId].namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
            this.stations[stnId].state = this._stnState(stnId);
            $(`#stn_icons #${stnId}`).remove();
            $('#stn_icons').append(this.stations[stnId].html);
            $('#stn_icons').html($('#stn_icons').html());
        }
        this.loadFonts();
        this.updateStnNameBg();
    }
    removeStn(stnId) {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        var parents = this.stations[stnId].parents;
        var children = this.stations[stnId].children;
        var isLastMainBranchStn = true;
        for (let id in this.stations) {
            if ([stnId, 'linestart', 'lineend'].includes(id)) {
                continue;
            }
            if (this._stnYShare(id) == 0) {
                isLastMainBranchStn = false;
                break;
            }
        }
        if (parents.length == 2 && children.length == 2) {
            // To be rewritten, join two branches
            return false;
        }
        else if (isLastMainBranchStn) {
            // Last main line station
            return false;
        }
        else if (Object.keys(param.stn_list).length == 4) {
            // Last two stations
            return false;
        }
        else if (parents.length == 2 || children.length == 2) {
            parents.forEach(parId => {
                param.stn_list[parId].children = children;
                this.stations[parId].children = children;
            });
            children.forEach(childId => {
                param.stn_list[childId].parents = parents;
                this.stations[childId].parents = parents;
            });
            if (parents.length == 1) {
                param.stn_list[parents[0]].branch.right = this.stations[stnId].branch.right;
                this.stations[parents[0]].branch.right = this.stations[stnId].branch.right;
            }
            if (children.length == 1) {
                param.stn_list[children[0]].branch.left = this.stations[stnId].branch.left;
                this.stations[children[0]].branch.left = this.stations[stnId].branch.left;
            }
        }
        else if (this._stnOutdegree(parents[0]) == 2 && this._stnIndegree(children[0]) == 2) {
            // 1 par 1 child, last station on upper/lower branch
            // branch disappear
            var childIdxOfPar = this.stations[parents[0]].children.indexOf(stnId);
            var parIdxOfChild = this.stations[children[0]].parents.indexOf(stnId);
            param.stn_list[parents[0]].children.splice(childIdxOfPar, 1);
            this.stations[parents[0]].children.splice(childIdxOfPar, 1);
            param.stn_list[children[0]].parents.splice(parIdxOfChild, 1);
            this.stations[children[0]].parents.splice(parIdxOfChild, 1);
            param.stn_list[parents[0]].branch.right = [];
            this.stations[parents[0]].branch.right = [];
            param.stn_list[children[0]].branch.left = [];
            this.stations[children[0]].branch.left = [];
        }
        else {
            // 1 par 1 child
            parents.forEach(parId => {
                var idx = param.stn_list[parId].children.indexOf(stnId);
                if (children.length) {
                    param.stn_list[parId].children[idx] = children[0];
                    this.stations[parId].children[idx] = children[0];
                }
                else {
                    // Right dest
                    param.stn_list[parId].children.splice(idx, 1);
                    this.stations[parId].children.splice(idx, 1);
                }
                if (this.stations[parId].branch.right[1] === stnId) {
                    this.stations[parId].branch.right[1] = children[0];
                    param.stn_list[parId].branch.right[1] = children[0];
                }
            });
            children.forEach(childId => {
                var idx = param.stn_list[childId].parents.indexOf(stnId);
                if (parents.length) {
                    param.stn_list[childId].parents[idx] = parents[0];
                    this.stations[childId].parents[idx] = parents[0];
                }
                else {
                    // Left dest
                    param.stn_list[childId].parents.splice(idx, 1);
                    this.stations[childId].parents.splice(idx, 1);
                }
                if (this.stations[childId].branch.left[1] === stnId) {
                    this.stations[childId].branch.left[1] = parents[0];
                    param.stn_list[childId].branch.left[1] = parents[0];
                }
            });
        }
        delete param.stn_list[stnId];
        delete this.stations[stnId];
        var isCurrentStnChanged = false;
        if (this._currentStnId == stnId) {
            var newCurrentStnId = Object.keys(this.stations)[1];
            this._currentStnId = newCurrentStnId;
            param.current_stn_idx = newCurrentStnId;
            isCurrentStnChanged = true;
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        parents.concat(children).forEach(neId => {
            if (['linestart', 'lineend'].includes(neId)) {
                return;
            }
            this.stations[neId] = this._initStnInstance(neId, param.stn_list[neId]);
        });
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
        return true;
    }
    newStnPossibleLoc(prep, stnId) {
        var deg = (prep == 'before') ? this._stnIndegree(stnId) : this._stnOutdegree(stnId);
        switch (deg) {
            case 2:
                // 1 -> 2
                return [1, 1, 1, [], []];
            case 1:
                if (this._stnYShare(stnId) == 0) {
                    // 1 -> 1
                    let state = this.newBranchPossibleEnd(prep, stnId);
                    state = (state.length) ? state : [];
                    return [1, 0, 0, state, state];
                    // [1,0,0,1,1];
                }
                else if (this.stations[stnId].y > this.y) {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                }
                else {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                }
        }
        return [0, 0, 0, [], []];
    }
    newBranchPossibleEnd(prep, stnId) {
        let res = [];
        if (prep == 'before') {
            while (this._stnIndegree(stnId) == 1) {
                stnId = this.stations[stnId].parents[0];
                res.unshift(stnId);
            }
            res.pop();
        }
        else {
            while (this._stnOutdegree(stnId) == 1) {
                stnId = this.stations[stnId].children[0];
                res.push(stnId);
            }
            res.shift();
        }
        return res;
    }
    addStn(prep, stnId, loc, end) {
        let newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        while (Object.keys(this.stations).includes(newId)) {
            newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        }
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        let newInfo = {};
        if (prep == 'before') {
            if (loc == 'centre') {
                newInfo.parents = this.stations[stnId].parents;
                if (this._stnIndegree(stnId) == 0 && this.stations[stnId].y != this.y) {
                    newInfo.children = this.leftDests;
                }
                else if (this.stations[stnId].y != this.y) {
                    // pivot on branch
                    newInfo.children = this.stations[this.stations[stnId].parents[0]].children;
                    newInfo.branch = {
                        left: [],
                        right: this.stations[newInfo.parents[0]].branch.right
                    };
                    this.stations[newInfo.parents[0]].branch.right = [];
                    param.stn_list[newInfo.parents[0]].branch.right = [];
                }
                else {
                    // pivot on main
                    newInfo.children = [stnId];
                    newInfo.branch = {
                        left: this.stations[stnId].branch.left,
                        right: []
                    };
                    this.stations[stnId].branch.left = [];
                    param.stn_list[stnId].branch.left = [];
                }
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[0]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(0, 1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[0] = newId;
                    param.stn_list[stnId].parents[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children[0] = newId;
                        param.stn_list[par].children[0] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[1]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[1] = newId;
                    param.stn_list[stnId].parents[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children[1] = newId;
                        param.stn_list[par].children[1] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left[1] = newId;
                param.stn_list[stnId].branch.left[1] = newId;
                this.stations[end].branch.right[1] = newId;
                param.stn_list[end].branch.right[1] = newId;
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.unshift(newId);
                param.stn_list[end].children.unshift(newId);
                this.stations[stnId].parents.unshift(newId);
                param.stn_list[stnId].parents.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left[1] = newId;
                param.stn_list[stnId].branch.left[1] = newId;
                this.stations[end].branch.right[1] = newId;
                param.stn_list[end].branch.right[1] = newId;
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.push(newId);
                param.stn_list[end].children.push(newId);
                this.stations[stnId].parents.push(newId);
                param.stn_list[stnId].parents.push(newId);
            }
        }
        else {
            if (loc == 'centre') {
                newInfo.children = this.stations[stnId].children;
                if (this._stnOutdegree(stnId) == 0 && this.stations[stnId].y != this.y) {
                    newInfo.parents = this.rightDests;
                }
                else if (this.stations[stnId].y != this.y) {
                    // pivot on branch
                    newInfo.parents = this.stations[this.stations[stnId].children[0]].parents;
                    newInfo.branch = {
                        left: this.stations[newInfo.children[0]].branch.left,
                        right: []
                    };
                    this.stations[newInfo.children[0]].branch.left = [];
                    param.stn_list[newInfo.children[0]].branch.left = [];
                }
                else {
                    // pivot on main
                    newInfo.parents = [stnId];
                    newInfo.branch = {
                        left: [],
                        right: this.stations[stnId].branch.right
                    };
                    this.stations[stnId].branch.right = [];
                    param.stn_list[stnId].branch.right = [];
                }
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[0]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(0, 1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[0] = newId;
                    param.stn_list[stnId].children[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents[0] = newId;
                        param.stn_list[child].parents[0] = newId;
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[1]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[1] = newId;
                    param.stn_list[stnId].children[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        if (this._stnIndegree(child) === 1) {
                            this.stations[child].parents[0] = newId;
                            param.stn_list[child].parents[0] = newId;
                        }
                        else {
                            this.stations[child].parents[1] = newId;
                            param.stn_list[child].parents[1] = newId;
                        }
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.unshift(newId);
                param.stn_list[end].parents.unshift(newId);
                this.stations[stnId].children.unshift(newId);
                param.stn_list[stnId].children.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.push(newId);
                param.stn_list[end].parents.push(newId);
                this.stations[stnId].children.push(newId);
                param.stn_list[stnId].children.push(newId);
            }
        }
        newInfo.name = [`車站${newId.toUpperCase()}`, `Station ${newId.toUpperCase()}`];
        newInfo.change_type = 'none';
        newInfo.num = '00';
        newInfo.interchange = [[]];
        param.stn_list[newId] = newInfo;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[newId] = this._initStnInstance(newId, newInfo);
        this.stations[stnId] = this._initStnInstance(stnId, Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId]);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
            stnInstance.namePos = (this._txtFlip) ? Number(!this._stnNamePos(stnId)) : this._stnNamePos(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
        return [newId, newInfo];
    }
    reverseStns() {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (stnId === 'linestart') {
                param.stn_list['lineend'].parents = stnInstance.children.reverse();
                param.stn_list['lineend'].branch = {
                    left: stnInstance.branch.right,
                    right: []
                };
            }
            else if (stnId === 'lineend') {
                param.stn_list['linestart'].children = stnInstance.parents.reverse();
                param.stn_list['linestart'].branch = {
                    left: [],
                    right: stnInstance.branch.left
                };
            }
            else {
                var tmpArr = stnInstance.children.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].children = stnInstance.parents.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].parents = tmpArr;
                param.stn_list[stnId].branch.left = stnInstance.branch.right;
                param.stn_list[stnId].branch.right = stnInstance.branch.left;
            }
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        location.reload(true);
    }
    updateBranchType(stnId, direction, type) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][0] === type) {
            return;
        }
        this.stations[stnId].branch[direc][0] = type;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].branch[direc][0] = type;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    updateBranchFirst(stnId, direction, first) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][1] === first) {
            return false;
        }
        let branchEndId = first;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            let branchFirstIdx = this.stations[stnId].children.indexOf(first);
            this.stations[stnId].branch.right[1] = param.stn_list[stnId].branch.right[1] = first;
            this.stations[branchEndId].branch.left[1] = param.stn_list[branchEndId].branch.left[1] = this.stations[branchEndId].parents[branchFirstIdx];
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            let branchFirstIdx = this.stations[stnId].parents.indexOf(first);
            this.stations[stnId].branch.left[1] = param.stn_list[stnId].branch.left[1] = first;
            this.stations[branchEndId].branch.right[1] = param.stn_list[branchEndId].branch.right[1] = this.stations[branchEndId].children[branchFirstIdx];
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
        return true;
    }
    updateBranchPos(stnId, direction, pos) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (direc === 'right') {
            if (this.stations[stnId].children.indexOf(this.stations[stnId].branch.right[1]) === pos) {
                return;
            }
        }
        else {
            if (this.stations[stnId].parents.indexOf(this.stations[stnId].branch.left[1]) === pos) {
                return;
            }
        }
        let branchEndId = this.stations[stnId].branch[direc][1];
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            this.stations[stnId].children.reverse();
            param.stn_list[stnId].children.reverse();
            this.stations[branchEndId].parents.reverse();
            param.stn_list[branchEndId].parents.reverse();
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            this.stations[stnId].parents.reverse();
            param.stn_list[stnId].parents.reverse();
            this.stations[branchEndId].children.reverse();
            param.stn_list[branchEndId].children.reverse();
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    static clearSVG() {
        $('#stn_icons, #line_main, #line_pass').empty();
    }
    static initSVG(line) {
        line.drawSVGFrame();
        line.showFrameOuter();
        line.drawStns();
        line.fillThemeColour();
        line.drawLine();
        line.drawStrip();
        line.drawDestInfo();
        line.loadFonts();
        line.updateStnNameBg();
    }
    get branches() {
        var stack = ['linestart'];
        var branches = [[]];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount][0] || null;
            var curBranch = [curId];
            if (prevId) {
                curBranch.unshift(prevId);
            }
            while (true) {
                if (curId == 'lineend') {
                    break;
                }
                if (curId != 'linestart' && prevId == this.stations[curId].branch.left[1]) {
                    // branch ends
                    break;
                }
                else {
                    prevId = curId;
                    var children = this.stations[prevId].children;
                    switch (children.length) {
                        case 1:
                            curId = children[0];
                            break;
                        case 2:
                            branches.push([prevId]);
                            if (prevId == 'linestart') {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            else {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            // var branchNextId = getParams().stn_list[prevId].branch.right[1];
                            stack.push(branchNextId);
                            curId = children.filter(stnId => stnId != branchNextId)[0];
                            break;
                    }
                    curBranch.push(curId);
                }
            }
            branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches.map(branch => {
            return branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));
        });
    }
    get routes() {
        var stack = ['linestart'];
        var branches = [['linestart']];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount].slice().reverse()[0] || null;
            if (prevId && curId !== 'linestart') {
                branches[branchCount].push(curId);
            }
            else {
                branches[branchCount] = [curId];
            }
            while (curId !== 'lineend') {
                prevId = curId;
                var children = this.stations[prevId].children;
                switch (children.length) {
                    case 1:
                        curId = children[0];
                        break;
                    case 2:
                        var branchNextId = this.stations[prevId].branch.right[1];
                        // if (branchCount === 0) {
                        if (this.stations[prevId].branch.right[0] === 'through') {
                            branches.push(branches[branchCount].slice());
                            stack.push(branchNextId);
                        }
                        else {
                            if (branchCount === 0) {
                                branches.push([prevId]);
                                stack.push(branchNextId);
                            }
                            // branches.push([prevId]);
                        }
                        // stack.push(branchNextId);
                        // }
                        curId = children.filter(stnId => stnId != branchNextId)[0];
                        break;
                }
                branches[branchCount].push(curId);
                if (prevId === this.stations[curId].branch.left[1] && this.stations[curId].branch.left[0] === 'nonthrough') {
                    break;
                }
            }
            // branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches;
    }
}


/***/ }),

/***/ "./src/Line/init.ts":
/*!**************************!*\
  !*** ./src/Line/init.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line */ "./src/Line/Line.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const getLineClass = (style) => __awaiter(void 0, void 0, void 0, function* () {
    switch (style) {
        case 'mtr':
            return Promise.resolve(_Line__WEBPACK_IMPORTED_MODULE_2__["RMGLine"]);
        // lazy loading
        case 'gzmtr':
            return __webpack_require__.e(/*! import() | LineGZ */ "LineGZ").then(__webpack_require__.bind(null, /*! ./LineGZ */ "./src/Line/LineGZ.ts"))
                .then(({ RMGLineGZ }) => RMGLineGZ);
        // any other styles
    }
});
/* harmony default export */ __webpack_exports__["default"] = (function () {
    const loadLine = (param) => __awaiter(this, void 0, void 0, function* () {
        let lineClass = yield getLineClass(window.urlParams.get('style'));
        window.myLine = yield new lineClass(param);
        lineClass.initSVG(window.myLine);
    });
    if (localStorage.rmgParam != null) {
        try {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        }
        catch (err) {
            let initErrDiag = _material_dialog__WEBPACK_IMPORTED_MODULE_1__["MDCDialog"].attachTo($('#init_err_diag')[0]);
            $('#init_err_diag')
                .find('#err_stack')
                .html(err + '<br>' + err.stack.replace(/\n/g, '<br>'));
            initErrDiag.open();
            console.error(err);
        }
    }
    else {
        $.getJSON(`templates/blank.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        });
    }
});


/***/ }),

/***/ "./src/PageInitialiser/design.ts":
/*!***************************************!*\
  !*** ./src/PageInitialiser/design.ts ***!
  \***************************************/
/*! exports provided: common, mtr, gzmtr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mtr", function() { return mtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzmtr", function() { return gzmtr; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/list */ "@material/list");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_list__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/select */ "@material/select");
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_select__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material/switch */ "@material/switch");
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_switch__WEBPACK_IMPORTED_MODULE_5__);






function common() {
    // mdc instances
    const designList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list')[0]);
    const [themeDialog, lineNameDialog] = ['#design_theme_diag', '#line_name_diag'].map(selector => _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($(selector)[0]));
    const [themeCitySelect, themeLineSelect] = ['#theme_city', '#theme_line'].map(selector => new _material_select__WEBPACK_IMPORTED_MODULE_3__["MDCSelect"]($(selector)[0]));
    // const themeCitySelect = new MDCSelect($('#theme_city')[0]);
    // const themeLineSelect = new MDCSelect($('#theme_line')[0]);
    const [lineNameZHTextField, lineNameENTextField] = ['#name_zh', '#name_en'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($('#line_name_diag').find(selector)[0]));
    const platformNumTextField = _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($('#platform_num')[0]);
    // helper functions
    const getDirectionText = (direc) => {
        return $('#design_list')
            .find(`li#direc p#${direc}`)
            .text();
    };
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        $('#design_list')
            .find('li#name .mdc-list-item__secondary-text')
            .text(param.line_name.join());
        lineNameZHTextField.value = param.line_name[0];
        lineNameENTextField.value = param.line_name[1];
        $('#design_list')
            .find('li#direc .mdc-list-item__secondary-text')
            .text(getDirectionText(param.direction));
        platformNumTextField.value = param.platform_num;
    });
    $.getJSON('data/city_list.json', (data) => {
        let lang = window.urlParams.get('lang');
        data.forEach(c => {
            $('#theme_city__selection').append($('<li>', {
                class: 'mdc-list-item',
                'data-value': c.id
            }).text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["countryCode2Emoji"])(c.country) + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(c.name, lang)));
        });
        var [themeCity] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().theme;
        var cityIdx = $(`#theme_city__selection > [data-value="${themeCity}"]`).index();
        themeCitySelect.selectedIndex = cityIdx;
    });
    // add event listeners
    designList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                themeDialog.open();
                break;
            case 1:
                lineNameDialog.open();
                break;
            case 2:
                if (Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().direction == 'r') {
                    console.log('right to left');
                    window.myLine.direction = 'l';
                    $('#design_list').find('li#direc .mdc-list-item__secondary-text').text(getDirectionText('l'));
                }
                else {
                    console.log('left to right');
                    window.myLine.direction = 'r';
                    $('#design_list').find('li#direc .mdc-list-item__secondary-text').text(getDirectionText('r'));
                }
                break;
            case 4:
                window.myLine.reverseStns();
                break;
        }
    });
    themeDialog.listen('MDCDialog:opened', () => {
        [themeCitySelect, themeLineSelect].map(select => select.layout());
    });
    themeCitySelect.listen("MDCSelect:change", (event) => {
        let city = event.detail.value;
        $('#theme_line__selection').empty();
        $.getJSON(`data/${city}.json`, (data) => {
            var lang = window.urlParams.get('lang');
            data.forEach(l => {
                $('#theme_line__selection').append($('<li>', {
                    class: 'mdc-list-item',
                    'data-value': l.id
                }).append($('<span>').css({
                    background: l.colour,
                    color: l.fg || '#fff'
                }).text('\u00a0' + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(l.name, lang) + '\u00a0')));
            });
            var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
            param.theme[0] = city;
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
            var lineIdx = $(`#theme_line__selection > [data-value="${param.theme[1]}"]`).index();
            themeLineSelect.selectedIndex = lineIdx == -1 ? 0 : lineIdx;
        });
    });
    themeLineSelect.listen("MDCSelect:change", (event) => {
        let lineIdx = event.detail.index;
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.theme[1] = event.detail.value;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        window.myLine.themeLine = event.detail.value;
        window.myLine.themeColour = ['background-color', 'color']
            .map(prop => $('#theme_line__selection span').eq(lineIdx).css(prop))
            .map(_utils__WEBPACK_IMPORTED_MODULE_0__["rgb2Hex"]);
        $('#design_list')
            .find('li#theme .mdc-list-item__secondary-text')
            .html($('#theme_city__selection li').eq(themeCitySelect.selectedIndex).text() +
            ' ' +
            $('#theme_line__selection li').eq(lineIdx).html().trim());
    });
    lineNameDialog.listen('MDCDialog:opened', event => {
        [lineNameZHTextField, lineNameENTextField].map(textfield => textfield.layout());
    });
    $('#line_name_diag')
        .find('.mdc-text-field')
        .on('input', () => {
        let lineNames = [lineNameZHTextField, lineNameENTextField].map(textfield => textfield.value);
        window.myLine.lineNames = lineNames;
        $('#design_list')
            .find('li#name .mdc-list-item__secondary-text')
            .text(lineNames.join());
    });
    $(platformNumTextField.root_).find('input')
        .on('input', event => window.myLine.platformNum = event.target.value);
}
function mtr() {
    // mdc instances
    const designListMTRList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list_mtr')[0]);
    const charDialog = _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($('#design_char_diag')[0]);
    const legacySwitch = new _material_switch__WEBPACK_IMPORTED_MODULE_5__["MDCSwitch"]($('#legacy')[0]);
    // helper functions
    const getCharText = (char) => {
        return $('#design_char_diag')
            .find('li')
            .filter((_, el) => el.dataset.mdcDialogAction === char)
            .find('span')
            .text();
    };
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        $('#design_list_mtr')
            .find('li#char .mdc-list-item__secondary-text')
            .text(getCharText(param.char_form));
        legacySwitch.checked = param.dest_legacy;
    });
    // add event listeners
    designListMTRList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                window.myLine.txtFlip = !Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().txt_flip;
                break;
            case 1:
                charDialog.open();
                break;
        }
    });
    charDialog.listen('MDCDialog:closed', (event) => {
        let char = event.detail.action;
        if (char == 'close') {
            return;
        }
        window.myLine.charForm = char;
        $('#design_list_mtr')
            .find('li#char .mdc-list-item__secondary-text')
            .text(getCharText(char));
    });
    $(legacySwitch.root_).find('input')
        .on('change', event => window.myLine.destLegacy = event.target.checked);
}
function gzmtr() {
    // mdc instances
    const designListGZMTRList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list_gzmtr')[0]);
    const panelTypeDialog = _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($('#panel_type_diag')[0]);
    const [psdNumTextField, lineNumTextField] = ['#psd_num', '#line_num'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($(selector)[0]));
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        psdNumTextField.value = param.psd_num;
        lineNumTextField.value = param.line_num;
    });
    // add event listeners
    designListGZMTRList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 1:
                panelTypeDialog.open();
                break;
        }
    });
    $(lineNumTextField.root_).find('input')
        .on('input', event => window.myLine.lineNum = event.target.value);
    $(psdNumTextField.root_).find('input')
        .on('input', event => window.myLine.psdNum = event.target.value);
    panelTypeDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action === 'close') {
            return;
        }
        window.myLine.infoPanelType = event.detail.action;
    });
}


/***/ }),

/***/ "./src/PageInitialiser/info.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/info.ts ***!
  \*************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
function common() {
    $('#panel_info .mdc-card__actions #report').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator/issues', '_blank');
    });
    $('#panel_info .mdc-card__action-icons [title="Star"]').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator', '_blank');
    });
    $('#panel_info .mdc-card__action-icons [title="Fork"]').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator/fork', '_blank');
    });
}


/***/ }),

/***/ "./src/PageInitialiser/init.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/init.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ "./src/PageInitialiser/layout.ts");
/* harmony import */ var _design__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./design */ "./src/PageInitialiser/design.ts");
/* harmony import */ var _stations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stations */ "./src/PageInitialiser/stations.ts");
/* harmony import */ var _info__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./info */ "./src/PageInitialiser/info.ts");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/tab-bar */ "@material/tab-bar");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_tab_bar__WEBPACK_IMPORTED_MODULE_4__);





/* harmony default export */ __webpack_exports__["default"] = (function () {
    let firstInit = [false, true, true, true, true];
    window.sliders = [];
    _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__["MDCTabBar"].attachTo($('#panels .mdc-tab-bar')[0]).listen('MDCTabBar:activated', (event) => {
        $('.panel--active').removeClass('panel--active');
        $('.panel').eq(event.detail.index).addClass('panel--active');
        if (event.detail.index == 1 && firstInit[1]) {
            _layout__WEBPACK_IMPORTED_MODULE_0__["common"]();
            if (window.urlParams.get('style') === 'gzmtr') {
                _layout__WEBPACK_IMPORTED_MODULE_0__["gzmtr"]();
            }
            firstInit[1] = false;
        }
        if (event.detail.index === 1) {
            window.sliders.forEach(slider => slider.layout());
        }
        if (event.detail.index == 2 && firstInit[2]) {
            _design__WEBPACK_IMPORTED_MODULE_1__["common"]();
            switch (window.urlParams.get('style')) {
                case 'mtr':
                    _design__WEBPACK_IMPORTED_MODULE_1__["mtr"]();
                    break;
                case 'gzmtr':
                    _design__WEBPACK_IMPORTED_MODULE_1__["gzmtr"]();
                    break;
            }
            firstInit[2] = false;
        }
        if (event.detail.index == 3 && firstInit[3]) {
            console.log('init again');
            _stations__WEBPACK_IMPORTED_MODULE_2__["common"]();
            firstInit[3] = false;
        }
        if (event.detail.index == 4 && firstInit[4]) {
            _info__WEBPACK_IMPORTED_MODULE_3__["common"]();
            firstInit[4] = false;
        }
    });
});


/***/ }),

/***/ "./src/PageInitialiser/layout.ts":
/*!***************************************!*\
  !*** ./src/PageInitialiser/layout.ts ***!
  \***************************************/
/*! exports provided: common, gzmtr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzmtr", function() { return gzmtr; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_slider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/slider */ "@material/slider");
/* harmony import */ var _material_slider__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_slider__WEBPACK_IMPORTED_MODULE_2__);



function common() {
    // mdc instances
    const [svgDestWidthTextField, svgWidthTextField] = ['#svg_dest_width', '#svg_width'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_1__["MDCTextField"].attachTo($(selector)[0]));
    const [branchSpacingSlider, yPcSlider, paddingSlider] = ['#branch_spacing', '#y_pc', '#padding'].map(selector => _material_slider__WEBPACK_IMPORTED_MODULE_2__["MDCSlider"].attachTo($(selector)[0]));
    window.sliders.push(branchSpacingSlider, yPcSlider, paddingSlider);
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        svgDestWidthTextField.value = param.svg_dest_width;
        svgWidthTextField.value = param.svg_width;
        yPcSlider.value = param.y_pc;
        branchSpacingSlider.value = param.branch_spacing;
        paddingSlider.value = param.padding;
    });
    // add event listeners
    $(svgDestWidthTextField.root_).find('input')
        .on('input', event => window.myLine.svgDestWidth = Number(event.target.value));
    $(svgWidthTextField.root_).find('input')
        .on('input', event => window.myLine.svgWidth = Number(event.target.value));
    branchSpacingSlider.listen('MDCSlider:input', event => {
        window.myLine.branchSpacing = branchSpacingSlider.value;
    });
    yPcSlider.listen('MDCSlider:input', event => {
        window.myLine.yPc = Number(yPcSlider.value);
    });
    paddingSlider.listen('MDCSlider:input', event => {
        window.myLine.padding = paddingSlider.value;
    });
}
function gzmtr() {
    // mdc instances
    const [directionGZXSlider, directionGZYSlider] = ['#direction_gz_x', '#direction_gz_y']
        .map(selector => _material_slider__WEBPACK_IMPORTED_MODULE_2__["MDCSlider"].attachTo($(selector)[0]));
    window.sliders.push(directionGZXSlider, directionGZYSlider);
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        directionGZXSlider.value = param.direction_gz_x;
        directionGZYSlider.value = param.direction_gz_y;
    });
    // add event listeners
    directionGZXSlider.listen('MDCSlider:input', event => {
        window.myLine.directionGZX = Number(directionGZXSlider.value);
    });
    directionGZYSlider.listen('MDCSlider:input', event => {
        window.myLine.directionGZY = Number(directionGZYSlider.value);
    });
}


/***/ }),

/***/ "./src/PageInitialiser/save.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/save.ts ***!
  \*************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Line_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Line/Line */ "./src/Line/Line.ts");
/* harmony import */ var _material_auto_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/auto-init */ "./node_modules/@material/auto-init/index.js");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/list */ "@material/list");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_list__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material/ripple */ "@material/ripple");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ripple__WEBPACK_IMPORTED_MODULE_5__);






function common() {
    // mdc intances 
    const [templateDialog, importDialog, exportDialog, previewDialog, styleDialog, langDialog] = ['#template_diag', '#import_diag', '#export_diag', '#preview_diag', '#style_diag', '#lang_diag']
        .map(selector => _material_dialog__WEBPACK_IMPORTED_MODULE_3__["MDCDialog"].attachTo($(selector)[0]));
    const [saveList0, saveList1] = $('#panel_save .mdc-list').map((_, el) => _material_list__WEBPACK_IMPORTED_MODULE_4__["MDCList"].attachTo(el)).get();
    saveList0.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                templateDialog.open();
                break;
            case 1:
                $('#upload_file').click();
                break;
            case 2:
                // var link = document.createElement('a');
                // var data = new Blob([localStorage.rmgParam], {type: 'application/json;charset=utf-8'});
                // var url = window.URL.createObjectURL(data);
                // link.href = url;
                // link.download = 'rmg_config.json';
                // link.click();
                // URL.revokeObjectURL(url);
                // break;
                var link = $('<a>', {
                    href: 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(localStorage.rmgParam))),
                    download: 'rmg_param.json'
                });
                link[0].click();
                break;
            case 3:
                exportDialog.open();
                break;
        }
    });
    $('#panel_save .mdc-list:nth-child(2) li:first-child span:nth-child(2) span:last-child')
        .attr('trans-tag', $(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).attr('trans-tag'))
        .text($(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).text());
    $('#panel_save .mdc-list:nth-child(2) li:nth-child(2) span:nth-child(2) span:last-child')
        .text($(`#lang_diag [data-mdc-dialog-action="${window.urlParams.get('lang')}"] span`).text());
    saveList1.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                styleDialog.open();
                break;
            case 1:
                langDialog.open();
                break;
        }
    });
    $.getJSON('templates/template_list.json', data => {
        var lang = window.urlParams.get('lang');
        data.forEach(d => {
            $('#template_diag ul').append($('<li>', {
                class: "mdc-list-item",
                'data-mdc-dialog-action': d.filename,
                'data-mdc-auto-init': 'MDCRipple'
            }).append($('<span>', { class: "mdc-list-item__text" }).text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(d.desc, lang))));
        });
        $('#template_diag li:first-child').attr('tabindex', 0);
        // autoInit();
        _material_auto_init__WEBPACK_IMPORTED_MODULE_2__["default"].register('MDCRipple', _material_ripple__WEBPACK_IMPORTED_MODULE_5__["MDCRipple"]);
    });
    templateDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        $.getJSON(`templates/${event.detail.action}.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            location.reload(true);
        });
    });
    exportDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
                break;
            case 'svg1':
                $('#preview_diag').attr('for', 'destination');
                previewDialog.open();
                break;
            case 'svg2':
                $('#preview_diag').attr('for', 'railmap');
                previewDialog.open();
                break;
        }
    });
    $(window).on('resize', _ => {
        resizeSVGPreview();
        // $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width()-32}px;`);
    });
    const resizeSVGPreview = () => {
        var svgId = $('preview_diag').attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $('#preview_diag')
            .find('svg')
            .attr({
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        });
        $('#preview_diag')
            .find('.mdc-dialog__surface')
            .attr('style', `max-width:${MAX_WIDTH + 50}px;`);
    };
    previewDialog.listen('MDCDialog:opened', event => {
        var svgId = $(event.target).attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width() - 32}px;`);
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $(event.target).find('.mdc-dialog__content')
            .append($('#' + $(event.target).attr('for')).clone().attr({
            style: 'all:initial;',
            viewBox: `0 0 ${thisSVGWidth} ${thisSVGHeight}`,
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        }));
        $(event.target).find('svg [style="display: none;"]').remove();
    });
    previewDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action === 'close') {
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'png') {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["test"])($(event.target).removeAttr('for').find('svg'));
            $(event.target).find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'svg') {
            var link = document.createElement('a');
            var svgContent = $(event.target).find('.mdc-dialog__content svg').prepend($('style#svg_share').clone());
            link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgContent[0].outerHTML)));
            link.download = 'rmg_export.svg';
            link.click();
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
        }
    });
    let importedFile;
    $('#upload_file')
        .on('change', event => {
        console.log(event.target.files[0]);
        let reader = new FileReader();
        reader.onload = function (e) {
            console.log(e.target);
            importedFile = JSON.parse(e.target.result);
            $('#import_diag')
                .find('.mdc-dialog__content')
                .html(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["describeParams"])(importedFile));
            importDialog.open();
        };
        reader.readAsText(event.target.files[0]);
    });
    importDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            $('#upload_file')[0].value = '';
            return;
        }
        _Line_Line__WEBPACK_IMPORTED_MODULE_1__["RMGLine"].clearSVG();
        localStorage.rmgParam = JSON.stringify(importedFile);
        location.reload(true);
    });
    styleDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
            case window.urlParams.get('style'):
                return;
            default:
                window.urlParams.set('style', event.detail.action);
                window.location.href = '?' + window.urlParams.toString();
        }
    });
    langDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var nextLang = event.detail.action;
        localStorage.rmgLang = nextLang;
        if (nextLang == window.urlParams.get('lang')) {
            return;
        }
        else {
            window.urlParams.set('lang', nextLang);
            window.location.href = '?' + window.urlParams.toString();
        }
    });
}


/***/ }),

/***/ "./src/PageInitialiser/stations.ts":
/*!*****************************************!*\
  !*** ./src/PageInitialiser/stations.ts ***!
  \*****************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/select */ "@material/select");
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_select__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/tab-bar */ "@material/tab-bar");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_tab_bar__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_icon_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material/icon-button */ "@material/icon-button");
/* harmony import */ var _material_icon_button__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_icon_button__WEBPACK_IMPORTED_MODULE_5__);







const getStationCard = (id, names, num) => {
    return $('<div>', {
        id: id,
        class: 'mdc-card mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-2-phone station-card'
    })
        .append($('<div>', { class: 'mdc-card__primary-action' })
        .append($('<div>', { class: 'mdc-card__media mdc-card__media--16-9' }))
        .append($('<div>', { class: 'mdc-card__media-content station-card__content' })
        .html(names.join('<br>'))
        .prepend($('<span>')
        .css('display', window.urlParams.get('style') === 'gzmtr' ? 'inline' : 'none')
        .text(num + '\u00a0'))))
        .append($('<div>', { class: 'mdc-card__actions' })
        .append($('<div>', { class: 'mdc-card__action-icons' })
        .append($('<button>', {
        title: 'Set As Current',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('my_location'))
        .append($('<button>', {
        title: 'Interchange',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('edit'))
        .append($('<button>', {
        title: 'Remove',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('delete_forever'))));
};
function common() {
    // Duplicate element
    var intNameEl = $('#stn_transfer_diag .mdc-layout-grid__inner #int_name_zh,#int_name_en').slice(0, 2).clone();
    intNameEl.find('.mdc-text-field').removeAttr('data-mdc-auto-init-state'); // to be removed
    $('div#int_line').slice(1, 3).after(intNameEl);
    // mdc instances
    const [stnAddDialog, stnModifyDialog, stnTransferDialog, stnDeleteDialog, stnDeleteErrDialog] = ['#stn_add_diag', '#stn_modify_diag', '#stn_transfer_diag', '#stn_delete_diag', '#stn_delete_err']
        .map(selector => new _material_dialog__WEBPACK_IMPORTED_MODULE_1__["MDCDialog"]($(selector)[0]));
    const [stnAddPrepSelect, stnAddPivotSelect, stnAddLocSelect, stnAddEndSelect] = ['#prep', '#pivot', '#loc', '#end'].map(selector => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($('#stn_add_diag').find(selector)[0]));
    const stnModifyNameFields = ['#name_zh', '#name_en'].map(selector => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_modify_diag').find(selector)[0]));
    const stnModifyNumField = new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_modify_diag #stn_num')[0]);
    const stnTransferTabBar = new _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__["MDCTabBar"]($('#stn_transfer_diag .mdc-tab-bar')[0]);
    const changeTypeSelect = new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($('#change_type')[0]);
    const intCitySelects = $('#int_city .mdc-select').map((_, el) => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"](el)).get();
    const intLineSelects = $('#int_line .mdc-select').map((_, el) => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"](el)).get();
    const intNameFields = ['zh', 'en']
        .map(lang => $(`div#int_name_${lang}`).find('.mdc-text-field').map((_, el) => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"](el)).get());
    const stnOSINameFields = ['zh', 'en'].map(lang => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_transfer_diag').find(`#osi_name_${lang}`)[0]));
    const [tickDirecToggle, paidAreaToggle] = ['#tick_direc', '#paid_area'].map(selector => new _material_icon_button__WEBPACK_IMPORTED_MODULE_5__["MDCIconButtonToggle"]($('#stn_transfer_diag').find(selector)[0]));
    const [throughSelects, firstSelects, posSelects] = ['through', 'first', 'pos']
        .map(selector => ['left', 'right'].map(direc => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($(`#${direc}_${selector}`)[0])));
    var stnList = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list;
    window.myLine.tpo.forEach(stnId => {
        $('#panel_stations .mdc-layout-grid__inner:first').append(getStationCard(stnId, stnList[stnId].name, stnList[stnId].num));
        $('#pivot__selection').append($('<li>', { 'data-value': stnId }).addClass('mdc-list-item').text(stnList[stnId].name.join()));
    });
    $('#panel_stations .mdc-card__primary-action').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        if (stnId == 'add_stn') {
            return;
        }
        $('#stn_modify_diag').attr('for', stnId);
        stnModifyDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Add"]').on('click', event => {
        stnAddDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Set As Current"]').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        window.myLine.currentStnId = stnId;
    });
    $('#panel_stations .mdc-card__action-icons > [title="Interchange"]').on('click', event => {
        $('#stn_transfer_diag').attr('for', event.target.closest('.mdc-card').id);
        stnTransferDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Remove"]').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        $('#stn_delete_diag').attr('for', stnId);
        stnDeleteDialog.open();
    });
    // Addition
    stnAddDialog.listen('MDCDialog:opening', () => {
        stnAddPivotSelect.selectedIndex = 0;
    });
    stnAddDialog.listen('MDCDialog:opened', () => {
        [stnAddPrepSelect, stnAddPivotSelect, stnAddLocSelect].forEach(select => select.layout());
    });
    stnAddDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var prep = stnAddPrepSelect.value;
        var stnId = stnAddPivotSelect.value;
        var loc = stnAddLocSelect.value;
        var end = stnAddEndSelect.value;
        var [newId, newInfo] = window.myLine.addStn(prep, stnId, loc, end);
        console.log(prep, stnId, loc, end);
        // _genStnList();
        var prevId = window.myLine.tpo[window.myLine.tpo.indexOf(newId) - 1] || 'add_stn';
        $(`#panel_stations .mdc-layout-grid__inner:first #${prevId}`).after(getStationCard(newId, newInfo.name, newInfo.num));
        // Add event listeners
        $(`#panel_stations #${newId} .mdc-card__primary-action`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            if (stnId == 'add_stn') {
                return;
            }
            $('#stn_modify_diag').attr('for', stnId);
            stnModifyDialog.open();
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Set As Current"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            window.myLine.currentStnId = stnId;
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Interchange"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            $('#stn_transfer_diag').attr('for', stnId);
            stnTransferDialog.open();
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Remove"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            $('#stn_delete_diag').attr('for', stnId);
            stnDeleteDialog.open();
        });
        var listElem = $('<li>', {
            'data-value': newId, 'class': 'mdc-list-item'
        }).text(newInfo.name.join(' - '));
        if (prevId == 'add_stn') {
            $('#pivot__selection').prepend(listElem);
        }
        else {
            $(`#pivot__selection [data-value="${prevId}"`).after(listElem);
        }
        // Trigger station name modification
        $('#stn_modify_diag').attr('for', newId);
        stnModifyDialog.open();
    });
    stnAddPrepSelect.listen('MDCSelect:change', event => {
        $('#stn_add_diag #pivot')[0].dispatchEvent(new Event('MDCSelect:change'));
    });
    stnAddPivotSelect.listen('MDCSelect:change', event => {
        var prep = stnAddPrepSelect.value;
        var stnId = stnAddPivotSelect.value;
        var stnList = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list;
        for (let [idx, state] of window.myLine.newStnPossibleLoc(prep, stnId).entries()) {
            if (state === 1 || state.length) {
                $('#loc__selection li').eq(idx).show();
                if (idx >= 3) {
                    // newupper or newlower
                    $('#end__selection').empty();
                    state.forEach(stnId => {
                        $('#end__selection').append($('<li>', { class: 'mdc-list-item', 'data-value': stnId }).text(stnList[stnId].name.join(' - ')));
                    });
                }
            }
            else {
                $('#loc__selection li').eq(idx).hide();
            }
        }
        // stnAddLocSelect.value = $('#loc__selection li:not([style="display: none;"]):first').attr('data-value');
        stnAddLocSelect.value = Array
            .from(document.querySelectorAll('#loc__selection li'))
            .filter(el => el.style.display !== 'none')[0]
            .dataset.value;
    });
    stnAddLocSelect.listen('MDCSelect:change', (event) => {
        if (['newupper', 'newlower'].includes(event.detail.value)) {
            // $('#stn_add_diag #new_branch').show();
            $('#stn_add_diag [new-branch]').show();
            stnAddEndSelect.selectedIndex = 0;
        }
        else {
            // $('#stn_add_diag #new_branch').hide();
            $('#stn_add_diag [new-branch]').hide();
        }
    });
    // Modification (Name)
    stnModifyDialog.listen('MDCDialog:opening', event => {
        var stnId = $(event.target).attr('for');
        Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list)
            .then(stnList => {
            stnModifyNameFields.forEach((textfield, i) => textfield.value = stnList[stnId].name[i]);
            stnModifyNumField.value = stnList[stnId].num;
        });
    });
    stnModifyDialog.listen('MDCDialog:opened', () => {
        stnModifyNameFields.map(textfield => textfield.layout());
        stnModifyNumField.layout();
    });
    $('#stn_modify_diag').find('#name_zh, #name_en, #stn_num').on('input', () => {
        let names = stnModifyNameFields.map(textfield => textfield.value);
        var stnNum = stnModifyNumField.value;
        var stnId = $('#stn_modify_diag').attr('for');
        window.myLine.updateStnName(stnId, names, stnNum);
        $(`#panel_stations .mdc-layout-grid__inner:first #${stnId} .mdc-card__media-content`)
            .html(names.join('<br>'))
            .prepend($('<span>', { style: (window.urlParams.get('style') == 'gzmtr' ? '' : 'display:none;') }).text(stnNum + ' '));
        $(`li[data-value="${stnId}`).text(names.join());
    });
    // Modification (Interchange)
    const focusInterchange = () => {
        changeTypeSelect.layout();
        intCitySelects.forEach(select => select.layout());
        intLineSelects.forEach(select => select.layout());
        intNameFields.flat().forEach(textfield => textfield.layout());
        stnOSINameFields.forEach(textfield => textfield.layout());
    };
    const focusBranch = () => {
        [...throughSelects, ...firstSelects, ...posSelects]
            .map(select => select.layout());
    };
    const initBranch = (stnInfo) => {
        // through type
        ['left', 'right'].forEach(direc => {
            let throughType = stnInfo.branch[direc][0];
            if (throughType) {
                throughSelects[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direc]].value = throughType;
                $(`#${direc}_through__selection [data-value="na"]`).hide();
                $(`#${direc}_through__selection [data-value="through"]`).show();
                $(`#${direc}_through__selection [data-value="nonthrough"]`).show();
                $(`[${direc}-first-group], [${direc}-pos-group]`).show();
            }
            else {
                throughSelects[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direc]].value = 'na';
                $(`#${direc}_through__selection [data-value="na"]`).show();
                $(`#${direc}_through__selection [data-value="through"]`).hide();
                $(`#${direc}_through__selection [data-value="nonthrough"]`).hide();
                $(`[${direc}-first-group], [${direc}-pos-group]`).hide();
            }
        });
        // first station
        $('#left_first__selection, #right_first__selection').empty();
        Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list)
            .then(stnList => {
            [0, 1].forEach(i => {
                stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][i]]
                    .forEach(ne => {
                    $(`#${_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][i]}_first__selection`)
                        .append($('<li>', { class: 'mdc-list-item', 'data-value': ne })
                        .text(stnList[ne].name.join()));
                });
            });
        })
            .then(() => {
            throughSelects.forEach((select, idx) => {
                firstSelects[idx].selectedIndex =
                    select.value !== 'na' ?
                        stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][idx]].indexOf(stnInfo.branch[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][idx]][1]) :
                        0;
            });
        });
        // swap position
        posSelects.forEach((select, i) => {
            select.selectedIndex = stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][i]].indexOf(stnInfo.branch[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][i]][1]);
        });
    };
    stnTransferTabBar.listen('MDCTabBar:activated', (event) => {
        switch (event.detail.index) {
            case 0:
                $('#panel_interchange').show();
                $('#panel_branch').hide();
                focusInterchange();
                break;
            case 1:
                $('#panel_interchange').hide();
                $('#panel_branch').show();
                focusBranch();
        }
    });
    // autoInit();
    $.getJSON('data/city_list.json', data => {
        var lang = window.urlParams.get('lang');
        data.forEach(c => {
            $('#int_city__selection.mdc-list').each((_, el) => {
                $(el).append($('<li>', { class: 'mdc-list-item', 'data-value': c.id })
                    .text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["countryCode2Emoji"])(c.country) + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(c.name, lang)));
            });
        });
    });
    function _showAllFields(n, show) {
        if (show) {
            $('#int_city, #int_line, #int_name_zh, #int_name_en').slice(n * 4, (n + 1) * 4).show();
            intCitySelects[n].layout();
            intLineSelects[n].layout();
            intNameFields.map(fields => fields[n].layout());
        }
        else {
            $('#int_city, #int_line, #int_name_zh, #int_name_en').slice(n * 4, (n + 1) * 4).hide();
        }
    }
    stnTransferDialog.listen('MDCDialog:opening', event => {
        var stnId = $(event.target).attr('for');
        var stnInfo = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId];
        let lineThemeCity = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().theme[0];
        changeTypeSelect.value = stnInfo.change_type.split('_')[0];
        if (stnInfo.change_type !== 'none') {
            var allInterchanges = stnInfo.interchange[0].concat(stnInfo.interchange[1] ? stnInfo.interchange[1].slice(1, stnInfo.interchange[1].length) : []);
            if (allInterchanges.length < 3) {
                allInterchanges.unshift([, , , , , ,]);
            }
            if (allInterchanges.length < 3) {
                allInterchanges.push([, , , , , ,]);
            }
            console.log(allInterchanges);
            allInterchanges.forEach((intInfo, idx) => {
                let cIdx = $('#int_city__selection.mdc-list').eq(0).find(`[data-value="${intInfo[0] || lineThemeCity}"]`).index();
                intCitySelects[idx].selectedIndex = cIdx;
                intNameFields.forEach((fields, i) => fields[idx].value = intInfo[4 + i] || '');
            });
        }
        else {
            let cIdx = $('#int_city__selection.mdc-list').eq(0).find(`[data-value="${lineThemeCity}"]`).index();
            intCitySelects.forEach(select => select.selectedIndex = cIdx);
            intNameFields.flat().forEach(textfield => textfield.value = '');
        }
        if (['none', 'int2'].includes(stnInfo.change_type.split('_')[0])) {
            tickDirecToggle.on = true;
        }
        else {
            tickDirecToggle.on = (stnInfo.change_type.slice(-1) == 'r');
        }
        if (stnInfo.change_type.substring(0, 3) == 'osi') {
            stnOSINameFields.forEach((textfield, i) => textfield.value = stnInfo.interchange[1][0][i]);
            paidAreaToggle.on = (stnInfo.change_type.split('_').reverse()[0][0] == 'p');
        }
        else {
            stnOSINameFields.forEach(textfield => textfield.value = '');
            paidAreaToggle.on = true;
        }
        // Branch
        initBranch(stnInfo);
    });
    stnTransferDialog.listen('MDCDialog:opened', event => {
        focusInterchange();
        focusBranch();
    });
    stnTransferDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        // var stnId = $('#panel_stations #selected_stn').attr('stn');
        var stnId = event.target.getAttribute('for');
        var type = changeTypeSelect.value;
        var tickDirec = tickDirecToggle.on ? 'r' : 'l';
        let osi = stnOSINameFields.map(textfield => textfield.value);
        var osiPaidArea = paidAreaToggle.on ? 'p' : 'u';
        var [intInfo0, intInfo1, intInfo2] = [0, 1, 2].map(idx => {
            return [intCitySelects[idx].value, intLineSelects[idx].value]
                .concat($('ul#int_line__selection').eq(idx).find('li span')
                .eq(intLineSelects[idx].selectedIndex)
                .attr('style').match(/#[\w\d]+/g), ...intNameFields.map(fields => fields[idx].value));
        });
        if (type == 'none') {
            window.myLine.updateStnTransfer(stnId, type);
        }
        else if (type == 'osi22') {
            window.myLine.updateStnTransfer(stnId, `${type}_${osiPaidArea}${tickDirec}`, [[intInfo0], [osi, intInfo1, intInfo2]]);
        }
        else {
            switch (type) {
                case 'int2':
                    // window.myLine.updateStnTransfer(stnId, type, [[], intInfo1, []]);
                    window.myLine.updateStnTransfer(stnId, type, [[intInfo1]]);
                    break;
                case 'osi11':
                    // window.myLine.updateStnTransfer(stnId, `${type}_${osiPaidArea}${tickDirec}`, [osi, intInfo1, []]);
                    window.myLine.updateStnTransfer(stnId, `${type}_${osiPaidArea}${tickDirec}`, [[], [osi, intInfo1]]);
                    break;
                default:
                    switch (type) {
                        case 'int3':
                            // window.myLine.updateStnTransfer(stnId, `${type}_${tickDirec}`, [[], intInfo1, intInfo2]);
                            window.myLine.updateStnTransfer(stnId, `${type}_${tickDirec}`, [[intInfo1, intInfo2]]);
                            break;
                        case 'osi12':
                            // window.myLine.updateStnTransfer(stnId, `${type}_${osiPaidArea}${tickDirec}`, [osi, intInfo1, intInfo2]);
                            window.myLine.updateStnTransfer(stnId, `${type}_${osiPaidArea}${tickDirec}`, [[], [osi, intInfo1, intInfo2]]);
                    }
            }
        }
    });
    changeTypeSelect.listen('MDCSelect:change', (event) => {
        if (event.detail.value == 'int2') {
            _showAllFields(0, false);
            _showAllFields(1, true);
            _showAllFields(2, false);
            $('#stn_transfer_diag #tick_direc').hide();
            $('#osi_name_zh, #osi_name_en, #paid_area').hide();
        }
        else if (event.detail.value == 'int3') {
            _showAllFields(0, false);
            _showAllFields(1, true);
            _showAllFields(2, true);
            $('#stn_transfer_diag #tick_direc').show();
            $('#osi_name_zh, #osi_name_en, #paid_area').hide();
        }
        else if (event.detail.value == 'osi11') {
            _showAllFields(0, false);
            _showAllFields(1, true);
            _showAllFields(2, false);
            $('#stn_transfer_diag #tick_direc').show();
            $('#osi_name_zh, #osi_name_en, #paid_area').show();
        }
        else if (event.detail.value == 'osi12') {
            _showAllFields(0, false);
            _showAllFields(1, true);
            _showAllFields(2, true);
            $('#stn_transfer_diag #tick_direc').show();
            $('#osi_name_zh, #osi_name_en, #paid_area').show();
        }
        else if (event.detail.value == 'osi22') {
            // $('#stn_transfer_diag .mdc-dialog__content [id]div, #paid_area').slice(1).show()
            _showAllFields(0, true);
            _showAllFields(1, true);
            _showAllFields(2, true);
            let stnInfo = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[$('#stn_transfer_diag').attr('for')];
            if (stnInfo.parents[0] == 'linestart' || stnInfo.children[0] == 'lineend') {
                $('#tick_direc').hide();
            }
            else {
                $('#tick_direc').show();
            }
        }
        else {
            $('#stn_transfer_diag #panel_interchange [id]div').slice(1).hide();
            $('#tick_direc, #paid_area').hide();
        }
    });
    intCitySelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if (event.detail.index === -1) {
                return;
            }
            $.getJSON(`data/${event.detail.value}.json`, data => {
                var lang = window.urlParams.get('lang');
                $('#int_line__selection.mdc-list').eq(idx).empty();
                data.forEach(l => {
                    $('#int_line__selection.mdc-list').eq(idx).append(`<li class="mdc-list-item" data-value="${l.id}">
                        <span style="background:${l.colour};color:${l.fg || '#fff'};">&nbsp;${Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(l.name, lang)}&nbsp;</span>
                        </li>`);
                });
                var stnId = $('#stn_transfer_diag').attr('for');
                var stnInfo = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId];
                if (stnInfo.change_type !== 'none') {
                    var allInterchanges = stnInfo.interchange[0].concat(stnInfo.interchange[1] ? stnInfo.interchange[1].slice(1, stnInfo.interchange[1].length) : []);
                    if (allInterchanges.length < 3) {
                        allInterchanges.unshift([, , , , , ,]);
                    }
                    if (allInterchanges.length < 3) {
                        allInterchanges.push([, , , , , ,]);
                    }
                    var lIdx = $('#int_line__selection.mdc-list').eq(idx).find(`[data-value="${allInterchanges[idx][1]}"]`).index();
                    intLineSelects[idx].selectedIndex = (lIdx == -1) ? 0 : lIdx;
                }
                else {
                    intLineSelects[idx].selectedIndex = 0;
                }
            });
        });
    });
    // Modification (Branch)
    throughSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if (event.detail.value === 'na') {
                return;
            }
            let stnId = $('#stn_transfer_diag').attr('for');
            window.myLine.updateBranchType(stnId, idx, event.detail.value);
        });
    });
    firstSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if ($(`#${_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][idx]}_first__selection`).children().length === 1) {
                return;
            }
            let stnId = $('#stn_transfer_diag').attr('for');
            if (window.myLine.updateBranchFirst(stnId, idx, event.detail.value)) {
                posSelects[idx].selectedIndex = posSelects[idx].selectedIndex === 0 ? 1 : 0;
            }
        });
    });
    posSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if (throughSelects[idx].value === 'na') {
                return;
            }
            let stnId = $('#stn_transfer_diag').attr('for');
            window.myLine.updateBranchPos(stnId, idx, event.detail.index);
        });
    });
    // Deletion
    stnDeleteDialog.listen('MDCDialog:opening', event => {
        var stnId = $(event.target).attr('for');
        $('#stn_delete_diag #err_stn').text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId].name.join(' - '));
    });
    stnDeleteDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var stnId = $(event.target).attr('for');
        // Remove from data and svg
        if (window.myLine.removeStn(stnId)) {
            // Remove station from selection
            $(`#panel_stations .mdc-layout-grid__inner #${stnId}`).remove();
            $(`#pivot__selection [data-value="${stnId}"]`).remove();
        }
        else {
            stnDeleteErrDialog.open();
        }
    });
}


/***/ }),

/***/ "./src/Station/Station.ts":
/*!********************************!*\
  !*** ./src/Station/Station.ts ***!
  \********************************/
/*! exports provided: IntInfoTag, RMGStation, Int2Station, Int3LStation, Int3RStation, OSI11LStation, OSI11RStation, OSI12LStation, OSI12RStation, OSI22LStation, OSI22RStation, OSI22EndStation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntInfoTag", function() { return IntInfoTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStation", function() { return RMGStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int2Station", function() { return Int2Station; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3LStation", function() { return Int3LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3RStation", function() { return Int3RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11LStation", function() { return OSI11LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11RStation", function() { return OSI11RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12LStation", function() { return OSI12LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12RStation", function() { return OSI12RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22LStation", function() { return OSI22LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22RStation", function() { return OSI22RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22EndStation", function() { return OSI22EndStation; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");

var IntInfoTag;
(function (IntInfoTag) {
    IntInfoTag[IntInfoTag["city"] = 0] = "city";
    IntInfoTag[IntInfoTag["line"] = 1] = "line";
    IntInfoTag[IntInfoTag["colour"] = 2] = "colour";
    IntInfoTag[IntInfoTag["fg"] = 3] = "fg";
    IntInfoTag[IntInfoTag["nameZH"] = 4] = "nameZH";
    IntInfoTag[IntInfoTag["nameEN"] = 5] = "nameEN";
})(IntInfoTag || (IntInfoTag = {}));
;
class RMGStation {
    constructor(id, data) {
        this.STN_NAME_Y = -10.5;
        this.STN_NAME_BASE_HEIGHT = 30.390625;
        this.STN_NAME_LINE_GAP = 14;
        this.STN_NAME_BG_ADJUST = 0.5;
        this.id = id;
        this.parents = data.parents;
        this.children = data.children;
        this.name = data.name;
        this.branch = data.branch;
    }
    get inDegree() { return this.parents.length; }
    get outDegree() { return this.children.length; }
    get nameClass() {
        switch (this.state) {
            case -1:
                return 'Pass';
            case 0:
                return 'Current';
            default:
                return 'Future';
        }
    }
    get _nameTxtAnchor() { return 'middle'; }
    get _nameDX() { return 0; }
    get _nameDY() { return 0; }
    get nameHTML() {
        var nameENs = this.name[1].split('\\');
        if (this.namePos == 1) {
            var dy = this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BG_ADJUST;
        }
        else {
            var dy = -this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BASE_HEIGHT - (nameENs.length - 1) * 10;
        }
        // dy -= this.STN_NAME_BG_ADJUST;
        if (this.state === 0) {
            $('#current_bg').attr({
                y: this.y + dy + this.STN_NAME_Y - 1.5 + this._nameDY,
                height: this.STN_NAME_BASE_HEIGHT + (nameENs.length - 1) * 10 + 2 + 1.5
            });
        }
        var nameENp = nameENs.shift();
        var nameENElem = $('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__mtr--station'
        }).text(nameENp);
        while (nameENp = nameENs.shift()) {
            nameENElem.append($('<tspan>', { x: 0, dy: 10, 'alignment-baseline': 'middle' }).text(nameENp));
        }
        return $('<g>', {
            transform: `translate(${this.x + this._nameDX},${this.y + dy + this._nameDY})`,
            'text-anchor': this._nameTxtAnchor,
            'class': `Name ${this.nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--station').text(this.name[0])).append(nameENElem);
    }
    get iconClass() { return this.state == -1 ? 'rmg-stn__mtr--pass' : 'rmg-stn__mtr--future'; }
    get iconHTML() {
        return $('<use>', {
            'xlink:href': '#stn_hk',
            x: this.x, y: this.y,
            class: this.iconClass
        });
    }
    get ungrpHTML() {
        return [this.iconHTML, this.nameHTML];
    }
    get html() {
        return $('<g>', { id: this.id }).append(...this.ungrpHTML);
    }
}
class Int2Station extends RMGStation {
    constructor(id, data) {
        super(id, data);
        this._intInfo = data.interchange[0][0];
    }
    get _dy() { return 0; }
    get intTickHTML() {
        var tickRotation = (this.namePos == 1) ? 180 : 0;
        var tickColour = this._intInfo[IntInfoTag.colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y + this._dy})rotate(${tickRotation})`,
            class: 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get _nameClass() {
        return (this.state == -1) ? 'Pass' : 'Future';
    }
    get intNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._intInfo[IntInfoTag.nameZH], this._intInfo[IntInfoTag.nameEN]], 15, 7);
        var dy = (this.namePos == 0) ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML];
    }
}
class Int3Station extends RMGStation {
    // _int3Type;
    constructor(id, data) {
        super(id, data);
        this._intCity = [];
        this._intLine = [];
        this._intColour = [];
        this._intNameZH = [];
        this._intNameEN = [];
        this._intInfos = data.interchange[0];
        data.interchange[0].forEach(intInfo => {
            this._intCity.push(intInfo[0]);
            this._intLine.push(intInfo[1]);
            this._intColour.push(intInfo[2]);
            this._intNameZH.push(intInfo[4]);
            this._intNameEN.push(intInfo[5]);
        });
        // this._int3Type = data.change_type.substring(5);
    }
    get iconHTML() {
        let iconRotation = (this.namePos != 1) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#int3_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: this.iconClass
        });
    }
    get _tickRotation() { return 0; }
    get _dy() { return 0; }
    get _dx() { return 0; }
    get _tickFlip() { return 1; }
    get intTickHTML() {
        let elems = [];
        this._intInfos
            .map(info => info[IntInfoTag.colour])
            .forEach((c, i) => {
            if (i >= 2) {
                return;
            }
            let tickColour = (this.state === -1) ? '#aaa' : c;
            let dy = (this.namePos !== 1) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            elems.push($('<use>', {
                'xlink:href': '#inttick_hk',
                stroke: tickColour,
                transform: `translate(${this.x + this._dx},${this.y + dy})rotate(${this._tickRotation})`,
                class: 'rmg-line rmg-line__mtr rmg-line__change'
            }));
        });
        return elems;
    }
    get _txtAnchor() { return 'middle'; }
    get _intNameDX() { return 0; }
    get _nameClass() { return (this.state == -1) ? 'Pass' : 'Future'; }
    get intNameHTML() {
        // var str = '';
        let elems = [];
        let nameClass = this._nameClass;
        this._intInfos
            .map(info => [info[IntInfoTag.nameZH], info[IntInfoTag.nameEN]])
            .forEach((names, i) => {
            if (i >= 2) {
                return;
            }
            let [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])(names, 15, 7);
            var dy = (this.namePos === 0) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            dy += 5.953125 - (19.65625 + 13 * (nameZHLn - 1) + 7 * (nameENLn - 1)) / 2;
            elems.push($('<g>', {
                'text-anchor': this._txtAnchor,
                transform: `translate(${this.x + this._intNameDX},${this.y + dy})`,
                class: 'Name ' + nameClass
            }).html(nameHTML[0]));
        });
        return elems;
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML];
    }
}
class Int3LStation extends Int3Station {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class Int3RStation extends Int3Station {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI11Station extends Int2Station {
    constructor(id, data) {
        // data.int2 = data.osi11;
        data.interchange[0].push(data.interchange[1][1]);
        super(id, data);
        this._osiNames = data.interchange[1][0];
        this._osiType = data.change_type.substring(6, 7); // u(npaid) or p(aid);
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (this.namePos != 1) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi11_hk',
            'transform': `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (this.namePos == 0) ? 26 : -26; }
    get _txtAnchor() { return 'middle'; }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            'transform': `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            'class': 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML, this.osiNameHTML];
    }
}
class OSI11LStation extends OSI11Station {
    // OSI name on left
    get _txtAnchor() { return 'end'; }
    get _osiNameDX() { return -13; }
}
class OSI11RStation extends OSI11Station {
    // OSI name on right
    get _txtAnchor() { return 'start'; }
    get _osiNameDX() { return 13; }
}
class OSI12Station extends Int3Station {
    constructor(id, data) {
        // data.int3 = data.osi12;
        data.interchange[0].unshift(...data.interchange[1].slice(1, 3));
        super(id, data);
        this._osiNames = data.interchange[1][0];
        this._osiType = data.change_type.split('_').reverse()[0][0];
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (this.namePos != 1) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi12_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (this.namePos == 0) ? (26 - 18) : -8; }
    get _osiDY() { return (this.namePos == 0) ? (26 + 18 + 10) + 8.34375 : -(26 + 18 + 10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return 'middle'; }
    get _osiDX() { return 0; }
    get osiNameHTML() {
        var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            'transform': `translate(${this.x + this._dx + this._osiDX},${this.y + this._osiDY})`,
            'class': `Name ${nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1].split('\\')[0]).append($('<tspan>', { x: 0, dy: 10 }).text(this._osiNames[1].split('\\')[1] || '')));
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML, this.osiNameHTML];
    }
}
class OSI12LStation extends OSI12Station {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class OSI12RStation extends OSI12Station {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI22Station extends OSI12Station {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        this._origIntInfo = data.interchange[0][2];
    }
    get _nameTxtAnchor() { return this._osiTxtAnchor; }
    get _nameDY() {
        return (this.namePos === 1) ? 11.515625 : -11.515625;
    }
    get origIntTickHTML() {
        var tickRotation = (this.namePos == 1) ? 0 : 180;
        var tickColour = this._origIntInfo[IntInfoTag.colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._origIntInfo[IntInfoTag.nameZH], this._origIntInfo[IntInfoTag.nameEN]], 15, 7);
        var dy = (this.namePos == 1) ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            transform: `translate(${this.x - this._nameDX},${this.y + dy})`,
            class: `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy - (this.namePos === 1 ? 18 + 9 : -27) + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            transform: `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            class: 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            x: 0, dy: 12, class: 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}
class OSI22LStation extends OSI22Station {
    get _nameDX() { return 3; }
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
    get _osiNameDX() { return 13; }
    get _osiTxtAnchor() { return 'start'; }
}
class OSI22RStation extends OSI22Station {
    get _nameDX() { return -3; }
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
    get _osiNameDX() { return -13; }
    get _osiTxtAnchor() { return 'end'; }
}
class OSI22EndStation extends OSI12Station {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        [this._origIntCity, this._origIntLine, this._origIntColour, this._origIntFg, this._origIntNameZH, this._origIntNameEN] = data.interchange[0][2];
    }
    get origIntTickHTML() {
        var tickRotation = (this.namePos == 1) ? 180 : 0;
        var tickColour = this._origIntColour;
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._origIntNameZH, this._origIntNameEN], 15, 7);
        var dy = (this.namePos == 0) ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get iconHTML() {
        var iconYFlip = (this.namePos == 1) ? 1 : -1;
        var iconXFlip = (this.children[0] == 'lineend') ? 1 : -1;
        var iconRotation = (this.children[0] == 'lineend') ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi22end_hk',
            'transform': `translate(${this.x},${this.y})scale(${iconXFlip},${iconYFlip})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _tickRotation() { return (this.children[0] == 'lineend') ? -90 : 90; }
    get _tickFlip() { return -1; }
    get _dx() { return (this.children[0] == 'lineend') ? 41 : -41; }
    get _dy() { return (this.namePos == 0) ? -18 : 18; }
    get _intNameDX() { return (this.children[0] == 'lineend') ? 24 + 41 : -(24 + 41); }
    get _txtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDY() { return (this.namePos == 0) ? (10) + 8.34375 : -(10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDX() { return (this.children[0] == 'lineend') ? -9 : 9; }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PageInitialiser/save */ "./src/PageInitialiser/save.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Line_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line/init */ "./src/Line/init.ts");
/* harmony import */ var _PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PageInitialiser/init */ "./src/PageInitialiser/init.ts");




var requestLang = window.urlParams.get('lang') || localStorage.rmgLang || navigator.language.split('-').slice(0, 2).join('-');
switch (requestLang.toLowerCase()) {
    case 'zh-cn':
    case 'zh-hans':
        window.urlParams.set('lang', 'zh-Hans');
        break;
    case 'zh':
    case 'zh-hk':
    case 'zh-tw':
        window.urlParams.set('lang', 'zh-HK');
        break;
    default: window.urlParams.set('lang', 'en');
}
switch (window.urlParams.get('style')) {
    case 'mtr':
    case 'gzmtr':
        break;
    default: window.urlParams.set('style', 'mtr');
}
history.pushState({ url: window.location.href }, null, '?' + window.urlParams.toString());
window.myLine = null;
jquery__WEBPACK_IMPORTED_MODULE_1__(`[${window.urlParams.get('style')}-specific]`).show();
// autoInit();
_PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__["common"]();
Object(_Line_init__WEBPACK_IMPORTED_MODULE_2__["default"])();
Object(_PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__["default"])();


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/*! exports provided: DirectionLong, NeighbourPl, putParams, getParams, setParams, test, getTxtBoxDim, joinIntName, getRandomId, describeParams, countryCode2Emoji, rgb2Hex, updateParam, getTransText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionLong", function() { return DirectionLong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeighbourPl", function() { return NeighbourPl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "putParams", function() { return putParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return getParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setParams", function() { return setParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "test", function() { return test; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTxtBoxDim", function() { return getTxtBoxDim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinIntName", function() { return joinIntName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomId", function() { return getRandomId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeParams", function() { return describeParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countryCode2Emoji", function() { return countryCode2Emoji; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2Hex", function() { return rgb2Hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateParam", function() { return updateParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransText", function() { return getTransText; });
var DirectionLong;
(function (DirectionLong) {
    DirectionLong[DirectionLong["left"] = 0] = "left";
    DirectionLong[DirectionLong["right"] = 1] = "right";
})(DirectionLong || (DirectionLong = {}));
;
var NeighbourPl;
(function (NeighbourPl) {
    NeighbourPl[NeighbourPl["parents"] = 0] = "parents";
    NeighbourPl[NeighbourPl["children"] = 1] = "children";
})(NeighbourPl || (NeighbourPl = {}));
;
function putParams(instance) {
    localStorage.setItem('rmgParam', JSON.stringify(instance));
}
function getParams() {
    return JSON.parse(localStorage.rmgParam);
}
function setParams(key, data) {
    let param = getParams();
    param[key] = data;
    putParams(param);
}
function test(svgEl) {
    var [svgW, svgH] = svgEl.attr('viewBox').split(' ').slice(2);
    var canvas = $('canvas')[0];
    $('canvas').attr({
        width: svgW * 2.5, height: svgH * 2.5
    });
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // bypass Chrome min font size (to be improved)
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--station, .rmg-name__en.rmg-name__mtr--station, .rmg-name__zh.IntName').each((_, el) => {
        $(el).attr('font-size', '10px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int').each((_, el) => {
        $(el).attr('font-size', '8px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int-small, .rmg-name__en.IntName').each((_, el) => {
        $(el).attr('font-size', '7px');
    });
    svgEl.find('text:not([font-size]), tspan:not([font-size])').each((_, el) => {
        $(el).attr('font-size', window.getComputedStyle(el).fontSize);
    });
    svgEl.find('text, tspan').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'font-family': elStyle.getPropertyValue('font-family'),
            'fill': elStyle.getPropertyValue('fill'),
            'alignment-baseline': elStyle.getPropertyValue('alignment-baseline'),
            'text-anchor': elStyle.getPropertyValue('text-anchor')
        }).removeAttr('class');
    });
    svgEl.find('#strip, #dest_strip').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'stroke-width': elStyle.getPropertyValue('stroke-width')
        });
    });
    var img = new Image();
    img.onload = function () {
        ctx.drawImage(img, 0, 0, svgW * 2.5, svgH * 2.5);
        saveAs($('canvas')[0].toDataURL('image/png'), 'rmg_export');
    };
    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl[0].outerHTML)));
}
function saveAs(uri, filename) {
    var link = document.createElement('a');
    if (typeof link.download === 'string') {
        link.href = uri;
        link.download = filename;
        //Firefox requires the link to be in the body
        document.body.appendChild(link);
        //simulate click
        link.click();
        //remove the link when done
        document.body.removeChild(link);
    }
    else {
        window.open(uri);
    }
}
function getTxtBoxDim(elem, svg) {
    let svgNode = $('#' + svg)[0];
    let bcr = elem.getBoundingClientRect();
    let pt = svgNode.createSVGPoint();
    let ctm = svgNode.getScreenCTM();
    pt.x = bcr.left;
    pt.y = bcr.top;
    let pos = pt.matrixTransform(ctm.inverse());
    return { x: pos.x, y: pos.y, width: bcr.width, height: bcr.height };
}
function joinIntName(names, dy1, dy2) {
    var [nameZH, nameEN] = names.map(txt => txt.split(/\\/g));
    var res = $('<text>').addClass('rmg-name__zh IntName').text(nameZH[0]);
    for (let i = 1; i < nameZH.length; i++) {
        res = res.append($('<tspan>', { 'x': 0, 'dy': dy1 }).text(nameZH[i]));
    }
    var btwGap = (nameZH.length == 1) ? 9 : dy2;
    res = res.append($('<tspan>', {
        'x': 0, 'dy': btwGap, 'class': 'rmg-name__en IntName'
    }).text(nameEN[0]));
    for (let i = 1; i < nameEN.length; i++) {
        res = res.append($('<tspan>', {
            'x': 0, 'dy': dy2, 'class': 'rmg-name__en IntName'
        }).text(nameEN[i]));
    }
    return [res, nameZH.length, nameEN.length];
}
function getRandomId() {
    return Math.floor(Math.random() * Math.pow(36, 4)).toString(36).padStart(4, '0');
}
function describeParams(param) {
    return `Number of stations: ${Object.keys(param.stn_list).length - 2}
            ${Object.entries(param.stn_list).map(x => ['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')).join('<br>').trim().replace(/\\/, ' ')}`;
}
function countryCode2Emoji(code) {
    var chars = code.toUpperCase().split('');
    if (code.length == 2) {
        return chars.map(char => String.fromCodePoint((char.codePointAt(0) + 127397))).join('');
    }
    else {
        return '\u{1f3f4}' + chars.map(char => String.fromCodePoint((char.codePointAt(0) + 917536))).join('') + '\u{e007f}';
    }
}
function rgb2Hex(rgb) {
    let hex = rgb.match(/[\d]+/g)
        .map(dec => Number(dec).toString(16).padStart(2, '0'))
        .join('');
    switch (hex) {
        case '000000': return '#000';
        case 'ffffff': return '#fff';
        default: return '#' + hex;
    }
}
function updateParam() {
    var param = getParams();
    // Version 0.10
    if (!('line_name' in param)) {
        param.line_name = ['路線名', 'Name of Line'];
    }
    if (!('dest_legacy' in param)) {
        param.dest_legacy = false;
    }
    // Version 0.11
    if (!('char_form' in param)) {
        param.char_form = (region => {
            switch (region) {
                case 'KR': return 'trad';
                case 'TC': return 'tw';
                case 'SC': return 'cn';
                case 'JP': return 'jp';
            }
        })(param.fontZH[0].split(' ').reverse()[0]);
    }
    delete param.fontZH;
    delete param.fontEN;
    delete param.weightZH;
    delete param.weightEN;
    // Version 0.12
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        // if (['linestart', 'lineend'].includes(stnId)) {continue;}
        if ('transfer' in stnInfo) {
            delete param.stn_list[stnId].interchange;
            switch (stnInfo.change_type) {
                case 'int2':
                    param.stn_list[stnId].interchange = [[stnInfo.transfer[1]]];
                    break;
                case 'int3_l':
                case 'int3_r':
                    param.stn_list[stnId].interchange = [stnInfo.transfer.slice(1, 3)];
                    break;
                case 'osi11_pl':
                case 'osi11_pr':
                case 'osi11_ul':
                case 'osi11_ur':
                    param.stn_list[stnId].interchange = [[], stnInfo.transfer.slice(0, 2)];
                    break;
                case 'osi12_pl':
                case 'osi12_pr':
                case 'osi12_ul':
                case 'osi12_ur':
                    param.stn_list[stnId].interchange = [[], stnInfo.transfer];
                    break;
            }
        }
        delete param.stn_list[stnId].transfer;
        if (!('branch' in stnInfo)) {
            param.stn_list[stnId].branch = { left: [], right: [] };
            if (stnInfo.children.length == 2) {
                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];
            }
            else {
                param.stn_list[stnId].branch.right = [];
            }
            if (stnInfo.parents.length == 2) {
                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];
            }
            else {
                param.stn_list[stnId].branch.left = [];
            }
        }
    }
    // Version 1.2
    if (!('psd_num' in param)) {
        param.psd_num = 1;
    }
    if (!('line_num' in param)) {
        param.line_num = 1;
    }
    delete param.style;
    if (param.theme.length == 3) {
        param.theme.push('#fff');
    }
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (['linestart', 'lineend'].includes(stnId)) {
            continue;
        }
        if (!('num' in stnInfo)) {
            param.stn_list[stnId].num = '00';
        }
    }
    // Version 1.3
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if ('interchange' in stnInfo) {
            stnInfo.interchange.map(arr => {
                arr.map(intInfo => {
                    if (intInfo.length == 5) {
                        intInfo.splice(3, 0, '#fff');
                    }
                });
            });
        }
    }
    // Version 1.4
    if (!('info_panel_type' in param)) {
        param.info_panel_type = 'panasonic';
    }
    // Version 1.5
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (stnInfo.change_type === 'osi22_end_p') {
            param.stn_list[stnId].change_type = 'osi22_pr';
        }
        if (stnInfo.change_type === 'osi22_end_u') {
            param.stn_list[stnId].change_type = 'osi22_ur';
        }
    }
    // Version 2.1
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('interchange' in stnInfo)) {
            param.stn_list[stnId].interchange = [[]];
        }
    }
    // Version 2.2
    if (param.info_panel_type === 'gz_1') {
        param.info_panel_type = 'gz28';
    }
    // Version 2.3
    if (param.info_panel_type === 'panasonic') {
        param.info_panel_type = 'gz28';
    }
    if (param.info_panel_type === 'gz_2') {
        param.info_panel_type = 'gzgf';
    }
    if (param.info_panel_type === 'gz_3') {
        param.info_panel_type = 'gz3';
    }
    if (!('direction_gz_x' in param)) {
        param.direction_gz_x = 50;
    }
    if (!('direction_gz_y' in param)) {
        param.direction_gz_y = 70;
    }
    putParams(param);
}
const langFallback = (lang) => {
    switch (lang) {
        case 'en': return ['en'];
        case 'zh-Hans': return ['zh-Hans', 'zh', 'en'];
        case 'zh-HK': return ['zh-HK', 'zh-Hant', 'zh', 'en'];
        default: return [lang, 'en'];
    }
};
const getTransText = (obj, lang) => {
    return obj[langFallback(lang).find(l => obj[l])];
};


/***/ }),

/***/ "@material/dialog":
/*!*****************************!*\
  !*** external "mdc.dialog" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.dialog;

/***/ }),

/***/ "@material/icon-button":
/*!*********************************!*\
  !*** external "mdc.iconButton" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.iconButton;

/***/ }),

/***/ "@material/list":
/*!***************************!*\
  !*** external "mdc.list" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.list;

/***/ }),

/***/ "@material/ripple":
/*!*****************************!*\
  !*** external "mdc.ripple" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.ripple;

/***/ }),

/***/ "@material/select":
/*!*****************************!*\
  !*** external "mdc.select" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.select;

/***/ }),

/***/ "@material/slider":
/*!*****************************!*\
  !*** external "mdc.slider" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.slider;

/***/ }),

/***/ "@material/switch":
/*!************************************!*\
  !*** external "mdc.switchControl" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.switchControl;

/***/ }),

/***/ "@material/tab-bar":
/*!*****************************!*\
  !*** external "mdc.tabBar" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.tabBar;

/***/ }),

/***/ "@material/textfield":
/*!********************************!*\
  !*** external "mdc.textField" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.textField;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,