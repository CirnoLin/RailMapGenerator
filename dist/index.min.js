!function(t){function e(e){for(var n,s,a=e[0],r=e[1],l=0,h=[];l<a.length;l++)s=a[l],Object.prototype.hasOwnProperty.call(i,s)&&i[s]&&h.push(i[s][0]),i[s]=0;for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n]);for(o&&o(e);h.length;)h.shift()()}var n={},i={2:0};function s(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.e=function(t){var e=[],n=i[t];if(0!==n)if(n)e.push(n[2]);else{var a=new Promise((function(e,s){n=i[t]=[e,s]}));e.push(n[2]=a);var r,l=document.createElement("script");l.charset="utf-8",l.timeout=120,s.nc&&l.setAttribute("nonce",s.nc),l.src=function(t){return s.p+""+({0:"LineGZ",1:"LineSH"}[t]||t)+".min.js"}(t);var o=new Error;r=function(e){l.onerror=l.onload=null,clearTimeout(h);var n=i[t];if(0!==n){if(n){var s=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;o.message="Loading chunk "+t+" failed.\n("+s+": "+a+")",o.name="ChunkLoadError",o.type=s,o.request=a,n[1](o)}i[t]=void 0}};var h=setTimeout((function(){r({type:"timeout",target:l})}),12e4);l.onerror=l.onload=r,document.head.appendChild(l)}return Promise.all(e)},s.m=t,s.c=n,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="./dist/",s.oe=function(t){throw console.error(t),t};var a=window.webpackJsonp=window.webpackJsonp||[],r=a.push.bind(a);a.push=e,a=a.slice();for(var l=0;l<a.length;l++)e(a[l]);var o=r;s(s.s=14)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return s})),n.d(e,"l",(function(){return r})),n.d(e,"g",(function(){return l})),n.d(e,"n",(function(){return o})),n.d(e,"o",(function(){return h})),n.d(e,"j",(function(){return c})),n.d(e,"k",(function(){return d})),n.d(e,"e",(function(){return _})),n.d(e,"h",(function(){return g})),n.d(e,"f",(function(){return m})),n.d(e,"d",(function(){return u})),n.d(e,"c",(function(){return p})),n.d(e,"m",(function(){return f})),n.d(e,"p",(function(){return w})),n.d(e,"i",(function(){return b}));var i,s,a=n(1);function r(t){localStorage.setItem("rmgParam",JSON.stringify(t))}function l(){return JSON.parse(localStorage.rmgParam)}function o(t,e){let n=l();n[t]=e,r(n)}function h(t){var[e,n]=t.attr("viewBox").split(" ").slice(2),i=$("canvas")[0];$("canvas").attr({width:2.5*e,height:2.5*n});var s=i.getContext("2d");s.clearRect(0,0,i.width,i.height),t.find(".rmg-name__en.rmg-name__gzmtr--station, .rmg-name__en.rmg-name__mtr--station, .rmg-name__zh.IntName").each((t,e)=>{$(e).attr("font-size","10px")}),t.find(".rmg-name__en.rmg-name__gzmtr--int").each((t,e)=>{$(e).attr("font-size","8px")}),t.find(".rmg-name__en.rmg-name__gzmtr--int-small, .rmg-name__en.IntName").each((t,e)=>{$(e).attr("font-size","7px")}),t.find("text:not([font-size]), tspan:not([font-size])").each((t,e)=>{$(e).attr("font-size",window.getComputedStyle(e).fontSize)}),t.find("text, tspan").each((t,e)=>{var n=window.getComputedStyle(e);$(e).attr({"font-family":n.getPropertyValue("font-family"),fill:n.getPropertyValue("fill"),"alignment-baseline":n.getPropertyValue("alignment-baseline"),"dominant-baseline":n.getPropertyValue("dominant-baseline"),"text-anchor":n.getPropertyValue("text-anchor")}).removeAttr("class")}),t.find("#strip, #dest_strip").each((t,e)=>{var n=window.getComputedStyle(e);$(e).attr({"stroke-width":n.getPropertyValue("stroke-width")})});var a=new Image;a.onload=function(){var t,i,r;s.drawImage(a,0,0,2.5*e,2.5*n),t=$("canvas")[0].toDataURL("image/png"),i="rmg_export","string"==typeof(r=document.createElement("a")).download?(r.href=t,r.download=i,document.body.appendChild(r),r.click(),document.body.removeChild(r)):window.open(t)},a.src="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(t[0].outerHTML)))}function c(t,e){let n=$("#"+e)[0],i=t.getBoundingClientRect(),s=n.createSVGPoint(),a=n.getScreenCTM();s.x=i.left,s.y=i.top;let r=s.matrixTransform(a.inverse());return{x:r.x,y:r.y,width:i.width,height:i.height}}function d(t,e,n){var[i,s]=t.map(t=>t.split(/\\/g)),a=$("<text>").addClass("rmg-name__zh IntName").text(i[0]);for(let t=1;t<i.length;t++)a=a.append($("<tspan>",{x:0,dy:e,"dominant-baseline":"central"}).text(i[t]));var r=(i.length,9);a=a.append($("<tspan>",{x:0,dy:r,class:"rmg-name__en IntName"}).text(s[0]));for(let t=1;t<s.length;t++)a=a.append($("<tspan>",{x:0,dy:n,class:"rmg-name__en IntName"}).text(s[t]));return[a,i.length,s.length]}function _(t,e){let n=t[a.d.colour],i=t[a.d.fg],s=[t[a.d.nameZH],t[a.d.nameEN]],r=s[0].match(/[\d]+|[\D]+/g)||[""],l=!1;2==r.length&&!isNaN(Number(r[0]))&&isNaN(Number(r[1]))&&(l=!0);let o=$("<g>").append($("<use>",{"xlink:href":"#intbox_gz",fill:-1===e?"#aaa":n})).append($("<text>",{y:8.5,class:"rmg-name__zh rmg-name__gzmtr--int"}).append($("<tspan>",{"font-size":"16px","dominant-baseline":"central"}).text(l?r[0]:"")).append($("<tspan>",{dy:-1,"dominant-baseline":"central"}).text(l?r[1]:r.join("")))).append($("<text>",{y:19.5,class:"rmg-name__en"}).addClass(s[1].length>10?"rmg-name__gzmtr--int-small":"rmg-name__gzmtr--int").text(s[1]));return"#fff"!==i&&-1!==e||$(o).find("text").addClass("rmg-name__gzmtr--white-fg"),o}function g(){return Math.floor(Math.random()*Math.pow(36,4)).toString(36).padStart(4,"0")}function m(t){let e=["癸","甲","乙","丙","丁","戊","己","庚","辛","壬","日","月","金","木","水","火","土","竹","戈","十","大","中","一","弓","人","心","手","口","尸","廿","山","女","田","難","卜","重"],n=["Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Alfa","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","X-ray","Yankee","Zulu"];return[t.split("").map(t=>e[parseInt(t,36)]).join(""),t.split("").map(t=>n[parseInt(t,36)]).join(" ")]}function u(t){return`Number of stations: ${Object.keys(t.stn_list).length-2}\n            ${Object.entries(t.stn_list).map(t=>["linestart","lineend"].includes(t[0])?"":t[1].name.join(" - ")).join("<br>").trim().replace(/\\/," ")}`}function p(t){var e=t.toUpperCase().split("");return 2==t.length?e.map(t=>String.fromCodePoint(t.codePointAt(0)+127397)).join(""):"🏴"+e.map(t=>String.fromCodePoint(t.codePointAt(0)+917536)).join("")+"󠁿"}function f(t){let e=t.match(/[\d]+/g).map(t=>Number(t).toString(16).padStart(2,"0")).join("");switch(e){case"000000":return"#000";case"ffffff":return"#fff";default:return"#"+e}}function w(){var t=l();"line_name"in t||(t.line_name=["路線名","Name of Line"]),"dest_legacy"in t||(t.dest_legacy=!1),"char_form"in t||(t.char_form=(t=>{switch(t){case"KR":return"trad";case"TC":return"tw";case"SC":return"cn";case"JP":return"jp"}})(t.fontZH[0].split(" ").reverse()[0])),delete t.fontZH,delete t.fontEN,delete t.weightZH,delete t.weightEN;for(let[e,n]of Object.entries(t.stn_list))"branch"in n||(t.stn_list[e].branch={left:[],right:[]},2==n.children.length?t.stn_list[e].branch.right=["through",n.children[1]]:t.stn_list[e].branch.right=[],2==n.parents.length?t.stn_list[e].branch.left=["through",n.parents[1]]:t.stn_list[e].branch.left=[]);"psd_num"in t||(t.psd_num=1),"line_num"in t||(t.line_num=1),delete t.style,3==t.theme.length&&t.theme.push("#fff");for(let[e,n]of Object.entries(t.stn_list))["linestart","lineend"].includes(e)||"num"in n||(t.stn_list[e].num="00");for(let[e,n]of Object.entries(t.stn_list))"interchange"in n&&n.interchange.map(t=>{t.map(t=>{5==t.length&&t.splice(3,0,"#fff")})});"info_panel_type"in t||(t.info_panel_type="panasonic");for(let[e,n]of Object.entries(t.stn_list))"osi22_end_p"===n.change_type&&(t.stn_list[e].change_type="osi22_pr"),"osi22_end_u"===n.change_type&&(t.stn_list[e].change_type="osi22_ur");for(let[e,n]of Object.entries(t.stn_list))"interchange"in n||(t.stn_list[e].interchange=[[]]);"gz_1"===t.info_panel_type&&(t.info_panel_type="gz28"),"panasonic"===t.info_panel_type&&(t.info_panel_type="gz28"),"gz_2"===t.info_panel_type&&(t.info_panel_type="gzgf"),"gz_3"===t.info_panel_type&&(t.info_panel_type="gz3"),"direction_gz_x"in t||(t.direction_gz_x=50),"direction_gz_y"in t||(t.direction_gz_y=70);for(let[e,n]of Object.entries(t.stn_list))"transfer"in t||(t.stn_list[e].transfer={type:n.change_type.split("_")[0],tick_direc:"none"===n.change_type||"int2"===n.change_type?"r":n.change_type.split("_")[1].split("").slice().reverse()[0],paid_area:-1===n.change_type.indexOf("osi")||"p"===n.change_type.split("_")[1][0],osi_names:-1!==n.change_type.indexOf("osi")?[n.interchange[1][0]]:[],info:2===n.interchange.length?[n.interchange[0],n.interchange[1].slice(1)]:n.interchange});r(t)}!function(t){t[t.left=0]="left",t[t.right=1]="right"}(i||(i={})),function(t){t[t.parents=0]="parents",t[t.children=1]="children"}(s||(s={}));const b=(t,e)=>t[(t=>{switch(t){case"en":return["en"];case"zh-Hans":return["zh-Hans","zh","en"];case"zh-HK":return["zh-HK","zh-Hant","zh","en"];default:return[t,"en"]}})(e).find(e=>t[e])]},function(t,e,n){"use strict";n.d(e,"d",(function(){return i})),n.d(e,"m",(function(){return a})),n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return h})),n.d(e,"e",(function(){return d})),n.d(e,"f",(function(){return _})),n.d(e,"g",(function(){return m})),n.d(e,"h",(function(){return u})),n.d(e,"l",(function(){return p})),n.d(e,"j",(function(){return f})),n.d(e,"k",(function(){return w})),n.d(e,"i",(function(){return b}));var i,s=n(0);!function(t){t[t.city=0]="city",t[t.line=1]="line",t[t.colour=2]="colour",t[t.fg=3]="fg",t[t.nameZH=4]="nameZH",t[t.nameEN=5]="nameEN"}(i||(i={}));class a{constructor(t,e){this.STN_NAME_Y=-10.5,this.STN_NAME_BASE_HEIGHT=30.390625,this.STN_NAME_LINE_GAP=14,this.STN_NAME_BG_ADJUST=.5,this.id=t,this.parents=e.parents,this.children=e.children,this.name=e.name,this.branch=e.branch}get inDegree(){return this.parents.length}get outDegree(){return this.children.length}get nameClass(){switch(this.state){case-1:return"Pass";case 0:return"Current";default:return"Future"}}get _nameTxtAnchor(){return"middle"}get _nameDX(){return 0}get _nameDY(){return 0}get nameHTML(){var t=this.name[1].split("\\");if(this.namePos)var e=this.STN_NAME_LINE_GAP-this.STN_NAME_Y-this.STN_NAME_BG_ADJUST;else e=-this.STN_NAME_LINE_GAP-this.STN_NAME_Y-this.STN_NAME_BASE_HEIGHT-10*(t.length-1);0===this.state&&$("#current_bg").attr({y:this.y+e+this.STN_NAME_Y-1.5+this._nameDY,height:this.STN_NAME_BASE_HEIGHT+10*(t.length-1)+2+1.5});for(var n=t.shift(),i=$("<text>",{dy:15,class:"rmg-name__en rmg-name__mtr--station"}).text(n);n=t.shift();)i.append($("<tspan>",{x:0,dy:10,"alignment-baseline":"middle"}).text(n));return $("<g>",{transform:`translate(${this.x+this._nameDX},${this.y+e+this._nameDY})`,"text-anchor":this._nameTxtAnchor,class:`Name ${this.nameClass}`}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--station").text(this.name[0])).append(i)}get iconClass(){return-1==this.state?"rmg-stn__mtr--pass":"rmg-stn__mtr--future"}get iconHTML(){return $("<use>",{"xlink:href":"#stn_hk",x:this.x,y:this.y,class:this.iconClass})}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}}class r extends a{constructor(t,e){super(t,e),this._intInfo=e.interchange[0][0]}get _dy(){return 0}get intTickHTML(){var t=this.namePos?180:0,e=this._intInfo[i.colour],n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y+this._dy})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get _nameClass(){return-1==this.state?"Pass":"Future"}get intNameHTML(){var[t,e,n]=Object(s.k)([this._intInfo[i.nameZH],this._intInfo[i.nameEN]],10,7),a=this.namePos?-37.703125-13*(e-1)-7*(n-1):30.953125;return a+=this._dy,$("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+a})`,class:`Name ${this._nameClass}`}).html(t[0])}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML]}}class l extends a{constructor(t,e){super(t,e),this._intCity=[],this._intLine=[],this._intColour=[],this._intNameZH=[],this._intNameEN=[],this._intInfos=e.interchange[0],e.interchange[0].forEach(t=>{this._intCity.push(t[0]),this._intLine.push(t[1]),this._intColour.push(t[2]),this._intNameZH.push(t[4]),this._intNameEN.push(t[5])})}get iconHTML(){let t=this.namePos?180:0;return $("<use>",{"xlink:href":"#int3_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:this.iconClass})}get _tickRotation(){return 0}get _dy(){return 0}get _dx(){return 0}get _tickFlip(){return 1}get intTickHTML(){let t=[];return this._intInfos.map(t=>t[i.colour]).forEach((e,n)=>{if(n>=2)return;let i=-1===this.state?"#aaa":e,s=this.namePos?-18*(2-n):18*(n+1);s+=this._dy,s*=this._tickFlip,t.push($("<use>",{"xlink:href":"#inttick_hk",stroke:i,transform:`translate(${this.x+this._dx},${this.y+s})rotate(${this._tickRotation})`,class:"rmg-line rmg-line__mtr rmg-line__change"}))}),t}get _txtAnchor(){return"middle"}get _intNameDX(){return 0}get _nameClass(){return-1==this.state?"Pass":"Future"}get intNameHTML(){let t=[],e=this._nameClass;return this._intInfos.map(t=>[t[i.nameZH],t[i.nameEN]]).forEach((n,i)=>{if(i>=2)return;let[a,r,l]=Object(s.k)(n,10,7);var o=this.namePos?-18*(2-i):18*(i+1);o+=this._dy,o*=this._tickFlip,o+=5.953125-(19.65625+13*(r-1)+7*(l-1))/2,t.push($("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x+this._intNameDX},${this.y+o})`,class:"Name "+e}).html(a[0]))}),t}get ungrpHTML(){return[...this.intTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML]}}class o extends l{get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}}class h extends l{get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}}class c extends r{constructor(t,e){e.interchange[0].push(e.interchange[1][1]),super(t,e),this._osiNames=e.interchange[1][0],this._osiType=e.change_type.substring(6,7)}get osiClass(){return"u"==this._osiType?"rmg-stn__mtr--unpaid-osi":"rmg-stn__mtr--paid-osi"}get iconHTML(){var t=this.namePos?180:0;return $("<use>",{"xlink:href":"#osi11_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _dy(){return this.namePos?-26:26}get _txtAnchor(){return"middle"}get _osiNameDX(){return 0}get osiNameHTML(){var t=this._dy+8.34375-12.515625;return $("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x+this._osiNameDX},${this.y+t})`,class:"Name "+this._nameClass}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1]))}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML,this.osiNameHTML]}}class d extends c{get _txtAnchor(){return"end"}get _osiNameDX(){return-13}}class _ extends c{get _txtAnchor(){return"start"}get _osiNameDX(){return 13}}class g extends l{constructor(t,e){e.interchange[0].unshift(...e.interchange[1].slice(1,3)),super(t,e),this._osiNames=e.interchange[1][0],this._osiType=e.change_type.split("_").reverse()[0][0]}get osiClass(){return"u"==this._osiType?"rmg-stn__mtr--unpaid-osi":"rmg-stn__mtr--paid-osi"}get iconHTML(){var t=this.namePos?180:0;return $("<use>",{"xlink:href":"#osi12_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _dy(){return this.namePos?-8:8}get _osiDY(){return this.namePos?-70.6875:62.34375}get _osiTxtAnchor(){return"middle"}get _osiDX(){return 0}get osiNameHTML(){var t=-1==this.state?"Pass":"Future";return $("<g>",{"text-anchor":this._osiTxtAnchor,transform:`translate(${this.x+this._dx+this._osiDX},${this.y+this._osiDY})`,class:`Name ${t}`}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1].split("\\")[0]).append($("<tspan>",{x:0,dy:10}).text(this._osiNames[1].split("\\")[1]||"")))}get ungrpHTML(){return[...this.intTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.osiNameHTML]}}class m extends g{get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}}class u extends g{get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}}class p extends g{constructor(t,e){super(t,e),this._origIntInfo=e.interchange[0][2]}get _nameTxtAnchor(){return this._osiTxtAnchor}get _nameDY(){return this.namePos?11.515625:-11.515625}get origIntTickHTML(){var t=this.namePos?0:180,e=this._origIntInfo[i.colour],n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get origIntNameHTML(){var[t,e,n]=Object(s.k)([this._origIntInfo[i.nameZH],this._origIntInfo[i.nameEN]],10,7),a=this.namePos?30.953125:-37.703125-13*(e-1)-7*(n-1);return $("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x-this._nameDX},${this.y+a})`,class:`Name ${this._nameClass}`}).html(t[0])}get _osiNameDX(){return 0}get osiNameHTML(){var t=this._dy-(this.namePos?27:-27)+8.34375-12.515625;return $("<g>",{"text-anchor":this._osiTxtAnchor,transform:`translate(${this.x+this._osiNameDX},${this.y+t})`,class:"Name "+this._nameClass}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1]))}get ungrpHTML(){return[...this.intTickHTML,this.origIntTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.origIntNameHTML,this.osiNameHTML]}}class f extends p{get _nameDX(){return 3}get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}get _osiNameDX(){return 13}get _osiTxtAnchor(){return"start"}}class w extends p{get _nameDX(){return-3}get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}get _osiNameDX(){return-13}get _osiTxtAnchor(){return"end"}}class b extends g{constructor(t,e){super(t,e),[this._origIntCity,this._origIntLine,this._origIntColour,this._origIntFg,this._origIntNameZH,this._origIntNameEN]=e.interchange[0][2]}get origIntTickHTML(){var t=this.namePos?180:0,e=this._origIntColour,n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get origIntNameHTML(){var[t,e,n]=Object(s.k)([this._origIntNameZH,this._origIntNameEN],10,7),i=this.namePos?-37.703125-13*(e-1)-7*(n-1):30.953125;return $("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+i})`,class:`Name ${this._nameClass}`}).html(t[0])}get iconHTML(){var t=this.namePos?1:-1,e="lineend"==this.children[0]?1:-1;this.children[0];return $("<use>",{"xlink:href":"#osi22end_hk",transform:`translate(${this.x},${this.y})scale(${e},${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _tickRotation(){return"lineend"==this.children[0]?-90:90}get _tickFlip(){return-1}get _dx(){return"lineend"==this.children[0]?41:-41}get _dy(){return this.namePos?18:-18}get _intNameDX(){return"lineend"==this.children[0]?65:-65}get _txtAnchor(){return"lineend"==this.children[0]?"start":"end"}get _osiDY(){return this.namePos?-26.6875:18.34375}get _osiTxtAnchor(){return"lineend"==this.children[0]?"start":"end"}get _osiDX(){return"lineend"==this.children[0]?-9:9}get ungrpHTML(){return[...this.intTickHTML,this.origIntTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.origIntNameHTML,this.osiNameHTML]}}},function(t,e){t.exports=mdc.textField},function(t,e){t.exports=mdc.dialog},function(t,e){t.exports=jQuery},function(t,e){t.exports=mdc.ripple},function(t,e){t.exports=mdc.select},function(t,e){t.exports=mdc.list},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var i=n(0),s=n(1);class a{constructor(t){this._longInterval=1,this.stations={},this._svgHeight=t.svg_height,this._svgWidth=t.svg_width,this._svgDestWidth=t.svg_dest_width,this._showOuter=t.show_outer,[this.themeCity,this.themeLine,this._themeColour,this._fgColour]=t.theme,this.yPc=t.y_pc,this._padding=t.padding,this._stripPc=t.strip_pc,this._branchSpacing=t.branch_spacing,this._txtFlip=t.txt_flip,this._lineNames=t.line_name;for(let[e,n]of Object.entries(t.stn_list))this.stations[e]=this._initStnInstance(e,n);this._currentStnId=t.current_stn_idx,this._direction=t.direction,this._platformNum=t.platform_num,this._destLegacy=t.dest_legacy,this._charForm=t.char_form;for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t),e.namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t))}_initStnInstance(t,e){switch(e.change_type){case"int2":return new s.a(t,e);case"int3_l":return new s.b(t,e);case"int3_r":return new s.c(t,e);case"osi11_ul":case"osi11_pl":return new s.e(t,e);case"osi11_ur":case"osi11_pr":return new s.f(t,e);case"osi12_ul":case"osi12_pl":return new s.g(t,e);case"osi12_ur":case"osi12_pr":return new s.h(t,e);case"osi22_pl":case"osi22_ul":return"linestart"==e.parents[0]||"lineend"==e.children[0]?new s.i(t,e):new s.j(t,e);case"osi22_pr":case"osi22_ur":return"linestart"==e.parents[0]||"lineend"==e.children[0]?new s.i(t,e):new s.k(t,e);default:return new s.m(t,e)}}set svgDestWidth(t){isNaN(t)||t<=0||(this._svgDestWidth=t,Object(i.n)("svg_dest_width",t),this.drawSVGFrame(),this.drawStrip(),this.drawDestInfo(),this.loadFonts())}set svgWidth(t){if(!(isNaN(t)||t<=0)){this._svgWidth=t,Object(i.n)("svg_width",t),this.drawSVGFrame();for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.loadFonts(),this.updateStnNameBg()}}set yPc(t){this._yPc=t,Object(i.n)("y_pc",t);let e=t*this._svgHeight/100;$("g#main").attr("transform",`translate(0,${e})`)}set padding(t){t=Number(t),this._padding=t,Object(i.n)("padding",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.loadFonts(),this.updateStnNameBg()}set branchSpacing(t){this._branchSpacing=t,Object(i.n)("branch_spacing",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.loadFonts(),this.updateStnNameBg()}set txtFlip(t){this._txtFlip=t,Object(i.n)("txt_flip",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t));$("#stn_icons").empty(),this.drawStns(),this.loadFonts(),this.updateStnNameBg()}set themeColour(t){this._themeColour=t[0],this._fgColour=t[1];var e=Object(i.g)();e.theme[2]=t[0],e.theme[3]=t[1],Object(i.l)(e),this.fillThemeColour()}set direction(t){this._direction=t,Object(i.n)("direction",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}set platformNum(t){this._platformNum=t,Object(i.n)("platform_num",t),$(".rmg-name__platformnum").text(t)}set charForm(t){this._charForm=t,Object(i.n)("char_form",t),$(".rmg-name__char-trad, .rmg-name__char-cn, .rmg-name__char-tw, .rmg-name__char-jp").removeClass("rmg-name__char-trad rmg-name__char-cn rmg-name__char-tw rmg-name__char-jp").addClass(`rmg-name__char-${t}`)}set lineNames(t){this._lineNames=t,Object(i.n)("line_name",t),this.drawDestInfo(),this.loadFonts()}set destLegacy(t){this._destLegacy=t,Object(i.n)("dest_legacy",t),this.drawDestInfo(),this.loadFonts()}set currentStnId(t){this._currentStnId=t,Object(i.n)("current_stn_idx",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg()}_rightWideFactor(t){var e=0;let n=this.stations[t];n instanceof s.c&&(e+=this._longInterval),n instanceof s.f&&(e+=this._longInterval),n instanceof s.h&&(e+=this._longInterval),n instanceof s.l&&(e+=this._longInterval);return["Int3RStation","OSI11RStation","OSI12RStation","OSI22LStation","OSI22RStation"].includes(this.stations[t].constructor.name)&&(e+=this._longInterval),2==this._stnOutdegree(t)&&(e+=this._longInterval/2),2==this._stnIndegree(this.stations[t].children[0])&&(e+=this._longInterval/2),e}_leftWideFactor(t){var e=0;let n=this.stations[t];return n instanceof s.b&&(e+=this._longInterval),n instanceof s.e&&(e+=this._longInterval),n instanceof s.g&&(e+=this._longInterval),n instanceof s.l&&(e+=this._longInterval),2==this._stnIndegree(t)&&(e+=this._longInterval/2),2==this._stnOutdegree(this.stations[t].parents[0])&&(e+=this._longInterval/2),e}_pathWeight(t,e){return this.stations[t].children.includes(e)?1+this._rightWideFactor(t)+this._leftWideFactor(e):-1/0}_cp(t,e){let n=this;if(t==e)return{len:0,nodes:[t]};let i=[],s=[];this.stations[t].children.forEach(a=>{let r=n._cp(a,e);r.len<0||(i.push(this._pathWeight(t,a)+r.len),r.nodes.unshift(t),s.push(r.nodes))});let a=Math.max(...i);return{len:a,nodes:s[i.indexOf(a)]}}get criticalPath(){let t=[],e=[];this.leftDests.forEach(n=>{this.rightDests.forEach(i=>{let s=this._cp(n,i);t.push(s.len),e.push(s.nodes)})});let n=Math.max(...t);return{len:n,nodes:e[t.indexOf(n)]}}_topoOrder(t,e=[]){var n=this;return e.push(t),this.stations[t].children.forEach(i=>{2==this._stnIndegree(i)&&0==this.stations[i].parents.indexOf(t)||e.concat(n._topoOrder(i,e))}),e}get tpo(){let t=this._topoOrder("linestart");return t.slice(1,t.length-1)}get stripY(){return this._stripPc*this._svgHeight/100}get turningRadius(){return this._branchSpacing/2*(Math.sqrt(2)/(Math.sqrt(2)-1))}get lineXs(){return[this._svgWidth*this._padding/100,this._svgWidth*(1-this._padding/100)]}get leftDests(){return this.stations.linestart.children}get rightDests(){return this.stations.lineend.parents}get lValidDests(){return Array.from(new Set(this.routes.filter(t=>-1!==t.indexOf(this._currentStnId)).map(t=>t.filter(t=>"lineend"!==t&&"linestart"!==t)[0])))}get rValidDests(){return Array.from(new Set(this.routes.filter(t=>-1!==t.indexOf(this._currentStnId)).map(t=>t.filter(t=>"lineend"!==t&&"linestart"!==t).reverse()[0])))}_stnIndegree(t){return this.stations[t].inDegree}_stnOutdegree(t){return this.stations[t].outDegree}_stnXShare(t){var e=this.criticalPath;if(e.nodes.includes(t))return this._cp(e.nodes[0],t).len;for(var n=t,i=t,s=!1,a=!1;;){var r=this.stations[n].parents[0];if("linestart"==r){s=!0;break}if(n=r,this._stnOutdegree(n)>1)break}for(;;){var l=this.stations[i].children;if("lineend"==l[0]){a=!0;break}if(i=l[0],this._stnIndegree(i)>1)break}var o=this._cp(n,t).len,h=this._cp(t,i).len;if(s){var c=this._cp(e.nodes[0],i).len;return this._stnXShare(i)-h/(o+h)*c}if(a)c=this._cp(n,e.nodes.slice(-1)[0]).len;else c=this._cp(n,i).len;return this._stnXShare(n)+o/(o+h)*c}_stnRealX(t){let[e,n]=this.lineXs;return e+this._stnXShare(t)/this.criticalPath.len*(n-e)}_stnYShare(t){return this._stnYShareMTR(t)}_stnYShareMTR(t){if(["linestart","lineend"].includes(t)||this._stnIndegree(t)>1||this._stnOutdegree(t)>1)return 0;var e=this.stations[t].parents[0];let n=this;return e?1==this._stnOutdegree(e)?n._stnYShareMTR(e):0==this.stations[e].children.indexOf(t)?1:-1:0}_stnRealY(t){return-this._stnYShare(t)*this._branchSpacing}_isSuccessor(t,e){for(let n of this.routes){let i=n.indexOf(t),s=n.indexOf(e);if(-1!==i&&-1!==s&&i<s)return!0}return!1}_isPredecessor(t,e){for(let n of this.routes){let i=n.indexOf(t),s=n.indexOf(e);if(-1!==i&&-1!==s&&s<i)return!0}return!1}_stnState(t){return t==this._currentStnId?0:"r"==this._direction?this._isSuccessor(this._currentStnId,t)?1:-1:this._isPredecessor(this._currentStnId,t)?1:-1}_stnNamePos(t){if("linestart"===t)return!0;let e=this,n=this.criticalPath.nodes.indexOf(t)%2;if(-1===n){let n=this.stations[t].parents[0];return 2===this._stnOutdegree(n)?e._stnNamePos(n):!e._stnNamePos(n)}return 1===n}drawSVGFrame(){$("#railmap, #outer").attr({width:this._svgWidth,height:this._svgHeight}),$("#destination, #dest_outer").attr({width:this._svgDestWidth,height:this._svgHeight})}showFrameOuter(){this._showOuter?$("#outer, #dest_outer").show():$("#outer, #dest_outer").hide()}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html())}updateStnNameBg(){var t=Object(i.j)($(`#stn_icons > #${this._currentStnId} > .Name`)[0],"railmap");$("#current_bg").attr({x:t.x-3,width:t.width+6})}get stnDX(){return this.turningRadius-this._branchSpacing/2}get stnDY(){return this._branchSpacing/2}get stnExtraH(){var[t,e]=this.lineXs;return(e-t)/this.criticalPath.len*this._longInterval}get stnSpareH(){var[t,e]=this.lineXs,n=((e-t)/this.criticalPath.len-2*this.stnDX)/2;return n<0&&console.warn(`SVG width too small! ${n}`),n}get pathTurnENE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${-this.stnDY}`}get pathTurnNEE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${-this.stnDY}`}get pathTurnESE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${this.stnDY}`}get pathTurnSEE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${this.stnDY}`}_linePath(t){var[e,n,i]=[],s=[],{stnExtraH:a,stnSpareH:r,pathTurnESE:l,pathTurnSEE:o,pathTurnENE:h,pathTurnNEE:c,stnDX:d}=this;return t.forEach(t=>{var[_,g]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!n&&0!==n)return[e,i,n]=[t,_,g],void s.push(`M ${_},${g}`);g>n?(s.push(0===g?`h ${_-i-a*this._leftWideFactor(t)-r-2*d}`:`h ${a*this._rightWideFactor(e)+r}`),s.push(l,o)):g<n&&(s.push(0===g?`h ${_-i-a*this._leftWideFactor(t)-r-2*d}`:`h ${a*this._rightWideFactor(e)+r}`),s.push(h,c)),s.push(`H ${_}`),[e,i,n]=[t,_,g]}),s.join(" ").replace(/( H ([\d.]+))+/g," H $2")}drawLine(){this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),n=t.filter(t=>this.stations[t].state<=0);1===e.length&&(n=t),0==e.filter(t=>-1!==n.indexOf(t)).length&&e.length&&(n[0]===t[0]?n.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&n.length?(n=t,e=[]):n.unshift(e[e.length-1])),$("#line_main").append($("<path>",{d:this._linePath(e)})),$("#line_pass").append($("<path>",{d:this._linePath(n)}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}drawStrip(){$("#strip").attr("d",`M 0,${this.stripY} H ${this._svgWidth}`),$("#dest_strip").attr("d",`M 0,${this.stripY} H ${this._svgDestWidth}`)}fillThemeColour(){$("#line_main, #strip, #dest_strip").attr("stroke",this._themeColour),$("#dest_name > #platform > circle").attr("fill",this._themeColour)}drawDestInfo(){$("#dest_name > #platform > text").text(this._platformNum);let t=this[this._direction+"ValidDests"],e="l"===this._direction?"start":"end";var[n,i]=[0,1].map(e=>t.map(t=>this.stations[t].name[e].replace(/\\/g," ")).join("/"));if(this._destLegacy){var[s,a]=this._lineNames;a+=" "}else var s=a="";$("#dest_name > g:last-child text").eq(0).text(`${s}往${n}`),$("#dest_name > g:last-child text").eq(1).text(`${a}to ${i}`);var r=310+$("#dest_name > g:last-child")[0].getBoundingClientRect().width+45+50,l="l"==this._direction?1:-1,o=(this._svgDestWidth-l*r)/2,h=90*(1-l),c=o+285*l,d=c+120*l;$("#dest_name > use").attr("transform",`translate(${o},130)rotate(${h})`),$("#dest_name > #platform").attr("transform",`translate(${c},130)`),$("#dest_name > g:last-child").attr({transform:`translate(${d},105)`,"text-anchor":e})}loadFonts(){$(".rmg-name__zh").addClass(`rmg-name__char-${this._charForm}`)}updateStnName(t,e,n){let s=Object(i.g)();s.stn_list[t].name=e,s.stn_list[t].num=n,Object(i.l)(s),this.stations[t].name=e,this.stations[t].stnNum=n,$(`#stn_icons #${t}`).remove(),$("#stn_icons").append(this.stations[t].html),$("#stn_icons").html($("#stn_icons").html()),this.leftDests.includes(t)&&"l"==this._direction?this.drawDestInfo():this.rightDests.includes(t)&&"r"==this._direction&&this.drawDestInfo(),this.loadFonts(),t==this._currentStnId&&this.updateStnNameBg()}updateStnTransfer(t,e,n=null){var s=this.stations[t].constructor.name,r=Object(i.g)();if(r.stn_list[t].change_type=e,"none"==e?(delete r.stn_list[t].transfer,r.stn_list[t].interchange=[[]]):r.stn_list[t].interchange=n,Object(i.l)(r),this.stations[t]=this._initStnInstance(t,r.stn_list[t]),s!=this.stations[t].constructor.name){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t),e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip()}else this.stations[t].x=this._stnRealX(t),this.stations[t].y=this._stnRealY(t),this.stations[t].namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t),this.stations[t].state=this._stnState(t),$(`#stn_icons #${t}`).remove(),$("#stn_icons").append(this.stations[t].html),$("#stn_icons").html($("#stn_icons").html());this.loadFonts(),this.updateStnNameBg()}removeStn(t){var e=Object(i.g)(),n=this.stations[t].parents,s=this.stations[t].children,r=!0;for(let e in this.stations)if(![t,"linestart","lineend"].includes(e)&&0==this._stnYShareMTR(e)){r=!1;break}if(2==n.length&&2==s.length)return!1;if(r)return!1;if(4==Object.keys(e.stn_list).length)return!1;if(2==n.length||2==s.length)n.forEach(t=>{e.stn_list[t].children=s,this.stations[t].children=s}),s.forEach(t=>{e.stn_list[t].parents=n,this.stations[t].parents=n}),1==n.length&&(e.stn_list[n[0]].branch.right=this.stations[t].branch.right,this.stations[n[0]].branch.right=this.stations[t].branch.right),1==s.length&&(e.stn_list[s[0]].branch.left=this.stations[t].branch.left,this.stations[s[0]].branch.left=this.stations[t].branch.left);else if(2==this._stnOutdegree(n[0])&&2==this._stnIndegree(s[0])){var l=this.stations[n[0]].children.indexOf(t),o=this.stations[s[0]].parents.indexOf(t);e.stn_list[n[0]].children.splice(l,1),this.stations[n[0]].children.splice(l,1),e.stn_list[s[0]].parents.splice(o,1),this.stations[s[0]].parents.splice(o,1),e.stn_list[n[0]].branch.right=[],this.stations[n[0]].branch.right=[],e.stn_list[s[0]].branch.left=[],this.stations[s[0]].branch.left=[]}else n.forEach(n=>{var i=e.stn_list[n].children.indexOf(t);s.length?(e.stn_list[n].children[i]=s[0],this.stations[n].children[i]=s[0]):(e.stn_list[n].children.splice(i,1),this.stations[n].children.splice(i,1)),this.stations[n].branch.right[1]===t&&(this.stations[n].branch.right[1]=s[0],e.stn_list[n].branch.right[1]=s[0])}),s.forEach(i=>{var s=e.stn_list[i].parents.indexOf(t);n.length?(e.stn_list[i].parents[s]=n[0],this.stations[i].parents[s]=n[0]):(e.stn_list[i].parents.splice(s,1),this.stations[i].parents.splice(s,1)),this.stations[i].branch.left[1]===t&&(this.stations[i].branch.left[1]=n[0],e.stn_list[i].branch.left[1]=n[0])});delete e.stn_list[t],delete this.stations[t];if(this._currentStnId==t){var h=Object.keys(this.stations)[2];this._currentStnId=h,e.current_stn_idx=h,!0}Object(i.l)(e),n.concat(s).forEach(t=>{["linestart","lineend"].includes(t)||(this.stations[t]=this._initStnInstance(t,e.stn_list[t]))});for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t),e.state=this._stnState(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg(),!0}newStnPossibleLoc(t,e){switch("before"==t?this._stnIndegree(e):this._stnOutdegree(e)){case 2:return[1,1,1,[],[]];case 1:if(0==this._stnYShareMTR(e)){let n=this.newBranchPossibleEnd(t,e);return n=n.length?n:[],[1,0,0,n,n]}return this._stnYShareMTR(e)<0?"before"==t?[this._stnOutdegree(this.stations[e].parents[0])-1,0,1,[],[]]:[this._stnIndegree(this.stations[e].children[0])-1,0,1,[],[]]:"before"==t?[this._stnOutdegree(this.stations[e].parents[0])-1,1,0,[],[]]:[this._stnIndegree(this.stations[e].children[0])-1,1,0,[],[]]}return[0,0,0,[],[]]}newBranchPossibleEnd(t,e){let n=[];if("before"==t){for(;1==this._stnIndegree(e);)e=this.stations[e].parents[0],n.unshift(e);n.pop()}else{for(;1==this._stnOutdegree(e);)e=this.stations[e].children[0],n.push(e);n.shift()}return n}addStn(t,e,n,s){let r=Object(i.h)();for(;Object.keys(this.stations).includes(r);)r=Object(i.h)();let l=Object(i.g)(),o={};"before"==t?"centre"==n?(o.parents=this.stations[e].parents,0==this._stnIndegree(e)&&0!=this._stnYShareMTR(e)?o.children=this.leftDests:0!=this._stnYShareMTR(e)?(o.children=this.stations[this.stations[e].parents[0]].children,o.branch={left:[],right:this.stations[o.parents[0]].branch.right},this.stations[o.parents[0]].branch.right=[],l.stn_list[o.parents[0]].branch.right=[]):(o.children=[e],o.branch={left:this.stations[e].branch.left,right:[]},this.stations[e].branch.left=[],l.stn_list[e].branch.left=[]),o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]}),o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]})):"upper"==n?(o.branch={left:[],right:[]},2==this._stnIndegree(e)?(this.stations[e].branch.left[1]==this.stations[e].parents[0]&&(this.stations[e].branch.left[1]=r,l.stn_list[e].branch.left[1]=r),o.parents=this.stations[e].parents.slice(0,1),o.children=[e],o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]}),this.stations[e].parents[0]=r,l.stn_list[e].parents[0]=r):(o.parents=this.stations[e].parents,o.children=[e],o.parents.forEach(t=>{this.stations[t].children[0]=r,l.stn_list[t].children[0]=r,this.stations[t].branch.right[1]===e&&(this.stations[t].branch.right[1]=r,l.stn_list[t].branch.right[1]=r)}),o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]}))):"lower"==n?(o.branch={left:[],right:[]},2==this._stnIndegree(e)?(this.stations[e].branch.left[1]==this.stations[e].parents[1]&&(this.stations[e].branch.left[1]=r,l.stn_list[e].branch.left[1]=r),o.parents=this.stations[e].parents.slice(1),o.children=[e],o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]}),this.stations[e].parents[1]=r,l.stn_list[e].parents[1]=r):(o.parents=this.stations[e].parents,o.children=[e],o.parents.forEach(t=>{let n=this.stations[t].children.length;this.stations[t].children[n-1]=r,l.stn_list[t].children[n-1]=r,this.stations[t].branch.right[1]===e&&(this.stations[t].branch.right[1]=r,l.stn_list[t].branch.right[1]=r)}),o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]}))):"newupper"==n?(o.branch={left:[],right:[]},this.stations[e].branch.left=["through",r],l.stn_list[e].branch.left=["through",r],this.stations[s].branch.right=["through",r],l.stn_list[s].branch.right=["through",r],o.parents=[s],o.children=[e],this.stations[s].children.unshift(r),l.stn_list[s].children.unshift(r),this.stations[e].parents.unshift(r),l.stn_list[e].parents.unshift(r)):"newlower"==n&&(o.branch={left:[],right:[]},this.stations[e].branch.left=["through",r],l.stn_list[e].branch.left=["through",r],this.stations[s].branch.right=["through",r],l.stn_list[s].branch.right=["through",r],o.parents=[s],o.children=[e],this.stations[s].children.push(r),l.stn_list[s].children.push(r),this.stations[e].parents.push(r),l.stn_list[e].parents.push(r)):"centre"==n?(o.children=this.stations[e].children,0==this._stnOutdegree(e)&&0!=this._stnYShareMTR(e)?o.parents=this.rightDests:0!=this._stnYShareMTR(e)?(o.parents=this.stations[this.stations[e].children[0]].parents,o.branch={left:this.stations[o.children[0]].branch.left,right:[]},this.stations[o.children[0]].branch.left=[],l.stn_list[o.children[0]].branch.left=[]):(o.parents=[e],o.branch={left:[],right:this.stations[e].branch.right},this.stations[e].branch.right=[],l.stn_list[e].branch.right=[]),o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]}),o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]})):"upper"==n?(o.branch={left:[],right:[]},2==this._stnOutdegree(e)?(this.stations[e].branch.right[1]==this.stations[e].children[0]&&(this.stations[e].branch.right[1]=r,l.stn_list[e].branch.right[1]=r),o.children=this.stations[e].children.slice(0,1),o.parents=[e],o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]}),this.stations[e].children[0]=r,l.stn_list[e].children[0]=r):(o.children=this.stations[e].children,o.parents=[e],o.children.forEach(t=>{this.stations[t].parents[0]=r,l.stn_list[t].parents[0]=r,this.stations[t].branch.left[1]===e&&(this.stations[t].branch.left[1]=r,l.stn_list[t].branch.left[1]=r)}),o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]}))):"lower"==n?(o.branch={left:[],right:[]},2==this._stnOutdegree(e)?(this.stations[e].branch.right[1]==this.stations[e].children[1]&&(this.stations[e].branch.right[1]=r,l.stn_list[e].branch.right[1]=r),o.children=this.stations[e].children.slice(1),o.parents=[e],o.children.forEach(t=>{this.stations[t].parents=[r],l.stn_list[t].parents=[r]}),this.stations[e].children[1]=r,l.stn_list[e].children[1]=r):(o.children=this.stations[e].children,o.parents=[e],o.children.forEach(t=>{1===this._stnIndegree(t)?(this.stations[t].parents[0]=r,l.stn_list[t].parents[0]=r):(this.stations[t].parents[1]=r,l.stn_list[t].parents[1]=r),this.stations[t].branch.left[1]===e&&(this.stations[t].branch.left[1]=r,l.stn_list[t].branch.left[1]=r)}),o.parents.forEach(t=>{this.stations[t].children=[r],l.stn_list[t].children=[r]}))):"newupper"==n?(o.branch={left:[],right:[]},this.stations[e].branch.right=["through",r],l.stn_list[e].branch.right=["through",r],this.stations[s].branch.left=["through",r],l.stn_list[s].branch.left=["through",r],o.children=[s],o.parents=[e],this.stations[s].parents.unshift(r),l.stn_list[s].parents.unshift(r),this.stations[e].children.unshift(r),l.stn_list[e].children.unshift(r)):"newlower"==n&&(o.branch={left:[],right:[]},this.stations[e].branch.right=["through",r],l.stn_list[e].branch.right=["through",r],this.stations[s].branch.left=["through",r],l.stn_list[s].branch.left=["through",r],o.children=[s],o.parents=[e],this.stations[s].parents.push(r),l.stn_list[s].parents.push(r),this.stations[e].children.push(r),l.stn_list[e].children.push(r)),o.name=Object(i.f)(r),o.change_type="none",o.num="00",o.interchange=[[]],l.stn_list[r]=o,Object(i.l)(l),this.stations[r]=this._initStnInstance(r,o),this.stations[e]=this._initStnInstance(e,Object(i.g)().stn_list[e]);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t),e.namePos=this._txtFlip?!this._stnNamePos(t):this._stnNamePos(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg(),[r,o]}reverseStns(){var t=Object(i.g)();for(let[n,i]of Object.entries(this.stations))if("linestart"===n)t.stn_list.lineend.parents=i.children.reverse(),t.stn_list.lineend.branch={left:i.branch.right,right:[]};else if("lineend"===n)t.stn_list.linestart.children=i.parents.reverse(),t.stn_list.linestart.branch={left:[],right:i.branch.left};else{var e=i.children.reverse().map(t=>{switch(t){case"linestart":return"lineend";case"lineend":return"linestart";default:return t}});t.stn_list[n].children=i.parents.reverse().map(t=>{switch(t){case"linestart":return"lineend";case"lineend":return"linestart";default:return t}}),t.stn_list[n].parents=e,t.stn_list[n].branch.left=i.branch.right,t.stn_list[n].branch.right=i.branch.left}Object(i.l)(t),location.reload(!0)}updateBranchType(t,e,n){let s=i.a[e];if(this.stations[t].branch[s][0]===n)return;this.stations[t].branch[s][0]=n;let r=Object(i.g)();r.stn_list[t].branch[s][0]=n,Object(i.l)(r);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}updateBranchFirst(t,e,n){let s=i.a[e];if(this.stations[t].branch[s][1]===n)return!1;let r=n,l=Object(i.g)();if("right"===s){for(;1===this.stations[r].inDegree;)r=this.stations[r].children[0];let e=this.stations[t].children.indexOf(n);this.stations[t].branch.right[1]=l.stn_list[t].branch.right[1]=n,this.stations[r].branch.left[1]=l.stn_list[r].branch.left[1]=this.stations[r].parents[e]}else{for(;1===this.stations[r].outDegree;)r=this.stations[r].parents[0];let e=this.stations[t].parents.indexOf(n);this.stations[t].branch.left[1]=l.stn_list[t].branch.left[1]=n,this.stations[r].branch.right[1]=l.stn_list[r].branch.right[1]=this.stations[r].children[e]}Object(i.l)(l);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts(),!0}updateBranchPos(t,e,n){let s=i.a[e];if("right"===s){if(this.stations[t].children.indexOf(this.stations[t].branch.right[1])===n)return}else if(this.stations[t].parents.indexOf(this.stations[t].branch.left[1])===n)return;let r=this.stations[t].branch[s][1],l=Object(i.g)();if("right"===s){for(;1===this.stations[r].inDegree;)r=this.stations[r].children[0];this.stations[t].children.reverse(),l.stn_list[t].children.reverse(),this.stations[r].parents.reverse(),l.stn_list[r].parents.reverse()}else{for(;1===this.stations[r].outDegree;)r=this.stations[r].parents[0];this.stations[t].parents.reverse(),l.stn_list[t].parents.reverse(),this.stations[r].children.reverse(),l.stn_list[r].children.reverse()}Object(i.l)(l);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}static clearSVG(){$("#stn_icons, #line_main, #line_pass").empty()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.fillThemeColour(),t.drawLine(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}get branches(){for(var t=["linestart"],e=[[]],n=0;t.length;){var i=t.shift(),s=e[n][0]||null,a=[i];for(s&&a.unshift(s);"lineend"!=i&&("linestart"==i||s!=this.stations[i].branch.left[1]);){s=i;var r=this.stations[s].children;switch(r.length){case 1:i=r[0];break;case 2:if(e.push([s]),"linestart"==s)var l=this.stations[s].branch.right[1];else l=this.stations[s].branch.right[1];t.push(l),i=r.filter(t=>t!=l)[0]}a.push(i)}e[n]=a,n++}return e.map(t=>t.filter(t=>!["linestart","lineend"].includes(t)))}get routes(){for(var t=["linestart"],e=[["linestart"]],n=0;t.length;){var i=t.shift(),s=e[n].slice().reverse()[0]||null;for(s&&"linestart"!==i?e[n].push(i):e[n]=[i];"lineend"!==i;){s=i;var a=this.stations[s].children;switch(a.length){case 1:i=a[0];break;case 2:var r=this.stations[s].branch.right[1];"through"===this.stations[s].branch.right[0]?(e.push(e[n].slice()),t.push(r)):0===n&&(e.push([s]),t.push(r)),i=a.filter(t=>t!=r)[0]}if(e[n].push(i),s===this.stations[i].branch.left[1]&&"nonthrough"===this.stations[i].branch.left[0])break}n++}return e}}},function(t,e){t.exports=mdc.tabBar},function(t,e){t.exports=mdc.slider},function(t,e){t.exports=mdc.switchControl},function(t,e){t.exports=mdc.iconButton},,function(t,e,n){"use strict";n.r(e);var i=n(0),s=n(8),a=n(3),r=n(7),l=n(5);var o=n(4),h=function(t,e,n,i){return new(n||(n=Promise))((function(s,a){function r(t){try{o(i.next(t))}catch(t){a(t)}}function l(t){try{o(i.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,l)}o((i=i.apply(t,e||[])).next())}))};var c=n(2),d=n(10);var _=n(6),g=n(11);function m(){const t=r.MDCList.attachTo($("#design_list_mtr")[0]),e=a.MDCDialog.attachTo($("#design_char_diag")[0]),n=new g.MDCSwitch($("#legacy")[0]);Promise.resolve(Object(i.g)()).then(t=>{$("#design_char_diag")[0].dispatchEvent(new CustomEvent("MDCDialog:closed",{detail:{action:t.char_form}})),n.checked=t.dest_legacy}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 0:window.myLine.txtFlip=!Object(i.g)().txt_flip;break;case 1:e.open()}}),e.listen("MDCDialog:closed",t=>{let e=t.detail.action;"close"!=e&&(window.myLine.charForm=e,$("#design_list_mtr").find("li#char .mdc-list-item__secondary-text").text((t=>$("#design_char_diag").find("li").filter((e,n)=>n.dataset.mdcDialogAction===t).find("span").text())(e)))}),$(n.root_).find("input").on("change",t=>window.myLine.destLegacy=t.target.checked)}var u=n(9),p=n(12);const f=(t,e,n)=>$("<div>",{id:t,class:"mdc-card mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-2-phone station-card"}).append($("<div>",{class:"mdc-card__primary-action"}).append($("<div>",{class:"mdc-card__media mdc-card__media--16-9"})).append($("<div>",{class:"mdc-card__media-content station-card__content"}).html(e.join("<br>")).prepend($("<span>").css("display","gzmtr"===window.urlParams.get("style")?"inline":"none").text(n+" ")))).append($("<div>",{class:"mdc-card__actions"}).append($("<div>",{class:"mdc-card__action-icons"}).append($("<button>",{title:"Set As Current",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("my_location")).append($("<button>",{title:"Interchange",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("edit")).append($("<button>",{title:"Remove",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("delete_forever"))));function w(){var t=$("#stn_transfer_diag .mdc-layout-grid__inner #int_name_zh,#int_name_en").slice(0,2).clone();t.find(".mdc-text-field").removeAttr("data-mdc-auto-init-state"),$("div#int_line").slice(1,3).after(t);const[e,n,s,r,l]=["#stn_add_diag","#stn_modify_diag","#stn_transfer_diag","#stn_delete_diag","#stn_delete_err"].map(t=>new a.MDCDialog($(t)[0])),[o,h,d,g]=["#prep","#pivot","#loc","#end"].map(t=>new _.MDCSelect($("#stn_add_diag").find(t)[0])),m=["#name_zh","#name_en"].map(t=>new c.MDCTextField($("#stn_modify_diag").find(t)[0])),w=new c.MDCTextField($("#stn_modify_diag #stn_num")[0]),b=new u.MDCTabBar($("#stn_transfer_diag .mdc-tab-bar")[0]),v=new _.MDCSelect($("#change_type")[0]),y=$("#int_city .mdc-select").map((t,e)=>new _.MDCSelect(e)).get(),x=$("#int_line .mdc-select").map((t,e)=>new _.MDCSelect(e)).get(),S=["zh","en"].map(t=>$(`div#int_name_${t}`).find(".mdc-text-field").map((t,e)=>new c.MDCTextField(e)).get()),D=["zh","en"].map(t=>new c.MDCTextField($("#stn_transfer_diag").find(`#osi_name_${t}`)[0])),[M,N]=["#tick_direc","#paid_area"].map(t=>new p.MDCIconButtonToggle($("#stn_transfer_diag").find(t)[0])),[O,T,C]=["through","first","pos"].map(t=>["left","right"].map(e=>new _.MDCSelect($(`#${e}_${t}`)[0])));var j=Object(i.g)().stn_list;window.myLine.tpo.forEach(t=>{$("#panel_stations .mdc-layout-grid__inner:first").append(f(t,j[t].name,j[t].num)),$("#pivot__selection").append($("<li>",{"data-value":t}).addClass("mdc-list-item").text(j[t].name.join()))}),$("#panel_stations .mdc-card__primary-action").on("click",t=>{var e=t.target.closest(".mdc-card").id;"add_stn"!=e&&($("#stn_modify_diag").attr("for",e),n.open())}),$('#panel_stations .mdc-card__action-icons > [title="Add"]').on("click",t=>{e.open()}),$('#panel_stations .mdc-card__action-icons > [title="Set As Current"]').on("click",t=>{var e=t.target.closest(".mdc-card").id;window.myLine.currentStnId=e}),$('#panel_stations .mdc-card__action-icons > [title="Interchange"]').on("click",t=>{$("#stn_transfer_diag").attr("for",t.target.closest(".mdc-card").id),s.open()}),$('#panel_stations .mdc-card__action-icons > [title="Remove"]').on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_delete_diag").attr("for",e),r.open()}),e.listen("MDCDialog:opening",()=>{h.selectedIndex=0}),e.listen("MDCDialog:opened",()=>{[o,h,d].forEach(t=>t.layout())}),e.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=o.value,i=h.value,a=d.value,l=g.value,[c,_]=window.myLine.addStn(e,i,a,l);console.log(e,i,a,l);var m=window.myLine.tpo[window.myLine.tpo.indexOf(c)-1]||"add_stn";$(`#panel_stations .mdc-layout-grid__inner:first #${m}`).after(f(c,_.name,_.num)),$(`#panel_stations #${c} .mdc-card__primary-action`).on("click",t=>{var e=t.target.closest(".mdc-card").id;"add_stn"!=e&&($("#stn_modify_diag").attr("for",e),n.open())}),$(`#panel_stations #${c} .mdc-card__action-icons > [title="Set As Current"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;window.myLine.currentStnId=e}),$(`#panel_stations #${c} .mdc-card__action-icons > [title="Interchange"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_transfer_diag").attr("for",e),s.open()}),$(`#panel_stations #${c} .mdc-card__action-icons > [title="Remove"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_delete_diag").attr("for",e),r.open()});var u=$("<li>",{"data-value":c,class:"mdc-list-item"}).text(_.name.join(" - "));"add_stn"==m?$("#pivot__selection").prepend(u):$(`#pivot__selection [data-value="${m}"`).after(u),$("#stn_modify_diag").attr("for",c),n.open()}}),o.listen("MDCSelect:change",t=>{$("#stn_add_diag #pivot")[0].dispatchEvent(new Event("MDCSelect:change"))}),h.listen("MDCSelect:change",t=>{var e=o.value,n=h.value,s=Object(i.g)().stn_list;for(let[t,i]of window.myLine.newStnPossibleLoc(e,n).entries())1===i||i.length?($("#loc__selection li").eq(t).show(),t>=3&&($("#end__selection").empty(),i.forEach(t=>{$("#end__selection").append($("<li>",{class:"mdc-list-item","data-value":t}).text(s[t].name.join(" - ")))}))):$("#loc__selection li").eq(t).hide();d.value=Array.from(document.querySelectorAll("#loc__selection li")).filter(t=>"none"!==t.style.display)[0].dataset.value}),d.listen("MDCSelect:change",t=>{["newupper","newlower"].includes(t.detail.value)?($("#stn_add_diag [new-branch]").show(),g.selectedIndex=0):$("#stn_add_diag [new-branch]").hide()}),n.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for");Promise.resolve(Object(i.g)().stn_list).then(t=>{m.forEach((n,i)=>n.value=t[e].name[i]),w.value=t[e].num})}),n.listen("MDCDialog:opened",()=>{m.map(t=>t.layout()),w.layout()}),$("#stn_modify_diag").find("#name_zh, #name_en, #stn_num").on("input",()=>{let t=m.map(t=>t.value);var e=w.value,n=$("#stn_modify_diag").attr("for");window.myLine.updateStnName(n,t,e),$(`#panel_stations .mdc-layout-grid__inner:first #${n} .mdc-card__media-content`).html(t.join("<br>")).prepend($("<span>",{style:"gzmtr"==window.urlParams.get("style")?"":"display:none;"}).text(e+" ")),$(`li[data-value="${n}`).text(t.join())});const L=()=>{v.layout(),y.forEach(t=>t.layout()),x.forEach(t=>t.layout()),[].concat(...S).forEach(t=>t.layout()),D.forEach(t=>t.layout())},k=()=>{[...O,...T,...C].map(t=>t.layout())};function I(t,e){e?($("#int_city, #int_line, #int_name_zh, #int_name_en").slice(4*t,4*(t+1)).show(),y[t].layout(),x[t].layout(),S.map(e=>e[t].layout())):$("#int_city, #int_line, #int_name_zh, #int_name_en").slice(4*t,4*(t+1)).hide()}b.listen("MDCTabBar:activated",t=>{switch(t.detail.index){case 0:$("#panel_interchange").show(),$("#panel_branch").hide(),L();break;case 1:$("#panel_interchange").hide(),$("#panel_branch").show(),k()}}),$.getJSON("data/city_list.json",t=>{var e=window.urlParams.get("lang");t.forEach(t=>{$("#int_city__selection.mdc-list").each((n,s)=>{$(s).append($("<li>",{class:"mdc-list-item","data-value":t.id}).text(Object(i.c)(t.country)+Object(i.i)(t.name,e)))})})}),s.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for"),n=Object(i.g)().stn_list[e];let s=Object(i.g)().theme[0];if(v.value=n.change_type.split("_")[0],"none"!==n.change_type){var a=n.interchange[0].concat(n.interchange[1]?n.interchange[1].slice(1,n.interchange[1].length):[]);a.length<3&&a.unshift([,,,,,,]),a.length<3&&a.push([,,,,,,]),console.log(a),a.forEach((t,e)=>{let n=$("#int_city__selection.mdc-list").eq(0).find(`[data-value="${t[0]||s}"]`).index();y[e].selectedIndex=n,S.forEach((n,i)=>n[e].value=t[4+i]||"")})}else{let t=$("#int_city__selection.mdc-list").eq(0).find(`[data-value="${s}"]`).index();y.forEach(e=>e.selectedIndex=t),[].concat(...S).forEach(t=>t.value="")}["none","int2"].includes(n.change_type.split("_")[0])?M.on=!0:M.on="r"==n.change_type.slice(-1),"osi"==n.change_type.substring(0,3)?(D.forEach((t,e)=>t.value=n.interchange[1][0][e]),N.on="p"==n.change_type.split("_").reverse()[0][0]):(D.forEach(t=>t.value=""),N.on=!0),(t=>{["left","right"].forEach(e=>{let n=t.branch[e][0];n?(O[i.a[e]].value=n,$(`#${e}_through__selection [data-value="na"]`).hide(),$(`#${e}_through__selection [data-value="through"]`).show(),$(`#${e}_through__selection [data-value="nonthrough"]`).show(),$(`[${e}-first-group], [${e}-pos-group]`).show()):(O[i.a[e]].value="na",$(`#${e}_through__selection [data-value="na"]`).show(),$(`#${e}_through__selection [data-value="through"]`).hide(),$(`#${e}_through__selection [data-value="nonthrough"]`).hide(),$(`[${e}-first-group], [${e}-pos-group]`).hide())}),$("#left_first__selection, #right_first__selection").empty(),Promise.resolve(Object(i.g)().stn_list).then(e=>{[0,1].forEach(n=>{t[i.b[n]].forEach(t=>{$(`#${i.a[n]}_first__selection`).append($("<li>",{class:"mdc-list-item","data-value":t}).text(e[t].name.join()))})})}).then(()=>{O.forEach((e,n)=>{T[n].selectedIndex="na"!==e.value?t[i.b[n]].indexOf(t.branch[i.a[n]][1]):0})}),C.forEach((e,n)=>{e.selectedIndex=t[i.b[n]].indexOf(t.branch[i.a[n]][1])})})(n)}),s.listen("MDCDialog:opened",t=>{L(),k()}),s.listen("MDCDialog:closed",t=>{if("close"==t.detail.action)return;var e=t.target.getAttribute("for"),n=v.value,i=M.on?"r":"l";let s=D.map(t=>t.value);var a=N.on?"p":"u",[r,l,o]=[0,1,2].map(t=>[y[t].value,x[t].value].concat($("ul#int_line__selection").eq(t).find("li span").eq(x[t].selectedIndex).attr("style").match(/#[\w\d]+/g),...S.map(e=>e[t].value)));if("none"==n)window.myLine.updateStnTransfer(e,n);else if("osi22"==n)window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[r],[s,l,o]]);else switch(n){case"int2":window.myLine.updateStnTransfer(e,n,[[l]]);break;case"osi11":window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[],[s,l]]);break;default:switch(n){case"int3":window.myLine.updateStnTransfer(e,`${n}_${i}`,[[l,o]]);break;case"osi12":window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[],[s,l,o]])}}}),v.listen("MDCSelect:change",t=>{if("int2"==t.detail.value)I(0,!1),I(1,!0),I(2,!1),$("#stn_transfer_diag #tick_direc").hide(),$("#osi_name_zh, #osi_name_en, #paid_area").hide();else if("int3"==t.detail.value)I(0,!1),I(1,!0),I(2,!0),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").hide();else if("osi11"==t.detail.value)I(0,!1),I(1,!0),I(2,!1),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").show();else if("osi12"==t.detail.value)I(0,!1),I(1,!0),I(2,!0),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").show();else if("osi22"==t.detail.value){I(0,!0),I(1,!0),I(2,!0),$("#osi_name_zh, #osi_name_en, #paid_area").show();let t=Object(i.g)().stn_list[$("#stn_transfer_diag").attr("for")];"linestart"==t.parents[0]||"lineend"==t.children[0]?$("#tick_direc").hide():$("#tick_direc").show()}else $("#stn_transfer_diag #panel_interchange [id]div").slice(1).hide(),$("#tick_direc, #paid_area").hide()}),y.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{-1!==t.detail.index&&$.getJSON(`data/${t.detail.value}.json`,t=>{var n=window.urlParams.get("lang");$("#int_line__selection.mdc-list").eq(e).empty(),t.forEach(t=>{$("#int_line__selection.mdc-list").eq(e).append(`<li class="mdc-list-item" data-value="${t.id}">\n                        <span style="background:${t.colour};color:${t.fg||"#fff"};">&nbsp;${Object(i.i)(t.name,n)}&nbsp;</span>\n                        </li>`)});var s=$("#stn_transfer_diag").attr("for"),a=Object(i.g)().stn_list[s];if("none"!==a.change_type){var r=a.interchange[0].concat(a.interchange[1]?a.interchange[1].slice(1,a.interchange[1].length):[]);r.length<3&&r.unshift([,,,,,,]),r.length<3&&r.push([,,,,,,]);var l=$("#int_line__selection.mdc-list").eq(e).find(`[data-value="${r[e][1]}"]`).index();x[e].selectedIndex=-1==l?0:l}else x[e].selectedIndex=0})})}),O.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if("na"===t.detail.value)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchType(n,e,t.detail.value)})}),T.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if(1===$(`#${i.a[e]}_first__selection`).children().length)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchFirst(n,e,t.detail.value)&&(C[e].selectedIndex=0===C[e].selectedIndex?1:0)})}),C.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if("na"===O[e].value)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchPos(n,e,t.detail.index)})}),r.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for");$("#stn_delete_diag #err_stn").text(Object(i.g)().stn_list[e].name.join(" - "))}),r.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=$(t.target).attr("for");window.myLine.removeStn(e)?($(`#panel_stations .mdc-layout-grid__inner #${e}`).remove(),$(`#pivot__selection [data-value="${e}"]`).remove()):l.open()}})}switch((window.urlParams.get("lang")||localStorage.rmgLang||navigator.language.split("-").slice(0,2).join("-")).toLowerCase()){case"zh-cn":case"zh-hans":window.urlParams.set("lang","zh-Hans");break;case"zh":case"zh-hk":case"zh-tw":window.urlParams.set("lang","zh-HK");break;default:window.urlParams.set("lang","en")}switch(window.urlParams.get("style")){case"mtr":case"gzmtr":case"shmetro":break;default:window.urlParams.set("style","mtr")}history.pushState({url:window.location.href},null,"?"+window.urlParams.toString()),o("head").append(...["share","destination","railmap"].map(t=>o("<link>",{rel:"stylesheet",href:`styles/${t}_${window.urlParams.get("style")}.css`,id:`css_${t}`}))),window.myLine=null,o(`[${window.urlParams.get("style")}-specific]`).show(),function(){const[t,e,n,o,h,c]=["#template_diag","#import_diag","#export_diag","#preview_diag","#style_diag","#lang_diag"].map(t=>a.MDCDialog.attachTo($(t)[0])),[d,_]=$("#panel_save .mdc-list").map((t,e)=>r.MDCList.attachTo(e)).get();$("#panel_save .mdc-list li").map((t,e)=>new l.MDCRipple(e)),d.listen("MDCList:action",e=>{switch(e.detail.index){case 0:t.open();break;case 1:$("#upload_file").click();break;case 2:$("<a>",{href:"data:application/json;base64,"+btoa(unescape(encodeURIComponent(localStorage.rmgParam))),download:"rmg_param.json"})[0].click();break;case 3:n.open()}}),$("#panel_save .mdc-list:nth-child(2) li:first-child span:nth-child(2) span:last-child").attr("trans-tag",$(`#style_diag [data-mdc-dialog-action="${window.urlParams.get("style")}"] span`).attr("trans-tag")).text($(`#style_diag [data-mdc-dialog-action="${window.urlParams.get("style")}"] span`).text()),$("#panel_save .mdc-list:nth-child(2) li:nth-child(2) span:nth-child(2) span:last-child").text($(`#lang_diag [data-mdc-dialog-action="${window.urlParams.get("lang")}"] span`).text()),_.listen("MDCList:action",t=>{switch(t.detail.index){case 0:h.open();break;case 1:c.open()}}),$.getJSON("templates/template_list.json",t=>{var e=window.urlParams.get("lang");t.forEach(t=>{$("#template_diag ul").append($("<li>",{class:"mdc-list-item","data-mdc-dialog-action":t.filename}).append($("<span>",{class:"mdc-list-item__text"}).text(Object(i.i)(t.desc,e))))}),$("#template_diag li:first-child").attr("tabindex",0),$("#theme_line__selection li").map((t,e)=>new l.MDCRipple(e))}),t.listen("MDCDialog:closed",t=>{"close"!=t.detail.action&&$.getJSON(`templates/${t.detail.action}.json`,t=>{localStorage.rmgParam=JSON.stringify(t),location.reload(!0)})}),n.listen("MDCDialog:closed",t=>{switch(t.detail.action){case"close":break;case"svg1":$("#preview_diag").attr("for","destination"),o.open();break;case"svg2":$("#preview_diag").attr("for","railmap"),o.open()}}),$(window).on("resize",t=>{g()});const g=()=>{var t=$("preview_diag").attr("for"),[e,n]=["destination"==t?Object(i.g)().svg_dest_width:Object(i.g)().svg_width,Object(i.g)().svg_height],s=$(window).width()-32-50,a=$(window).height()-60-53-60,r=Math.min(s/e,a/n);$("#preview_diag").find("svg").attr({width:e*r,height:n*r}),$("#preview_diag").find(".mdc-dialog__surface").attr("style",`max-width:${s+50}px;`)};let m;o.listen("MDCDialog:opened",t=>{var e=$(t.target).attr("for"),[n,s]=["destination"==e?Object(i.g)().svg_dest_width:Object(i.g)().svg_width,Object(i.g)().svg_height];$("#preview_diag .mdc-dialog__surface").attr("style",`max-width:${$(window).width()-32}px;`);var a=$(window).width()-32-50,r=$(window).height()-60-53-60,l=Math.min(a/n,r/s);$(t.target).find(".mdc-dialog__content").append($("#"+$(t.target).attr("for")).clone().attr({style:"all:initial;",viewBox:`0 0 ${n} ${s}`,width:n*l,height:s*l}));let o=["share",$(t.target).find("svg")[0].id].map(t=>Array.from($(`link#css_${t}`)[0].sheet.cssRules).map(t=>t.cssText).join(" "));$(t.target).find("svg").prepend(...o.map(t=>$("<style>").text(t))),$(t.target).find('svg [style="display: none;"]').remove()}),o.listen("MDCDialog:closed",t=>{if("close"!==t.detail.action){if("png"===t.detail.action)return Object(i.o)($(t.target).removeAttr("for").find("svg")),void $(t.target).find(".mdc-dialog__content").empty();if("svg"===t.detail.action){let n=$(t.target).find(".mdc-dialog__content svg");var e=document.createElement("a");e.href="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(n[0].outerHTML))),e.download="rmg_export.svg",e.click(),$(t.target).removeAttr("for").find(".mdc-dialog__content").empty()}}else $(t.target).removeAttr("for").find(".mdc-dialog__content").empty()}),$("#upload_file").on("change",t=>{console.log(t.target.files[0]);let n=new FileReader;n.onload=function(t){console.log(t.target),m=JSON.parse(t.target.result),$("#import_diag").find(".mdc-dialog__content").html(Object(i.d)(m)),e.open()},n.readAsText(t.target.files[0])}),e.listen("MDCDialog:closed",t=>{"close"!=t.detail.action?(s.a.clearSVG(),localStorage.rmgParam=JSON.stringify(m),location.reload(!0)):$("#upload_file")[0].value=""}),h.listen("MDCDialog:closed",t=>{switch(t.detail.action){case"close":case window.urlParams.get("style"):return;default:window.urlParams.set("style",t.detail.action),window.location.href="?"+window.urlParams.toString()}}),c.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=t.detail.action;localStorage.rmgLang=e,e!=window.urlParams.get("lang")&&(window.urlParams.set("lang",e),window.location.href="?"+window.urlParams.toString())}})}(),function(){const t=t=>h(this,void 0,void 0,(function*(){let e=yield(i=window.urlParams.get("style"),h(void 0,void 0,void 0,(function*(){switch(i){case"mtr":return Promise.resolve(s.a);case"gzmtr":return n.e(0).then(n.bind(null,15)).then(({RMGLineGZ:t})=>t);case"shmetro":return n.e(1).then(n.bind(null,16)).then(({RMGLineSH:t})=>t)}})));var i;window.myLine=yield new e(t),e.initSVG(window.myLine)}));if(null!=localStorage.rmgParam)try{Object(i.p)(),t(Object(i.g)())}catch(t){let e=a.MDCDialog.attachTo($("#init_err_diag")[0]);$("#init_err_diag").find("#err_stack").html(t+"<br>"+t.stack.replace(/\n/g,"<br>")),e.open(),console.error(t)}else $.getJSON("templates/blank.json",e=>{localStorage.rmgParam=JSON.stringify(e),Object(i.p)(),t(Object(i.g)())})}(),function(){let t=[!1,!0,!0,!0,!0];window.sliders=[],u.MDCTabBar.attachTo($("#panels .mdc-tab-bar")[0]).listen("MDCTabBar:activated",e=>{if($(".panel--active").removeClass("panel--active"),$(".panel").eq(e.detail.index).addClass("panel--active"),1==e.detail.index&&t[1]&&(!function(){const[t,e]=["#svg_dest_width","#svg_width"].map(t=>c.MDCTextField.attachTo($(t)[0])),[n,s,a]=["#branch_spacing","#y_pc","#padding"].map(t=>d.MDCSlider.attachTo($(t)[0]));window.sliders.push(n,s,a),$("#panel_layout .mdc-list li").map((t,e)=>new l.MDCRipple(e)),Promise.resolve(Object(i.g)()).then(i=>{t.value=i.svg_dest_width,e.value=i.svg_width,s.value=i.y_pc,n.value=i.branch_spacing,a.value=i.padding}),$(t.root_).find("input").on("input",t=>window.myLine.svgDestWidth=Number(t.target.value)),$(e.root_).find("input").on("input",t=>window.myLine.svgWidth=Number(t.target.value)),n.listen("MDCSlider:input",()=>{window.myLine.branchSpacing=Number(n.value)}),s.listen("MDCSlider:input",()=>{window.myLine.yPc=Number(s.value)}),a.listen("MDCSlider:input",()=>{window.myLine.padding=Number(a.value)})}(),"gzmtr"===window.urlParams.get("style")&&function(){const[t,e]=["#direction_gz_x","#direction_gz_y"].map(t=>d.MDCSlider.attachTo($(t)[0]));window.sliders.push(t,e),Promise.resolve(Object(i.g)()).then(n=>{t.value=n.direction_gz_x,e.value=n.direction_gz_y}),t.listen("MDCSlider:input",()=>{window.myLine.directionGZX=Number(t.value)}),e.listen("MDCSlider:input",()=>{window.myLine.directionGZY=Number(e.value)})}(),t[1]=!1),1===e.detail.index&&window.sliders.forEach(t=>t.layout()),2==e.detail.index&&t[2]){switch(function(){const t=r.MDCList.attachTo($("#design_list")[0]),[e,n]=["#design_theme_diag","#line_name_diag"].map(t=>a.MDCDialog.attachTo($(t)[0])),[s,o]=["#theme_city","#theme_line"].map(t=>new _.MDCSelect($(t)[0])),[h,d]=["#name_zh","#name_en"].map(t=>c.MDCTextField.attachTo($("#line_name_diag").find(t)[0])),g=c.MDCTextField.attachTo($("#platform_num")[0]);$("#panel_design .mdc-list li").map((t,e)=>new l.MDCRipple(e));const m=t=>$("#design_list").find(`li#direc p#${t}`).text();Promise.resolve(Object(i.g)()).then(t=>{$("#design_list").find("li#name .mdc-list-item__secondary-text").text(t.line_name.join()),h.value=t.line_name[0],d.value=t.line_name[1],$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(m(t.direction)),g.value=t.platform_num}),$.getJSON("data/city_list.json",t=>{let e=window.urlParams.get("lang");t.forEach(t=>{$("#theme_city__selection").append($("<li>",{class:"mdc-list-item","data-value":t.id}).text(Object(i.c)(t.country)+Object(i.i)(t.name,e)))}),$("#theme_city__selection li").map((t,e)=>new l.MDCRipple(e));var[n]=Object(i.g)().theme,a=$(`#theme_city__selection > [data-value="${n}"]`).index();s.selectedIndex=a}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 0:e.open();break;case 1:n.open();break;case 2:"r"==Object(i.g)().direction?(console.log("right to left"),window.myLine.direction="l",$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(m("l"))):(console.log("left to right"),window.myLine.direction="r",$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(m("r")));break;case 4:window.myLine.reverseStns()}}),e.listen("MDCDialog:opened",()=>{[s,o].map(t=>t.layout())}),s.listen("MDCSelect:change",t=>{let e=t.detail.value;$("#theme_line__selection").empty(),$.getJSON(`data/${e}.json`,t=>{var n=window.urlParams.get("lang");t.forEach(t=>{$("#theme_line__selection").append($("<li>",{class:"mdc-list-item","data-value":t.id}).append($("<span>").css({background:t.colour,color:t.fg||"#fff"}).text(" "+Object(i.i)(t.name,n)+" ")))}),$("#theme_line__selection li").map((t,e)=>new l.MDCRipple(e));var s=Object(i.g)();s.theme[0]=e,Object(i.l)(s);var a=$(`#theme_line__selection > [data-value="${s.theme[1]}"]`).index();o.selectedIndex=-1==a?0:a})}),o.listen("MDCSelect:change",t=>{let e=t.detail.index;var n=Object(i.g)();n.theme[1]=t.detail.value,Object(i.l)(n),window.myLine.themeLine=t.detail.value,window.myLine.themeColour=["background-color","color"].map(t=>$("#theme_line__selection span").eq(e).css(t)).map(i.m),$("#design_list").find("li#theme .mdc-list-item__secondary-text").html($("#theme_city__selection li").eq(s.selectedIndex).text()+" "+$("#theme_line__selection li").eq(e).html().trim())}),n.listen("MDCDialog:opened",t=>{[h,d].map(t=>t.layout())}),$("#line_name_diag").find(".mdc-text-field").on("input",()=>{let t=[h,d].map(t=>t.value);window.myLine.lineNames=t,$("#design_list").find("li#name .mdc-list-item__secondary-text").text(t.join())}),$(g.root_).find("input").on("input",t=>window.myLine.platformNum=t.target.value)}(),window.urlParams.get("style")){case"mtr":m();break;case"gzmtr":!function(){const t=r.MDCList.attachTo($("#design_list_gzmtr")[0]),e=a.MDCDialog.attachTo($("#panel_type_diag")[0]),[n,s]=["#psd_num","#line_num"].map(t=>c.MDCTextField.attachTo($(t)[0]));Promise.resolve(Object(i.g)()).then(t=>{n.value=t.psd_num,s.value=t.line_num}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 1:e.open()}}),$(s.root_).find("input").on("input",t=>window.myLine.lineNum=t.target.value),$(n.root_).find("input").on("input",t=>window.myLine.psdNum=t.target.value),e.listen("MDCDialog:closed",t=>{"close"!==t.detail.action&&(window.myLine.infoPanelType=t.detail.action)})}()}t[2]=!1}3==e.detail.index&&t[3]&&(console.log("init again"),w(),t[3]=!1),4==e.detail.index&&t[4]&&($("#panel_info .mdc-card__actions #report").on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator/issues","_blank")}),$('#panel_info .mdc-card__action-icons [title="Star"]').on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator","_blank")}),$('#panel_info .mdc-card__action-icons [title="Fork"]').on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator/fork","_blank")}),t[4]=!1)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9TdGF0aW9uL1N0YXRpb24udHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibWRjLnRleHRGaWVsZFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1kYy5kaWFsb2dcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtZGMucmlwcGxlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibWRjLnNlbGVjdFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1kYy5saXN0XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xpbmUvTGluZS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtZGMudGFiQmFyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibWRjLnNsaWRlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1kYy5zd2l0Y2hDb250cm9sXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibWRjLmljb25CdXR0b25cIiIsIndlYnBhY2s6Ly8vLi9zcmMvTGluZS9pbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9QYWdlSW5pdGlhbGlzZXIvZGVzaWduLnRzIiwid2VicGFjazovLy8uL3NyYy9QYWdlSW5pdGlhbGlzZXIvc3RhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9QYWdlSW5pdGlhbGlzZXIvc2F2ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUGFnZUluaXRpYWxpc2VyL2luaXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhZ2VJbml0aWFsaXNlci9sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhZ2VJbml0aWFsaXNlci9pbmZvLnRzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImluc3RhbGxlZE1vZHVsZXMiLCIyIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwiZSIsInByb21pc2VzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25TY3JpcHRDb21wbGV0ZSIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJwIiwianNvbnBTY3JpcHRTcmMiLCJlcnJvciIsIkVycm9yIiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiY2h1bmsiLCJlcnJvclR5cGUiLCJ0eXBlIiwicmVhbFNyYyIsInRhcmdldCIsIm1lc3NhZ2UiLCJuYW1lIiwicmVxdWVzdCIsInVuZGVmaW5lZCIsInNldFRpbWVvdXQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJhbGwiLCJtIiwiYyIsImQiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImVyciIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwicyIsIkRpcmVjdGlvbkxvbmciLCJOZWlnaGJvdXJQbCIsInB1dFBhcmFtcyIsImluc3RhbmNlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRQYXJhbXMiLCJwYXJzZSIsInJtZ1BhcmFtIiwic2V0UGFyYW1zIiwicGFyYW0iLCJ0ZXN0Iiwic3ZnRWwiLCJzdmdXIiwic3ZnSCIsImF0dHIiLCJzcGxpdCIsImNhbnZhcyIsIiQiLCJ3aWR0aCIsImhlaWdodCIsImN0eCIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJmaW5kIiwiZWFjaCIsIl8iLCJlbCIsImdldENvbXB1dGVkU3R5bGUiLCJmb250U2l6ZSIsImVsU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVtb3ZlQXR0ciIsImltZyIsIkltYWdlIiwidXJpIiwiZmlsZW5hbWUiLCJsaW5rIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwiZG93bmxvYWQiLCJocmVmIiwiYm9keSIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJvcGVuIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3V0ZXJIVE1MIiwiZ2V0VHh0Qm94RGltIiwiZWxlbSIsInN2ZyIsInN2Z05vZGUiLCJiY3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwdCIsImNyZWF0ZVNWR1BvaW50IiwiY3RtIiwiZ2V0U2NyZWVuQ1RNIiwieCIsImxlZnQiLCJ5IiwidG9wIiwicG9zIiwibWF0cml4VHJhbnNmb3JtIiwiaW52ZXJzZSIsImpvaW5JbnROYW1lIiwibmFtZXMiLCJkeTEiLCJkeTIiLCJuYW1lWkgiLCJuYW1lRU4iLCJtYXAiLCJ0eHQiLCJyZXMiLCJhZGRDbGFzcyIsInRleHQiLCJhcHBlbmQiLCJidHdHYXAiLCJnZXRJbnRCb3hHWiIsImludEluZm8iLCJzdGF0ZSIsImJnIiwiY29sb3VyIiwiZmciLCJuYW1lWkhzIiwibWF0Y2giLCJpbnROYW1lU3BsaXRPayIsImlzTmFOIiwiTnVtYmVyIiwiYm94RWwiLCJmaWxsIiwiY2xhc3MiLCJkeSIsImpvaW4iLCJnZXRSYW5kb21JZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBvdyIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJnZXROYW1lRnJvbUlkIiwic3RuSWQiLCJudW1zWkgiLCJudW1zRU4iLCJjaGFyIiwicGFyc2VJbnQiLCJkZXNjcmliZVBhcmFtcyIsImtleXMiLCJzdG5fbGlzdCIsImVudHJpZXMiLCJpbmNsdWRlcyIsInRyaW0iLCJyZXBsYWNlIiwiY291bnRyeUNvZGUyRW1vamkiLCJjb2RlIiwiY2hhcnMiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsInJnYjJIZXgiLCJyZ2IiLCJoZXgiLCJkZWMiLCJ1cGRhdGVQYXJhbSIsImxpbmVfbmFtZSIsImRlc3RfbGVnYWN5IiwiY2hhcl9mb3JtIiwicmVnaW9uIiwiZm9udFpIIiwicmV2ZXJzZSIsImZvbnRFTiIsIndlaWdodFpIIiwid2VpZ2h0RU4iLCJzdG5JbmZvIiwiYnJhbmNoIiwicmlnaHQiLCJjaGlsZHJlbiIsInBhcmVudHMiLCJwc2RfbnVtIiwibGluZV9udW0iLCJzdHlsZSIsInRoZW1lIiwibnVtIiwiaW50ZXJjaGFuZ2UiLCJhcnIiLCJzcGxpY2UiLCJpbmZvX3BhbmVsX3R5cGUiLCJjaGFuZ2VfdHlwZSIsImRpcmVjdGlvbl9nel94IiwiZGlyZWN0aW9uX2d6X3kiLCJ0cmFuc2ZlciIsInRpY2tfZGlyZWMiLCJwYWlkX2FyZWEiLCJpbmRleE9mIiwib3NpX25hbWVzIiwiaW5mbyIsImdldFRyYW5zVGV4dCIsIm9iaiIsImxhbmciLCJsYW5nRmFsbGJhY2siLCJJbnRJbmZvVGFnIiwiUk1HU3RhdGlvbiIsImlkIiwiU1ROX05BTUVfWSIsIlNUTl9OQU1FX0JBU0VfSEVJR0hUIiwiU1ROX05BTUVfTElORV9HQVAiLCJTVE5fTkFNRV9CR19BREpVU1QiLCJ0aGlzIiwibmFtZUVOcyIsIm5hbWVQb3MiLCJfbmFtZURZIiwibmFtZUVOcCIsIm5hbWVFTkVsZW0iLCJ0cmFuc2Zvcm0iLCJfbmFtZURYIiwiX25hbWVUeHRBbmNob3IiLCJuYW1lQ2xhc3MiLCJpY29uQ2xhc3MiLCJpY29uSFRNTCIsIm5hbWVIVE1MIiwidW5ncnBIVE1MIiwiSW50MlN0YXRpb24iLCJzdXBlciIsIl9pbnRJbmZvIiwidGlja1JvdGF0aW9uIiwidGlja0NvbG91ciIsInRpY2siLCJzdHJva2UiLCJfZHkiLCJuYW1lWkhMbiIsIm5hbWVFTkxuIiwiX25hbWVDbGFzcyIsImh0bWwiLCJpbnRUaWNrSFRNTCIsImludE5hbWVIVE1MIiwiSW50M1N0YXRpb24iLCJfaW50Q2l0eSIsIl9pbnRMaW5lIiwiX2ludENvbG91ciIsIl9pbnROYW1lWkgiLCJfaW50TmFtZUVOIiwiX2ludEluZm9zIiwiZm9yRWFjaCIsImljb25Sb3RhdGlvbiIsImVsZW1zIiwiX3RpY2tGbGlwIiwiX2R4IiwiX3RpY2tSb3RhdGlvbiIsIl90eHRBbmNob3IiLCJfaW50TmFtZURYIiwiSW50M0xTdGF0aW9uIiwiSW50M1JTdGF0aW9uIiwiT1NJMTFTdGF0aW9uIiwiX29zaU5hbWVzIiwiX29zaVR5cGUiLCJzdWJzdHJpbmciLCJvc2lDbGFzcyIsIl9vc2lOYW1lRFgiLCJvc2lOYW1lSFRNTCIsIk9TSTExTFN0YXRpb24iLCJPU0kxMVJTdGF0aW9uIiwiT1NJMTJTdGF0aW9uIiwidW5zaGlmdCIsIl9vc2lUeHRBbmNob3IiLCJfb3NpRFgiLCJfb3NpRFkiLCJPU0kxMkxTdGF0aW9uIiwiT1NJMTJSU3RhdGlvbiIsIk9TSTIyU3RhdGlvbiIsIl9vcmlnSW50SW5mbyIsIm9yaWdJbnRUaWNrSFRNTCIsIm9yaWdJbnROYW1lSFRNTCIsIk9TSTIyTFN0YXRpb24iLCJPU0kyMlJTdGF0aW9uIiwiT1NJMjJFbmRTdGF0aW9uIiwiX29yaWdJbnRDaXR5IiwiX29yaWdJbnRMaW5lIiwiX29yaWdJbnRDb2xvdXIiLCJfb3JpZ0ludEZnIiwiX29yaWdJbnROYW1lWkgiLCJfb3JpZ0ludE5hbWVFTiIsImljb25ZRmxpcCIsImljb25YRmxpcCIsIm1kYyIsInRleHRGaWVsZCIsImRpYWxvZyIsImpRdWVyeSIsInJpcHBsZSIsInNlbGVjdCIsImxpc3QiLCJSTUdMaW5lIiwiX2xvbmdJbnRlcnZhbCIsInN0YXRpb25zIiwiX3N2Z0hlaWdodCIsIl9zdmdXaWR0aCIsIl9zdmdEZXN0V2lkdGgiLCJfc2hvd091dGVyIiwidGhlbWVDaXR5IiwidGhlbWVMaW5lIiwiX3RoZW1lQ29sb3VyIiwiX2ZnQ29sb3VyIiwieVBjIiwiX3BhZGRpbmciLCJfc3RyaXBQYyIsIl9icmFuY2hTcGFjaW5nIiwiYnJhbmNoX3NwYWNpbmciLCJfdHh0RmxpcCIsIl9saW5lTmFtZXMiLCJfaW5pdFN0bkluc3RhbmNlIiwiX2N1cnJlbnRTdG5JZCIsIl9kaXJlY3Rpb24iLCJfcGxhdGZvcm1OdW0iLCJfZGVzdExlZ2FjeSIsIl9jaGFyRm9ybSIsInN0bkluc3RhbmNlIiwiX3N0blJlYWxYIiwiX3N0blJlYWxZIiwiX3N0blN0YXRlIiwiX3N0bk5hbWVQb3MiLCJ2YWwiLCJkcmF3U1ZHRnJhbWUiLCJkcmF3U3RyaXAiLCJkcmF3RGVzdEluZm8iLCJsb2FkRm9udHMiLCJjbGVhclNWRyIsImRyYXdTdG5zIiwiZHJhd0xpbmUiLCJ1cGRhdGVTdG5OYW1lQmciLCJfeVBjIiwiZW1wdHkiLCJoZXhzIiwiZmlsbFRoZW1lQ29sb3VyIiwicmVtb3ZlQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9zdG5PdXRkZWdyZWUiLCJfc3RuSW5kZWdyZWUiLCJzdG5JZDEiLCJzdG5JZDIiLCJfcmlnaHRXaWRlRmFjdG9yIiwiX2xlZnRXaWRlRmFjdG9yIiwiSW5maW5pdHkiLCJmcm9tIiwidG8iLCJzZWxmIiwibGVuIiwibm9kZXMiLCJhbGxMZW5ndGhzIiwiY3JpdGljYWxQYXRocyIsImNoaWxkIiwiY3AiLCJfY3AiLCJfcGF0aFdlaWdodCIsIm1heExlbmd0aCIsIm1heCIsImxlZnREZXN0cyIsImxkIiwicmlnaHREZXN0cyIsInJkIiwibWF4TGVuIiwidHBvIiwiY29uY2F0IiwiX3RvcG9PcmRlciIsInNxcnQiLCJsaW5lc3RhcnQiLCJsaW5lZW5kIiwiQXJyYXkiLCJTZXQiLCJyb3V0ZXMiLCJmaWx0ZXIiLCJyb3V0ZSIsImluRGVncmVlIiwib3V0RGVncmVlIiwiY3JpdGljYWxQYXRoIiwicGFydFNvdXJjZSIsInBhcnRTaW5rIiwibGVmdE9wZW5KYXciLCJyaWdodE9wZW5KYXciLCJwYXJlbnQiLCJsZW5ndGhUb1NvdXJjZSIsImxlbmd0aFRvU2luayIsImFjdHVhbFBhcnRMZW5ndGgiLCJfc3RuWFNoYXJlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsImxpbmVYcyIsIl9zdG5ZU2hhcmVNVFIiLCJzdG5QcmVkIiwiX3N0bllTaGFyZSIsImlkeDEiLCJpZHgyIiwiX2lzU3VjY2Vzc29yIiwiX2lzUHJlZGVjZXNzb3IiLCJwYXJJZCIsInNob3ciLCJoaWRlIiwic3RuTmFtZURpbSIsInR1cm5pbmdSYWRpdXMiLCJkaCIsInN0bkRYIiwid2FybiIsInN0bkRZIiwic3RuSWRzIiwicHJldklkIiwicHJldlkiLCJwcmV2WCIsInBhdGgiLCJzdG5FeHRyYUgiLCJzdG5TcGFyZUgiLCJwYXRoVHVybkVTRSIsInBhdGhUdXJuU0VFIiwicGF0aFR1cm5FTkUiLCJwYXRoVHVybk5FRSIsImZ1biIsImJyYW5jaGVzIiwibGluZU1haW5TdG5zIiwibGluZVBhc3NTdG5zIiwiX2xpbmVQYXRoIiwic3RyaXBZIiwidmFsaWREZXN0IiwidHh0QW5jaG9yIiwiZGVzdE5hbWVaSCIsImRlc3ROYW1lRU4iLCJpZHgiLCJsaW5lTmFtZVpIIiwibGluZU5hbWVFTiIsImVxIiwiZmxhZ0xlbmd0aCIsImlzTGVmdCIsImFycm93WCIsImFycm93Um90YXRlIiwicGxhdGZvcm1OdW1YIiwiZGVzdE5hbWVYIiwic3RuTnVtIiwicmVtb3ZlIiwicHJldkNsYXNzIiwiaXNMYXN0TWFpbkJyYW5jaFN0biIsImNoaWxkSWQiLCJjaGlsZElkeE9mUGFyIiwicGFySWR4T2ZDaGlsZCIsIm5ld0N1cnJlbnRTdG5JZCIsImN1cnJlbnRfc3RuX2lkeCIsIm5lSWQiLCJwcmVwIiwibmV3QnJhbmNoUG9zc2libGVFbmQiLCJwb3AiLCJsb2MiLCJlbmQiLCJuZXdJZCIsIm5ld0luZm8iLCJwYXIiLCJwYXJDaGlsZExlbiIsInRtcEFyciIsImxvY2F0aW9uIiwicmVsb2FkIiwiZGlyZWN0aW9uIiwiZGlyZWMiLCJmaXJzdCIsImJyYW5jaEVuZElkIiwiYnJhbmNoRmlyc3RJZHgiLCJsaW5lIiwic2hvd0ZyYW1lT3V0ZXIiLCJzdGFjayIsImJyYW5jaENvdW50IiwiY3VySWQiLCJjdXJCcmFuY2giLCJicmFuY2hOZXh0SWQiLCJ0YWJCYXIiLCJzbGlkZXIiLCJzd2l0Y2hDb250cm9sIiwiaWNvbkJ1dHRvbiIsIm10ciIsImRlc2lnbkxpc3RNVFJMaXN0IiwiYXR0YWNoVG8iLCJjaGFyRGlhbG9nIiwibGVnYWN5U3dpdGNoIiwidGhlbiIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImFjdGlvbiIsImNoZWNrZWQiLCJsaXN0ZW4iLCJpbmRleCIsIm15TGluZSIsInR4dEZsaXAiLCJ0eHRfZmxpcCIsImNoYXJGb3JtIiwiZGF0YXNldCIsIm1kY0RpYWxvZ0FjdGlvbiIsImdldENoYXJUZXh0Iiwicm9vdF8iLCJvbiIsImRlc3RMZWdhY3kiLCJnZXRTdGF0aW9uQ2FyZCIsInByZXBlbmQiLCJjc3MiLCJ1cmxQYXJhbXMiLCJ0aXRsZSIsImludE5hbWVFbCIsImNsb25lIiwiYWZ0ZXIiLCJzdG5BZGREaWFsb2ciLCJzdG5Nb2RpZnlEaWFsb2ciLCJzdG5UcmFuc2ZlckRpYWxvZyIsInN0bkRlbGV0ZURpYWxvZyIsInN0bkRlbGV0ZUVyckRpYWxvZyIsInNlbGVjdG9yIiwic3RuQWRkUHJlcFNlbGVjdCIsInN0bkFkZFBpdm90U2VsZWN0Iiwic3RuQWRkTG9jU2VsZWN0Iiwic3RuQWRkRW5kU2VsZWN0Iiwic3RuTW9kaWZ5TmFtZUZpZWxkcyIsInN0bk1vZGlmeU51bUZpZWxkIiwic3RuVHJhbnNmZXJUYWJCYXIiLCJjaGFuZ2VUeXBlU2VsZWN0IiwiaW50Q2l0eVNlbGVjdHMiLCJpbnRMaW5lU2VsZWN0cyIsImludE5hbWVGaWVsZHMiLCJzdG5PU0lOYW1lRmllbGRzIiwidGlja0RpcmVjVG9nZ2xlIiwicGFpZEFyZWFUb2dnbGUiLCJ0aHJvdWdoU2VsZWN0cyIsImZpcnN0U2VsZWN0cyIsInBvc1NlbGVjdHMiLCJzdG5MaXN0IiwiY2xvc2VzdCIsImN1cnJlbnRTdG5JZCIsInNlbGVjdGVkSW5kZXgiLCJsYXlvdXQiLCJhZGRTdG4iLCJsb2ciLCJsaXN0RWxlbSIsIkV2ZW50IiwibmV3U3RuUG9zc2libGVMb2MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGlzcGxheSIsInRleHRmaWVsZCIsInVwZGF0ZVN0bk5hbWUiLCJmb2N1c0ludGVyY2hhbmdlIiwiZm9jdXNCcmFuY2giLCJfc2hvd0FsbEZpZWxkcyIsImZpZWxkcyIsImdldEpTT04iLCJjb3VudHJ5IiwibGluZVRoZW1lQ2l0eSIsImFsbEludGVyY2hhbmdlcyIsImNJZHgiLCJ0aHJvdWdoVHlwZSIsIm5lIiwiaW5pdEJyYW5jaCIsImdldEF0dHJpYnV0ZSIsInRpY2tEaXJlYyIsIm9zaSIsIm9zaVBhaWRBcmVhIiwiaW50SW5mbzAiLCJpbnRJbmZvMSIsImludEluZm8yIiwidXBkYXRlU3RuVHJhbnNmZXIiLCJsSWR4IiwidXBkYXRlQnJhbmNoVHlwZSIsInVwZGF0ZUJyYW5jaEZpcnN0IiwidXBkYXRlQnJhbmNoUG9zIiwicmVtb3ZlU3RuIiwicm1nTGFuZyIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwidG9Mb3dlckNhc2UiLCJzZXQiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwidXJsIiwidGFnIiwicmVsIiwidGVtcGxhdGVEaWFsb2ciLCJpbXBvcnREaWFsb2ciLCJleHBvcnREaWFsb2ciLCJwcmV2aWV3RGlhbG9nIiwic3R5bGVEaWFsb2ciLCJsYW5nRGlhbG9nIiwic2F2ZUxpc3QwIiwic2F2ZUxpc3QxIiwiZGVzYyIsInJlc2l6ZVNWR1ByZXZpZXciLCJzdmdJZCIsInRoaXNTVkdXaWR0aCIsInRoaXNTVkdIZWlnaHQiLCJzdmdfZGVzdF93aWR0aCIsInN2Z193aWR0aCIsInN2Z19oZWlnaHQiLCJNQVhfV0lEVEgiLCJNQVhfSEVJR0hUIiwic2NhbGVGYWN0b3IiLCJtaW4iLCJpbXBvcnRlZEZpbGUiLCJ2aWV3Qm94IiwiY3NzVHh0Iiwic2hlZXQiLCJjc3NSdWxlcyIsInJ1bGUiLCJjc3NUZXh0Iiwic3ZnQ29udGVudCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlc3VsdCIsInJlYWRBc1RleHQiLCJuZXh0TGFuZyIsImxvYWRMaW5lIiwibGluZUNsYXNzIiwiUk1HTGluZUdaIiwiUk1HTGluZVNIIiwiaW5pdFNWRyIsImluaXRFcnJEaWFnIiwiaW5pdCIsImZpcnN0SW5pdCIsInNsaWRlcnMiLCJzdmdEZXN0V2lkdGhUZXh0RmllbGQiLCJzdmdXaWR0aFRleHRGaWVsZCIsImJyYW5jaFNwYWNpbmdTbGlkZXIiLCJ5UGNTbGlkZXIiLCJwYWRkaW5nU2xpZGVyIiwieV9wYyIsInBhZGRpbmciLCJzdmdEZXN0V2lkdGgiLCJzdmdXaWR0aCIsImJyYW5jaFNwYWNpbmciLCJkaXJlY3Rpb25HWlhTbGlkZXIiLCJkaXJlY3Rpb25HWllTbGlkZXIiLCJkaXJlY3Rpb25HWlgiLCJkaXJlY3Rpb25HWlkiLCJkZXNpZ25MaXN0IiwidGhlbWVEaWFsb2ciLCJsaW5lTmFtZURpYWxvZyIsInRoZW1lQ2l0eVNlbGVjdCIsInRoZW1lTGluZVNlbGVjdCIsImxpbmVOYW1lWkhUZXh0RmllbGQiLCJsaW5lTmFtZUVOVGV4dEZpZWxkIiwicGxhdGZvcm1OdW1UZXh0RmllbGQiLCJnZXREaXJlY3Rpb25UZXh0IiwicGxhdGZvcm1fbnVtIiwiY2l0eUlkeCIsInJldmVyc2VTdG5zIiwiY2l0eSIsImJhY2tncm91bmQiLCJjb2xvciIsImxpbmVJZHgiLCJ0aGVtZUNvbG91ciIsInByb3AiLCJsaW5lTmFtZXMiLCJwbGF0Zm9ybU51bSIsImRlc2lnbkxpc3RHWk1UUkxpc3QiLCJwYW5lbFR5cGVEaWFsb2ciLCJwc2ROdW1UZXh0RmllbGQiLCJsaW5lTnVtVGV4dEZpZWxkIiwibGluZU51bSIsInBzZE51bSIsImluZm9QYW5lbFR5cGUiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FLQUssRUFBSSxFQUFHQyxFQUFXLEdBQ3BDRCxFQUFJRixFQUFTSSxPQUFRRixJQUN6QkgsRUFBVUMsRUFBU0UsR0FDaEJHLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtDLEVBQWlCVixJQUFZVSxFQUFnQlYsSUFDcEZJLEVBQVNPLEtBQUtELEVBQWdCVixHQUFTLElBRXhDVSxFQUFnQlYsR0FBVyxFQUU1QixJQUFJRCxLQUFZRyxFQUNaSSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLUCxFQUFhSCxLQUNwRGEsRUFBUWIsR0FBWUcsRUFBWUgsSUFLbEMsSUFGR2MsR0FBcUJBLEVBQW9CZixHQUV0Q00sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYsR0FPRixJQUFJVyxFQUFtQixHQUtuQkwsRUFBa0IsQ0FDckJNLEVBQUcsR0FXSixTQUFTQyxFQUFvQmxCLEdBRzVCLEdBQUdnQixFQUFpQmhCLEdBQ25CLE9BQU9nQixFQUFpQmhCLEdBQVVtQixRQUduQyxJQUFJQyxFQUFTSixFQUFpQmhCLEdBQVksQ0FDekNJLEVBQUdKLEVBQ0hxQixHQUFHLEVBQ0hGLFFBQVMsSUFVVixPQU5BTixFQUFRYixHQUFVVSxLQUFLVSxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRCxHQUcvREUsRUFBT0MsR0FBSSxFQUdKRCxFQUFPRCxRQUtmRCxFQUFvQkksRUFBSSxTQUF1QnJCLEdBQzlDLElBQUlzQixFQUFXLEdBS1hDLEVBQXFCYixFQUFnQlYsR0FDekMsR0FBMEIsSUFBdkJ1QixFQUdGLEdBQUdBLEVBQ0ZELEVBQVNYLEtBQUtZLEVBQW1CLFFBQzNCLENBRU4sSUFBSUMsRUFBVSxJQUFJQyxTQUFRLFNBQVNDLEVB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QixFQUFNMmUsT0FBT0ksT0FBY29JLEVBQVUsS0UxQ3pDaGpCLEVBQUUsMENBQTBDcWIsR0FBRyxRQUFTLEtBQ3BEN2MsT0FBT21ELEtBQUssdURBQXdELFlBRXhFM0IsRUFBRSxzREFBc0RxYixHQUFHLFFBQVMsS0FDaEU3YyxPQUFPbUQsS0FBSyxnREFBaUQsWUFFakUzQixFQUFFLHNEQUFzRHFiLEdBQUcsUUFBUyxLQUNoRTdjLE9BQU9tRCxLQUFLLHFEQUFzRCxZRnFDbEVxaEIsRUFBVSxJQUFLLEtGVXZCIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdH07XG5cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDI6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArICh7XCIwXCI6XCJMaW5lR1pcIixcIjFcIjpcIkxpbmVTSFwifVtjaHVua0lkXXx8Y2h1bmtJZCkgKyBcIi5taW4uanNcIlxuIFx0fVxuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0XHR2YXIgb25TY3JpcHRDb21wbGV0ZTtcblxuIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG5cbiBcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcbiBcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuIFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuIFx0XHRcdFx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG4gXHRcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHRcdFx0dmFyIGNodW5rID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRcdFx0XHRpZihjaHVuayAhPT0gMCkge1xuIFx0XHRcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuIFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbiBcdFx0XHRcdFx0XHRcdGNodW5rWzFdKGVycm9yKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gXHRcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUoeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pO1xuIFx0XHRcdFx0fSwgMTIwMDAwKTtcbiBcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGU7XG4gXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gXHR9O1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9kaXN0L1wiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwiaW1wb3J0IHsgSW50SW5mb1RhZywgSW50ZXJjaGFuZ2VJbmZvIH0gZnJvbSBcIi4vU3RhdGlvbi9TdGF0aW9uXCI7XHJcblxyXG5leHBvcnQgdHlwZSBJRCA9IHN0cmluZztcclxuZXhwb3J0IGludGVyZmFjZSBCcmFuY2hJbmZvIHtcclxuICAgIGxlZnQ6IFtzdHJpbmcsIElEXSB8IFtdLCBcclxuICAgIHJpZ2h0OiBbc3RyaW5nLCBJRF0gfCBbXVxyXG59XHJcbmV4cG9ydCB0eXBlIE5hbWUgPSBbc3RyaW5nLCBzdHJpbmddO1xyXG5leHBvcnQgZW51bSBEaXJlY3Rpb25Mb25nIHtsZWZ0LCByaWdodH07XHJcbmV4cG9ydCBlbnVtIE5laWdoYm91clBsIHtwYXJlbnRzLCBjaGlsZHJlbn07XHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGlvbkluZm8ge1xyXG4gICAgYnJhbmNoOiBCcmFuY2hJbmZvO1xyXG4gICAgcGFyZW50czogSURbXTtcclxuICAgIGNoaWxkcmVuOiBJRFtdO1xyXG4gICAgdHJhbnNmZXI/OiBTdGF0aW9uVHJhbnNmZXI7XHJcbiAgICBbcHJvcE5hbWU6IHN0cmluZ106IGFueTtcclxufVxyXG5pbnRlcmZhY2UgU3RhdGlvblRyYW5zZmVyIHtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIHRpY2tfZGlyZWM6ICdyJyB8ICdsJztcclxuICAgIHBhaWRfYXJlYTogYm9vbGVhbjtcclxuICAgIG9zaV9uYW1lczogTmFtZVtdO1xyXG4gICAgaW5mbzogSW50ZXJjaGFuZ2VJbmZvW11bXTtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpb25JbmZvRGljdCB7XHJcbiAgICBbaW5kZXg6IHN0cmluZ106IFN0YXRpb25JbmZvO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgUk1HUGFyYW0ge1xyXG4gICAgc3RuX2xpc3Q6IFN0YXRpb25JbmZvRGljdDtcclxuICAgIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpbmVFbnRyeSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZToge1xyXG4gICAgICAgIGVuOiBzdHJpbmc7XHJcbiAgICAgICAgW3g6IHN0cmluZ106IHN0cmluZztcclxuICAgIH07XHJcbiAgICBjb2xvdXI6IHN0cmluZztcclxuICAgIGZnPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENpdHlFbnRyeSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgY291bnRyeTogc3RyaW5nO1xyXG4gICAgbmFtZToge1xyXG4gICAgICAgIGVuOiBzdHJpbmc7XHJcbiAgICAgICAgW3g6IHN0cmluZ106IHN0cmluZztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHB1dFBhcmFtcyhpbnN0YW5jZTogUk1HUGFyYW0pIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdybWdQYXJhbScsIEpTT04uc3RyaW5naWZ5KGluc3RhbmNlKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJhbXMoKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2Uucm1nUGFyYW0pIGFzIFJNR1BhcmFtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGFyYW1zKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpIHtcclxuICAgIGxldCBwYXJhbSA9IGdldFBhcmFtcygpO1xyXG4gICAgcGFyYW1ba2V5XSA9IGRhdGE7XHJcbiAgICBwdXRQYXJhbXMocGFyYW0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVzdChzdmdFbCkge1xyXG4gICAgdmFyIFtzdmdXLCBzdmdIXSA9IHN2Z0VsLmF0dHIoJ3ZpZXdCb3gnKS5zcGxpdCgnICcpLnNsaWNlKDIpO1xyXG5cclxuICAgIHZhciBjYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ICQoJ2NhbnZhcycpWzBdO1xyXG4gICAgJCgnY2FudmFzJykuYXR0cih7XHJcbiAgICAgICAgd2lkdGg6IHN2Z1cqMi41LCBoZWlnaHQ6c3ZnSCoyLjVcclxuICAgIH0pO1xyXG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgLy8gYnlwYXNzIENocm9tZSBtaW4gZm9udCBzaXplICh0byBiZSBpbXByb3ZlZClcclxuXHJcbiAgICBzdmdFbC5maW5kKCcucm1nLW5hbWVfX2VuLnJtZy1uYW1lX19nem10ci0tc3RhdGlvbiwgLnJtZy1uYW1lX19lbi5ybWctbmFtZV9fbXRyLS1zdGF0aW9uLCAucm1nLW5hbWVfX3poLkludE5hbWUnKS5lYWNoKChfLGVsKSA9PiB7XHJcbiAgICAgICAgJChlbCkuYXR0cignZm9udC1zaXplJywgJzEwcHgnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN2Z0VsLmZpbmQoJy5ybWctbmFtZV9fZW4ucm1nLW5hbWVfX2d6bXRyLS1pbnQnKS5lYWNoKChfLGVsKSA9PiB7XHJcbiAgICAgICAgJChlbCkuYXR0cignZm9udC1zaXplJywgJzhweCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3ZnRWwuZmluZCgnLnJtZy1uYW1lX19lbi5ybWctbmFtZV9fZ3ptdHItLWludC1zbWFsbCwgLnJtZy1uYW1lX19lbi5JbnROYW1lJykuZWFjaCgoXyxlbCkgPT4ge1xyXG4gICAgICAgICQoZWwpLmF0dHIoJ2ZvbnQtc2l6ZScsICc3cHgnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN2Z0VsLmZpbmQoJ3RleHQ6bm90KFtmb250LXNpemVdKSwgdHNwYW46bm90KFtmb250LXNpemVdKScpLmVhY2goKF8sZWwpID0+IHtcclxuICAgICAgICAkKGVsKS5hdHRyKCdmb250LXNpemUnLCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZm9udFNpemUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3ZnRWwuZmluZCgndGV4dCwgdHNwYW4nKS5lYWNoKChfLGVsKSA9PiB7XHJcbiAgICAgICAgdmFyIGVsU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgJChlbCkuYXR0cih7XHJcbiAgICAgICAgICAgICdmb250LWZhbWlseSc6IGVsU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1mYW1pbHknKSwgXHJcbiAgICAgICAgICAgICdmaWxsJzogZWxTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdmaWxsJyksIFxyXG4gICAgICAgICAgICAnYWxpZ25tZW50LWJhc2VsaW5lJzogZWxTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdhbGlnbm1lbnQtYmFzZWxpbmUnKSwgXHJcbiAgICAgICAgICAgICdkb21pbmFudC1iYXNlbGluZSc6IGVsU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZG9taW5hbnQtYmFzZWxpbmUnKSxcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogZWxTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0ZXh0LWFuY2hvcicpXHJcbiAgICAgICAgfSkucmVtb3ZlQXR0cignY2xhc3MnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN2Z0VsLmZpbmQoJyNzdHJpcCwgI2Rlc3Rfc3RyaXAnKS5lYWNoKChfLGVsKSA9PiB7XHJcbiAgICAgICAgdmFyIGVsU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgJChlbCkuYXR0cih7XHJcbiAgICAgICAgICAgICdzdHJva2Utd2lkdGgnOiBlbFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3N0cm9rZS13aWR0aCcpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIHN2Z1cqMi41LCBzdmdIKjIuNSk7XHJcbiAgICAgICAgc2F2ZUFzKFxyXG4gICAgICAgICAgICAoPEhUTUxDYW52YXNFbGVtZW50PiQoJ2NhbnZhcycpWzBdKS50b0RhdGFVUkwoJ2ltYWdlL3BuZycpLCBcclxuICAgICAgICAgICAgJ3JtZ19leHBvcnQnXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIGltZy5zcmMgPSAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3ZnRWxbMF0ub3V0ZXJIVE1MKSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlQXModXJpOiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcpIHtcclxuXHJcbiAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGxpbmsuZG93bmxvYWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgbGluay5ocmVmID0gdXJpO1xyXG4gICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlbmFtZTtcclxuICAgICAgICAvL0ZpcmVmb3ggcmVxdWlyZXMgdGhlIGxpbmsgdG8gYmUgaW4gdGhlIGJvZHlcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgICAgIC8vc2ltdWxhdGUgY2xpY2tcclxuICAgICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgLy9yZW1vdmUgdGhlIGxpbmsgd2hlbiBkb25lXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5vcGVuKHVyaSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUeHRCb3hEaW0oZWxlbTogU1ZHR3JhcGhpY3NFbGVtZW50LCBzdmc6IHN0cmluZykge1xyXG4gICAgbGV0IHN2Z05vZGUgPSAkKCcjJyArIHN2ZylbMF0gYXMgRWxlbWVudCBhcyBTVkdTVkdFbGVtZW50O1xyXG4gICAgbGV0IGJjciA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBsZXQgcHQgPSBzdmdOb2RlLmNyZWF0ZVNWR1BvaW50KCk7XHJcbiAgICBsZXQgY3RtID0gc3ZnTm9kZS5nZXRTY3JlZW5DVE0oKTtcclxuICAgIHB0LnggPSBiY3IubGVmdDtcclxuICAgIHB0LnkgPSBiY3IudG9wO1xyXG4gICAgbGV0IHBvcyA9IHB0Lm1hdHJpeFRyYW5zZm9ybShjdG0uaW52ZXJzZSgpKTtcclxuICAgIHJldHVybiB7eDpwb3MueCwgeTpwb3MueSwgd2lkdGg6YmNyLndpZHRoLCBoZWlnaHQ6YmNyLmhlaWdodH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBqb2luSW50TmFtZShuYW1lczogTmFtZSwgZHkxLCBkeTIpOiBbSlF1ZXJ5PEhUTUxFbGVtZW50PiwgbnVtYmVyLCBudW1iZXJdIHtcclxuICAgIHZhciBbbmFtZVpILCBuYW1lRU5dID0gbmFtZXMubWFwKHR4dCA9PiB0eHQuc3BsaXQoL1xcXFwvZykpO1xyXG4gICAgdmFyIHJlcyA9ICQoJzx0ZXh0PicpLmFkZENsYXNzKCdybWctbmFtZV9femggSW50TmFtZScpLnRleHQobmFtZVpIWzBdKTtcclxuICAgIGZvciAobGV0IGk9MTsgaTxuYW1lWkgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICByZXMgPSByZXMuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dHNwYW4+Jywgeyd4JzowLCAnZHknOmR5MSwgJ2RvbWluYW50LWJhc2VsaW5lJzogJ2NlbnRyYWwnfSkudGV4dChuYW1lWkhbaV0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHZhciBidHdHYXAgPSAobmFtZVpILmxlbmd0aCA9PSAxKSA/IDkgOiA5O1xyXG4gICAgcmVzID0gcmVzLmFwcGVuZChcclxuICAgICAgICAkKCc8dHNwYW4+Jywge1xyXG4gICAgICAgICAgICAneCc6MCwgJ2R5JzpidHdHYXAsICdjbGFzcyc6ICdybWctbmFtZV9fZW4gSW50TmFtZSdcclxuICAgICAgICB9KS50ZXh0KG5hbWVFTlswXSlcclxuICAgICk7XHJcbiAgICBmb3IgKGxldCBpPTE7IGk8bmFtZUVOLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVzID0gcmVzLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPHRzcGFuPicsIHtcclxuICAgICAgICAgICAgICAgICd4JzowLCAnZHknOmR5MiwgJ2NsYXNzJzogJ3JtZy1uYW1lX19lbiBJbnROYW1lJ1xyXG4gICAgICAgICAgICB9KS50ZXh0KG5hbWVFTltpXSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtyZXMsIG5hbWVaSC5sZW5ndGgsIG5hbWVFTi5sZW5ndGhdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50Qm94R1ooaW50SW5mbzogSW50ZXJjaGFuZ2VJbmZvLCBzdGF0ZSkge1xyXG4gICAgbGV0IGJnID0gaW50SW5mb1tJbnRJbmZvVGFnLmNvbG91cl07XHJcbiAgICBsZXQgZmcgPSBpbnRJbmZvW0ludEluZm9UYWcuZmddO1xyXG4gICAgbGV0IG5hbWVzID0gW1xyXG4gICAgICAgIGludEluZm9bSW50SW5mb1RhZy5uYW1lWkhdLCBcclxuICAgICAgICBpbnRJbmZvW0ludEluZm9UYWcubmFtZUVOXVxyXG4gICAgXTtcclxuICAgIGxldCBuYW1lWkhzID0gbmFtZXNbMF0ubWF0Y2goL1tcXGRdK3xbXFxEXSsvZykgfHwgWycnXTtcclxuICAgIGxldCBpbnROYW1lU3BsaXRPayA9IGZhbHNlO1xyXG4gICAgaWYgKG5hbWVaSHMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICBpZiAoIWlzTmFOKE51bWJlcihuYW1lWkhzWzBdKSkgJiYgaXNOYU4oTnVtYmVyKG5hbWVaSHNbMV0pKSkge1xyXG4gICAgICAgICAgICBpbnROYW1lU3BsaXRPayA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGJveEVsID0gJCgnPGc+JylcclxuICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dXNlPicsIHsgXHJcbiAgICAgICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW50Ym94X2d6JywgXHJcbiAgICAgICAgICAgICAgICBmaWxsOiBzdGF0ZT09PS0xID8gJyNhYWEnIDogYmdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICAgICAgLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPHRleHQ+JywgeyB5OiA4LjUsIGNsYXNzOiAncm1nLW5hbWVfX3poIHJtZy1uYW1lX19nem10ci0taW50JyB9KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHNwYW4+JywgeyAnZm9udC1zaXplJzonMTZweCcsICdkb21pbmFudC1iYXNlbGluZSc6ICdjZW50cmFsJyB9KS50ZXh0KGludE5hbWVTcGxpdE9rID8gbmFtZVpIc1swXSA6ICcnKSlcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRzcGFuPicsIHsgZHk6LTEsICdkb21pbmFudC1iYXNlbGluZSc6ICdjZW50cmFsJyB9KS50ZXh0KGludE5hbWVTcGxpdE9rID8gbmFtZVpIc1sxXSA6IG5hbWVaSHMuam9pbignJykpKVxyXG4gICAgICAgIClcclxuICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nLCB7IFxyXG4gICAgICAgICAgICAgICAgeTogMTkuNSwgXHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ3JtZy1uYW1lX19lbidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhuYW1lc1sxXS5sZW5ndGggPiAxMCA/ICdybWctbmFtZV9fZ3ptdHItLWludC1zbWFsbCcgOiAncm1nLW5hbWVfX2d6bXRyLS1pbnQnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQobmFtZXNbMV0pXHJcbiAgICAgICAgKTtcclxuICAgIGlmIChmZyA9PT0gJyNmZmYnIHx8IHN0YXRlID09PSAtMSkge1xyXG4gICAgICAgICQoYm94RWwpLmZpbmQoJ3RleHQnKS5hZGRDbGFzcygncm1nLW5hbWVfX2d6bXRyLS13aGl0ZS1mZycpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBib3hFbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUlkKCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCA0KSkudG9TdHJpbmcoMzYpLnBhZFN0YXJ0KDQsICcwJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lRnJvbUlkKHN0bklkOiBJRCkge1xyXG4gICAgbGV0IG51bXNaSCA9IFtcclxuICAgICAgICAn55m4JywgJ+eUsicsICfkuZknLCAn5LiZJywgJ+S4gScsICfmiIonLCAn5bexJywgJ+W6micsICfovpsnLCAn5aOsJywgXHJcbiAgICAgICAgJ+aXpScsICfmnIgnLCAn6YeRJywgJ+acqCcsICfmsLQnLCAn54GrJywgJ+WcnycsIFxyXG4gICAgICAgICfnq7knLCAn5oiIJywgJ+WNgScsICflpKcnLCAn5LitJywgJ+S4gCcsICflvJMnLCBcclxuICAgICAgICAn5Lq6JywgJ+W/gycsICfmiYsnLCAn5Y+jJywgXHJcbiAgICAgICAgJ+WwuCcsICflu78nLCAn5bGxJywgJ+WlsycsICfnlLAnLCAn6ZujJywgJ+WNnCcsICfph40nXHJcbiAgICBdO1xyXG4gICAgbGV0IG51bXNFTiA9IFtcclxuICAgICAgICAnWmVybycsICdPbmUnLCAnVHdvJywgJ1RocmVlJywgJ0ZvdXInLCAnRml2ZScsICdTaXgnLCAnU2V2ZW4nLCAnRWlnaHQnLCAnTmluZScsIFxyXG4gICAgICAgICdBbGZhJywgJ0JyYXZvJywgJ0NoYXJsaWUnLCAnRGVsdGEnLCAnRWNobycsICdGb3h0cm90JywgJ0dvbGYnLFxyXG4gICAgICAgICdIb3RlbCcsICdJbmRpYScsICdKdWxpZXR0JywgJ0tpbG8nLCAnTGltYScsICdNaWtlJywgJ05vdmVtYmVyJywgXHJcbiAgICAgICAgJ09zY2FyJywgJ1BhcGEnLCAnUXVlYmVjJywgJ1JvbWVvJywgXHJcbiAgICAgICAgJ1NpZXJyYScsICdUYW5nbycsICdVbmlmb3JtJywgJ1ZpY3RvcicsICdXaGlza2V5JywgJ1gtcmF5JywgJ1lhbmtlZScsICdadWx1J1xyXG4gICAgXTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgc3RuSWQuc3BsaXQoJycpLm1hcChjaGFyID0+IG51bXNaSFtwYXJzZUludChjaGFyLCAzNildKS5qb2luKCcnKSwgXHJcbiAgICAgICAgc3RuSWQuc3BsaXQoJycpLm1hcChjaGFyID0+IG51bXNFTltwYXJzZUludChjaGFyLCAzNildKS5qb2luKCcgJylcclxuICAgIF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXNjcmliZVBhcmFtcyhwYXJhbTogUk1HUGFyYW0pIHtcclxuICAgIHJldHVybiBgTnVtYmVyIG9mIHN0YXRpb25zOiAke09iamVjdC5rZXlzKHBhcmFtLnN0bl9saXN0KS5sZW5ndGgtMn1cclxuICAgICAgICAgICAgJHtPYmplY3QuZW50cmllcyhwYXJhbS5zdG5fbGlzdCkubWFwKHggPT4gWydsaW5lc3RhcnQnLCdsaW5lZW5kJ10uaW5jbHVkZXMoeFswXSkgPyAnJyA6IHhbMV0ubmFtZS5qb2luKCcgLSAnKSkuam9pbignPGJyPicpLnRyaW0oKS5yZXBsYWNlKC9cXFxcLywnICcpfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudHJ5Q29kZTJFbW9qaShjb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdmFyIGNoYXJzID0gY29kZS50b1VwcGVyQ2FzZSgpLnNwbGl0KCcnKTtcclxuICAgIGlmIChjb2RlLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoYXJzLm1hcChjaGFyID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KChjaGFyLmNvZGVQb2ludEF0KDApKzEyNzM5NykpKS5qb2luKCcnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICdcXHV7MWYzZjR9JyArIGNoYXJzLm1hcChjaGFyID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KChjaGFyLmNvZGVQb2ludEF0KDApKzkxNzUzNikpKS5qb2luKCcnKSArICdcXHV7ZTAwN2Z9JztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJnYjJIZXgocmdiOiBzdHJpbmcpIHtcclxuICAgIGxldCBoZXggPSByZ2IubWF0Y2goL1tcXGRdKy9nKVxyXG4gICAgICAgIC5tYXAoZGVjID0+IE51bWJlcihkZWMpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCcwJykpXHJcbiAgICAgICAgLmpvaW4oJycpO1xyXG4gICAgc3dpdGNoIChoZXgpIHtcclxuICAgICAgICBjYXNlICcwMDAwMDAnOiByZXR1cm4gJyMwMDAnO1xyXG4gICAgICAgIGNhc2UgJ2ZmZmZmZic6IHJldHVybiAnI2ZmZic7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICcjJyArIGhleDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBhcmFtKCkge1xyXG4gICAgdmFyIHBhcmFtID0gZ2V0UGFyYW1zKCk7XHJcblxyXG4gICAgLy8gVmVyc2lvbiAwLjEwXHJcbiAgICBpZiAoISgnbGluZV9uYW1lJyBpbiBwYXJhbSkpIHtcclxuICAgICAgICBwYXJhbS5saW5lX25hbWUgPSBbJ+i3r+e3muWQjScsICdOYW1lIG9mIExpbmUnXTtcclxuICAgIH1cclxuICAgIGlmICghKCdkZXN0X2xlZ2FjeScgaW4gcGFyYW0pKSB7XHJcbiAgICAgICAgcGFyYW0uZGVzdF9sZWdhY3kgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJzaW9uIDAuMTFcclxuICAgIGlmICghKCdjaGFyX2Zvcm0nIGluIHBhcmFtKSkge1xyXG4gICAgICAgIHBhcmFtLmNoYXJfZm9ybSA9IChyZWdpb24gPT4ge3N3aXRjaCAocmVnaW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0tSJzogcmV0dXJuICd0cmFkJztcclxuICAgICAgICAgICAgY2FzZSAnVEMnOiByZXR1cm4gJ3R3JztcclxuICAgICAgICAgICAgY2FzZSAnU0MnOiByZXR1cm4gJ2NuJztcclxuICAgICAgICAgICAgY2FzZSAnSlAnOiByZXR1cm4gJ2pwJztcclxuICAgICAgICB9fSkocGFyYW0uZm9udFpIWzBdLnNwbGl0KCcgJykucmV2ZXJzZSgpWzBdKVxyXG4gICAgfVxyXG4gICAgZGVsZXRlIHBhcmFtLmZvbnRaSDtcclxuICAgIGRlbGV0ZSBwYXJhbS5mb250RU47XHJcbiAgICBkZWxldGUgcGFyYW0ud2VpZ2h0Wkg7XHJcbiAgICBkZWxldGUgcGFyYW0ud2VpZ2h0RU47XHJcblxyXG4gICAgLy8gVmVyc2lvbiAwLjEyXHJcbiAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluZm9dIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtLnN0bl9saXN0KSkge1xyXG4gICAgICAgIC8vIGlmIChbJ2xpbmVzdGFydCcsICdsaW5lZW5kJ10uaW5jbHVkZXMoc3RuSWQpKSB7Y29udGludWU7fVxyXG4gICAgICAgIC8vIGlmICgndHJhbnNmZXInIGluIHN0bkluZm8pIHtcclxuICAgICAgICAvLyAgICAgZGVsZXRlIHBhcmFtLnN0bl9saXN0W3N0bklkXS5pbnRlcmNoYW5nZTtcclxuICAgICAgICAvLyAgICAgc3dpdGNoIChzdG5JbmZvLmNoYW5nZV90eXBlKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBjYXNlICdpbnQyJzpcclxuICAgICAgICAvLyAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uaW50ZXJjaGFuZ2UgPSBbW3N0bkluZm8udHJhbnNmZXJbMV1dXTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ2ludDNfbCc6XHJcbiAgICAgICAgLy8gICAgICAgICBjYXNlICdpbnQzX3InOlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5pbnRlcmNoYW5nZSA9IFtzdG5JbmZvLnRyYW5zZmVyLnNsaWNlKDEsMyldO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICAgICAgY2FzZSAnb3NpMTFfcGwnOlxyXG4gICAgICAgIC8vICAgICAgICAgY2FzZSAnb3NpMTFfcHInOlxyXG4gICAgICAgIC8vICAgICAgICAgY2FzZSAnb3NpMTFfdWwnOlxyXG4gICAgICAgIC8vICAgICAgICAgY2FzZSAnb3NpMTFfdXInOlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5pbnRlcmNoYW5nZSA9IFtbXSwgc3RuSW5mby50cmFuc2Zlci5zbGljZSgwLDIpXTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ29zaTEyX3BsJzpcclxuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ29zaTEyX3ByJzpcclxuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ29zaTEyX3VsJzpcclxuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ29zaTEyX3VyJzpcclxuICAgICAgICAvLyAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uaW50ZXJjaGFuZ2UgPSBbW10sIHN0bkluZm8udHJhbnNmZXJdO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGRlbGV0ZSBwYXJhbS5zdG5fbGlzdFtzdG5JZF0udHJhbnNmZXI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCEoJ2JyYW5jaCcgaW4gc3RuSW5mbykpIHtcclxuICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmJyYW5jaCA9IHsgbGVmdDpbXSwgcmlnaHQ6W10gfTtcclxuICAgICAgICAgICAgaWYgKHN0bkluZm8uY2hpbGRyZW4ubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBbJ3Rocm91Z2gnLCBzdG5JbmZvLmNoaWxkcmVuWzFdXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RuSW5mby5wYXJlbnRzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoLmxlZnQgPSBbJ3Rocm91Z2gnLCBzdG5JbmZvLnBhcmVudHNbMV1dO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmJyYW5jaC5sZWZ0ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyc2lvbiAxLjJcclxuICAgIGlmICghKCdwc2RfbnVtJyBpbiBwYXJhbSkpIHtcclxuICAgICAgICBwYXJhbS5wc2RfbnVtID0gMTtcclxuICAgIH1cclxuICAgIGlmICghKCdsaW5lX251bScgaW4gcGFyYW0pKSB7XHJcbiAgICAgICAgcGFyYW0ubGluZV9udW0gPSAxO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHBhcmFtLnN0eWxlO1xyXG4gICAgaWYgKHBhcmFtLnRoZW1lLmxlbmd0aCA9PSAzKSB7XHJcbiAgICAgICAgcGFyYW0udGhlbWUucHVzaCgnI2ZmZicpO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbmZvXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbS5zdG5fbGlzdCkpIHtcclxuICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge2NvbnRpbnVlO31cclxuICAgICAgICBpZiAoISgnbnVtJyBpbiBzdG5JbmZvKSkge1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ubnVtID0gJzAwJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyc2lvbiAxLjNcclxuICAgIGZvciAobGV0IFtzdG5JZCwgc3RuSW5mb10gb2YgT2JqZWN0LmVudHJpZXMocGFyYW0uc3RuX2xpc3QpKSB7XHJcbiAgICAgICAgaWYgKCdpbnRlcmNoYW5nZScgaW4gc3RuSW5mbykge1xyXG4gICAgICAgICAgICBzdG5JbmZvLmludGVyY2hhbmdlLm1hcChhcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXJyLm1hcChpbnRJbmZvID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50SW5mby5sZW5ndGggPT0gNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRJbmZvLnNwbGljZSgzLDAsJyNmZmYnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcnNpb24gMS40XHJcbiAgICBpZiAoISgnaW5mb19wYW5lbF90eXBlJyBpbiBwYXJhbSkpIHtcclxuICAgICAgICBwYXJhbS5pbmZvX3BhbmVsX3R5cGUgPSAncGFuYXNvbmljJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJzaW9uIDEuNVxyXG4gICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbmZvXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbS5zdG5fbGlzdCkpIHtcclxuICAgICAgICBpZiAoc3RuSW5mby5jaGFuZ2VfdHlwZSA9PT0gJ29zaTIyX2VuZF9wJykge1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uY2hhbmdlX3R5cGUgPSAnb3NpMjJfcHInO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RuSW5mby5jaGFuZ2VfdHlwZSA9PT0gJ29zaTIyX2VuZF91Jykge1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uY2hhbmdlX3R5cGUgPSAnb3NpMjJfdXInO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgIC8vIFZlcnNpb24gMi4xXHJcbiAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluZm9dIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtLnN0bl9saXN0KSkge1xyXG4gICAgICAgIGlmICghKCdpbnRlcmNoYW5nZScgaW4gc3RuSW5mbykpIHtcclxuICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmludGVyY2hhbmdlID0gW1tdXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyc2lvbiAyLjJcclxuICAgIGlmIChwYXJhbS5pbmZvX3BhbmVsX3R5cGUgPT09ICdnel8xJykge1xyXG4gICAgICAgIHBhcmFtLmluZm9fcGFuZWxfdHlwZSA9ICdnejI4JztcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJzaW9uIDIuM1xyXG4gICAgaWYgKHBhcmFtLmluZm9fcGFuZWxfdHlwZSA9PT0gJ3BhbmFzb25pYycpIHtcclxuICAgICAgICBwYXJhbS5pbmZvX3BhbmVsX3R5cGUgPSAnZ3oyOCc7XHJcbiAgICB9XHJcbiAgICBpZiAocGFyYW0uaW5mb19wYW5lbF90eXBlID09PSAnZ3pfMicpIHtcclxuICAgICAgICBwYXJhbS5pbmZvX3BhbmVsX3R5cGUgPSAnZ3pnZic7XHJcbiAgICB9XHJcbiAgICBpZiAocGFyYW0uaW5mb19wYW5lbF90eXBlID09PSAnZ3pfMycpIHtcclxuICAgICAgICBwYXJhbS5pbmZvX3BhbmVsX3R5cGUgPSAnZ3ozJztcclxuICAgIH1cclxuICAgIGlmICghKCdkaXJlY3Rpb25fZ3pfeCcgaW4gcGFyYW0pKSB7XHJcbiAgICAgICAgcGFyYW0uZGlyZWN0aW9uX2d6X3ggPSA1MDtcclxuICAgIH1cclxuICAgIGlmICghKCdkaXJlY3Rpb25fZ3pfeScgaW4gcGFyYW0pKSB7XHJcbiAgICAgICAgcGFyYW0uZGlyZWN0aW9uX2d6X3kgPSA3MDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJzaW9uIDIuNlxyXG4gICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbmZvXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbS5zdG5fbGlzdCkpIHtcclxuICAgICAgICBpZiAoISgndHJhbnNmZXInIGluIHBhcmFtKSkge1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0udHJhbnNmZXIgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBzdG5JbmZvLmNoYW5nZV90eXBlLnNwbGl0KCdfJylbMF0sIFxyXG4gICAgICAgICAgICAgICAgdGlja19kaXJlYzogKHN0bkluZm8uY2hhbmdlX3R5cGUgPT09ICdub25lJyB8fCBzdG5JbmZvLmNoYW5nZV90eXBlID09PSAnaW50MicpID8gJ3InIDogc3RuSW5mby5jaGFuZ2VfdHlwZS5zcGxpdCgnXycpWzFdLnNwbGl0KCcnKS5zbGljZSgpLnJldmVyc2UoKVswXSwgXHJcbiAgICAgICAgICAgICAgICBwYWlkX2FyZWE6IChzdG5JbmZvLmNoYW5nZV90eXBlLmluZGV4T2YoJ29zaScpIT09LTEpID8gc3RuSW5mby5jaGFuZ2VfdHlwZS5zcGxpdCgnXycpWzFdWzBdPT09J3AnIDogdHJ1ZSwgXHJcbiAgICAgICAgICAgICAgICBvc2lfbmFtZXM6IChzdG5JbmZvLmNoYW5nZV90eXBlLmluZGV4T2YoJ29zaScpIT09LTEpID8gW3N0bkluZm8uaW50ZXJjaGFuZ2VbMV1bMF1dIDogW10sIFxyXG4gICAgICAgICAgICAgICAgaW5mbzogKHN0bkluZm8uaW50ZXJjaGFuZ2UubGVuZ3RoID09PSAyKSA/IFtzdG5JbmZvLmludGVyY2hhbmdlWzBdLCBzdG5JbmZvLmludGVyY2hhbmdlWzFdLnNsaWNlKDEpXSA6IHN0bkluZm8uaW50ZXJjaGFuZ2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcbn1cclxuXHJcblxyXG5jb25zdCBsYW5nRmFsbGJhY2sgPSAobGFuZzogc3RyaW5nKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGxhbmcpIHtcclxuICAgICAgICBjYXNlICdlbic6IHJldHVybiBbJ2VuJ107XHJcbiAgICAgICAgY2FzZSAnemgtSGFucyc6IHJldHVybiBbJ3poLUhhbnMnLCAnemgnLCAnZW4nXTtcclxuICAgICAgICBjYXNlICd6aC1ISyc6IHJldHVybiBbJ3poLUhLJywgJ3poLUhhbnQnLCAnemgnLCAnZW4nXTtcclxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gW2xhbmcsICdlbiddO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VHJhbnNUZXh0ID0gKG9iajoge1tpbmRleDogc3RyaW5nXTogc3RyaW5nfSwgbGFuZzogc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gb2JqW2xhbmdGYWxsYmFjayhsYW5nKS5maW5kKGwgPT4gb2JqW2xdKV07XHJcbn1cclxuIiwiaW1wb3J0IHsgam9pbkludE5hbWUgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IElELCBOYW1lLCBCcmFuY2hJbmZvLCBTdGF0aW9uSW5mbyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBlbnVtIEludEluZm9UYWcge1xyXG4gICAgY2l0eSwgbGluZSwgY29sb3VyLCBmZywgbmFtZVpILCBuYW1lRU5cclxufTtcclxuZXhwb3J0IHR5cGUgSW50ZXJjaGFuZ2VJbmZvID0ge1xyXG4gICAgW1QgaW4gSW50SW5mb1RhZ106IHN0cmluZztcclxufTtcclxuXHJcbmNsYXNzIFJNR1N0YXRpb24ge1xyXG4gICAgU1ROX05BTUVfWSA9IC0xMC41O1xyXG4gICAgU1ROX05BTUVfQkFTRV9IRUlHSFQgPSAzMC4zOTA2MjU7XHJcbiAgICBTVE5fTkFNRV9MSU5FX0dBUCA9IDE0O1xyXG4gICAgU1ROX05BTUVfQkdfQURKVVNUID0gMC41O1xyXG5cclxuICAgIHB1YmxpYyBpZDogSUQ7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGF0ZTogLTEgfCAwIHwgMTtcclxuICAgIHB1YmxpYyBwYXJlbnRzOiBJRFtdO1xyXG4gICAgcHVibGljIGNoaWxkcmVuOiBJRFtdO1xyXG4gICAgcHVibGljIG5hbWVQb3M6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgbmFtZTogTmFtZTtcclxuICAgIHB1YmxpYyBicmFuY2g6IEJyYW5jaEluZm87XHJcbiAgICBwdWJsaWMgc3RuTnVtOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGlkOiBJRCwgZGF0YTogU3RhdGlvbkluZm8pIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRzID0gZGF0YS5wYXJlbnRzO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICB0aGlzLmJyYW5jaCA9IGRhdGEuYnJhbmNoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbkRlZ3JlZSgpIHtyZXR1cm4gdGhpcy5wYXJlbnRzLmxlbmd0aDt9XHJcbiAgICBnZXQgb3V0RGVncmVlKCkge3JldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aDt9XHJcblxyXG4gICAgZ2V0IG5hbWVDbGFzcygpOiBzdHJpbmcge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIC0xOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdQYXNzJztcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdDdXJyZW50JztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnRnV0dXJlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9uYW1lVHh0QW5jaG9yKCkge3JldHVybiAnbWlkZGxlJzt9XHJcbiAgICBnZXQgX25hbWVEWCgpIHtyZXR1cm4gMDt9XHJcbiAgICBnZXQgX25hbWVEWSgpIHtyZXR1cm4gMDt9XHJcblxyXG4gICAgZ2V0IG5hbWVIVE1MKCkge1xyXG4gICAgICAgIHZhciBuYW1lRU5zID0gdGhpcy5uYW1lWzFdLnNwbGl0KCdcXFxcJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm5hbWVQb3MpIHtcclxuICAgICAgICAgICAgdmFyIGR5ID0gdGhpcy5TVE5fTkFNRV9MSU5FX0dBUCAtIHRoaXMuU1ROX05BTUVfWSAtIHRoaXMuU1ROX05BTUVfQkdfQURKVVNUO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBkeSA9IC10aGlzLlNUTl9OQU1FX0xJTkVfR0FQIC0gdGhpcy5TVE5fTkFNRV9ZIC0gdGhpcy5TVE5fTkFNRV9CQVNFX0hFSUdIVCAtIChuYW1lRU5zLmxlbmd0aC0xKSoxMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZHkgLT0gdGhpcy5TVE5fTkFNRV9CR19BREpVU1Q7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSAwKSB7XHJcbiAgICAgICAgICAgICQoJyNjdXJyZW50X2JnJykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnkgKyBkeSArIHRoaXMuU1ROX05BTUVfWSAtIDEuNSArIHRoaXMuX25hbWVEWSwgXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuU1ROX05BTUVfQkFTRV9IRUlHSFQgKyAobmFtZUVOcy5sZW5ndGgtMSkqMTAgKzIgKzEuNVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuYW1lRU5wID0gbmFtZUVOcy5zaGlmdCgpO1xyXG5cclxuICAgICAgICB2YXIgbmFtZUVORWxlbSA9ICQoJzx0ZXh0PicsIHtcclxuICAgICAgICAgICAgZHk6IDE1LCBjbGFzczogJ3JtZy1uYW1lX19lbiBybWctbmFtZV9fbXRyLS1zdGF0aW9uJ1xyXG4gICAgICAgIH0pLnRleHQobmFtZUVOcCk7XHJcbiAgICAgICAgd2hpbGUgKG5hbWVFTnAgPSBuYW1lRU5zLnNoaWZ0KCkpIHtcclxuICAgICAgICAgICAgbmFtZUVORWxlbS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dHNwYW4+JywgeyB4OiAwLCBkeTogMTAsICdhbGlnbm1lbnQtYmFzZWxpbmUnOidtaWRkbGUnIH0pLnRleHQobmFtZUVOcClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueCArIHRoaXMuX25hbWVEWH0sJHt0aGlzLnkgKyBkeSArIHRoaXMuX25hbWVEWX0pYCwgXHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6IHRoaXMuX25hbWVUeHRBbmNob3IsIFxyXG4gICAgICAgICAgICAnY2xhc3MnOiBgTmFtZSAke3RoaXMubmFtZUNsYXNzfWBcclxuICAgICAgICB9KS5hcHBlbmQoXHJcbiAgICAgICAgICAgICQoJzx0ZXh0PicpLmFkZENsYXNzKCdybWctbmFtZV9femggcm1nLW5hbWVfX210ci0tc3RhdGlvbicpLnRleHQodGhpcy5uYW1lWzBdKVxyXG4gICAgICAgICkuYXBwZW5kKFxyXG4gICAgICAgICAgICBuYW1lRU5FbGVtXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWNvbkNsYXNzKCkge3JldHVybiB0aGlzLnN0YXRlID09IC0xID8gJ3JtZy1zdG5fX210ci0tcGFzcycgOiAncm1nLXN0bl9fbXRyLS1mdXR1cmUnO31cclxuXHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjc3RuX2hrJywgXHJcbiAgICAgICAgICAgIHg6IHRoaXMueCwgeTogdGhpcy55LCBcclxuICAgICAgICAgICAgY2xhc3M6IHRoaXMuaWNvbkNsYXNzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUxdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7aWQ6dGhpcy5pZH0pLmFwcGVuZCguLi50aGlzLnVuZ3JwSFRNTCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEludDJTdGF0aW9uIGV4dGVuZHMgUk1HU3RhdGlvbiB7XHJcbiAgICBwcml2YXRlIF9pbnRJbmZvOiBJbnRlcmNoYW5nZUluZm87XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGlkOiBJRCwgZGF0YTogU3RhdGlvbkluZm8pIHtcclxuICAgICAgICBzdXBlcihpZCwgZGF0YSk7XHJcbiAgICAgICAgdGhpcy5faW50SW5mbyA9IGRhdGEuaW50ZXJjaGFuZ2VbMF1bMF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9keSgpIHtyZXR1cm4gMDt9XHJcblxyXG4gICAgZ2V0IGludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIHZhciB0aWNrUm90YXRpb24gPSAodGhpcy5uYW1lUG9zKSA/IDE4MCA6IDA7XHJcbiAgICAgICAgdmFyIHRpY2tDb2xvdXIgPSB0aGlzLl9pbnRJbmZvW0ludEluZm9UYWcuY29sb3VyXTtcclxuICAgICAgICB2YXIgdGljayA9ICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW50dGlja19oaycsIFxyXG4gICAgICAgICAgICBzdHJva2U6IHRpY2tDb2xvdXIsIFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55K3RoaXMuX2R5fSlyb3RhdGUoJHt0aWNrUm90YXRpb259KWAsIFxyXG4gICAgICAgICAgICBjbGFzczogJ3JtZy1saW5lIHJtZy1saW5lX19tdHIgcm1nLWxpbmVfX2NoYW5nZSdcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSAtMSkge1xyXG4gICAgICAgICAgICB0aWNrLmFkZENsYXNzKCdybWctbGluZV9fcGFzcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGljaztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX25hbWVDbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGUgPT0gLTEpID8gJ1Bhc3MnIDogJ0Z1dHVyZSc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGludE5hbWVIVE1MKCkge1xyXG4gICAgICAgIHZhciBbbmFtZUhUTUwsIG5hbWVaSExuLCBuYW1lRU5Mbl0gPSBqb2luSW50TmFtZShbdGhpcy5faW50SW5mb1tJbnRJbmZvVGFnLm5hbWVaSF0sIHRoaXMuX2ludEluZm9bSW50SW5mb1RhZy5uYW1lRU5dXSwgMTAsIDcpO1xyXG4gICAgICAgIHZhciBkeSA9ICghdGhpcy5uYW1lUG9zKSA/IDI1ICsgNS45NTMxMjUgOiAtMjUgKyA1Ljk1MzEyNSAtIDE4LjY1NjI1IC0gMTMqKG5hbWVaSExuLTEpIC0gNyoobmFtZUVOTG4tMSk7XHJcbiAgICAgICAgZHkgKz0gdGhpcy5fZHk7XHJcbiAgICAgICAgLy8gdmFyIG5hbWVDbGFzcyA9ICh0aGlzLnN0YXRlID09IC0xKSA/ICdQYXNzJyA6ICdGdXR1cmUnO1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCBcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55ICsgZHl9KWAsIFxyXG4gICAgICAgICAgICAnY2xhc3MnOiBgTmFtZSAke3RoaXMuX25hbWVDbGFzc31gXHJcbiAgICAgICAgfSkuaHRtbChuYW1lSFRNTFswXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMuaW50VGlja0hUTUwsIHRoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUwsIHRoaXMuaW50TmFtZUhUTUxdO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBJbnQzU3RhdGlvbiBleHRlbmRzIFJNR1N0YXRpb24ge1xyXG4gICAgcHJpdmF0ZSBfaW50SW5mb3M6IEludGVyY2hhbmdlSW5mb1tdO1xyXG4gICAgcHJpdmF0ZSBfaW50Q2l0eSA9IFtdOyBcclxuICAgIHByaXZhdGUgX2ludExpbmUgPSBbXTsgXHJcbiAgICBwcml2YXRlIF9pbnRDb2xvdXIgPSBbXTtcclxuICAgIHByaXZhdGUgX2ludE5hbWVaSCA9IFtdOyBcclxuICAgIHByaXZhdGUgX2ludE5hbWVFTiA9IFtdO1xyXG4gICAgLy8gX2ludDNUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChpZDogSUQsIGRhdGEpIHtcclxuICAgICAgICBzdXBlcihpZCwgZGF0YSk7XHJcbiAgICAgICAgdGhpcy5faW50SW5mb3MgPSBkYXRhLmludGVyY2hhbmdlWzBdO1xyXG5cclxuICAgICAgICBkYXRhLmludGVyY2hhbmdlWzBdLmZvckVhY2goaW50SW5mbyA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludENpdHkucHVzaChpbnRJbmZvWzBdKTtcclxuICAgICAgICAgICAgdGhpcy5faW50TGluZS5wdXNoKGludEluZm9bMV0pO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRDb2xvdXIucHVzaChpbnRJbmZvWzJdKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2ludE5hbWVaSC5wdXNoKGludEluZm9bNF0pO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnROYW1lRU4ucHVzaChpbnRJbmZvWzVdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5faW50M1R5cGUgPSBkYXRhLmNoYW5nZV90eXBlLnN1YnN0cmluZyg1KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgbGV0IGljb25Sb3RhdGlvbiA9ICghdGhpcy5uYW1lUG9zKSA/IDAgOiAxODA7XHJcbiAgICAgICAgcmV0dXJuICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW50M19oaycsIFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlyb3RhdGUoJHtpY29uUm90YXRpb259KWAsIFxyXG4gICAgICAgICAgICBjbGFzczogdGhpcy5pY29uQ2xhc3NcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX3RpY2tSb3RhdGlvbigpIHtyZXR1cm4gMDt9XHJcbiAgICBnZXQgX2R5KCkge3JldHVybiAwO31cclxuICAgIGdldCBfZHgoKSB7cmV0dXJuIDA7fVxyXG4gICAgZ2V0IF90aWNrRmxpcCgpIHtyZXR1cm4gMTt9XHJcblxyXG4gICAgZ2V0IGludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIGxldCBlbGVtczogSlF1ZXJ5PEhUTUxFbGVtZW50PltdID0gW107XHJcbiAgICAgICAgdGhpcy5faW50SW5mb3NcclxuICAgICAgICAgICAgLm1hcChpbmZvID0+IGluZm9bSW50SW5mb1RhZy5jb2xvdXJdKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgoYywgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gMikge3JldHVybjt9XHJcbiAgICAgICAgICAgICAgICBsZXQgdGlja0NvbG91ciA9ICh0aGlzLnN0YXRlID09PSAtMSkgPyAnI2FhYScgOiBjO1xyXG4gICAgICAgICAgICAgICAgbGV0IGR5ID0gKCF0aGlzLm5hbWVQb3MpID8gMTgqKGkrMSkgOiAtMTgqKDItaSk7XHJcbiAgICAgICAgICAgICAgICBkeSArPSB0aGlzLl9keTtcclxuICAgICAgICAgICAgICAgIGR5ICo9IHRoaXMuX3RpY2tGbGlwO1xyXG4gICAgICAgICAgICAgICAgZWxlbXMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAkKCc8dXNlPicsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnOiAnI2ludHRpY2tfaGsnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB0aWNrQ29sb3VyLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54ICsgdGhpcy5fZHh9LCR7dGhpcy55ICsgZHl9KXJvdGF0ZSgke3RoaXMuX3RpY2tSb3RhdGlvbn0pYCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncm1nLWxpbmUgcm1nLWxpbmVfX210ciBybWctbGluZV9fY2hhbmdlJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZWxlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF90eHRBbmNob3IoKSB7cmV0dXJuICdtaWRkbGUnO31cclxuICAgIGdldCBfaW50TmFtZURYKCkge3JldHVybiAwO31cclxuICAgIGdldCBfbmFtZUNsYXNzKCkge3JldHVybiAodGhpcy5zdGF0ZSA9PSAtMSkgPyAnUGFzcycgOiAnRnV0dXJlJzt9XHJcblxyXG4gICAgZ2V0IGludE5hbWVIVE1MKCkge1xyXG4gICAgICAgIC8vIHZhciBzdHIgPSAnJztcclxuICAgICAgICBsZXQgZWxlbXM6IEpRdWVyeTxIVE1MRWxlbWVudD5bXSA9IFtdO1xyXG4gICAgICAgIGxldCBuYW1lQ2xhc3MgPSB0aGlzLl9uYW1lQ2xhc3M7XHJcblxyXG4gICAgICAgIHRoaXMuX2ludEluZm9zXHJcbiAgICAgICAgICAgIC5tYXAoaW5mbyA9PiBbaW5mb1tJbnRJbmZvVGFnLm5hbWVaSF0sIGluZm9bSW50SW5mb1RhZy5uYW1lRU5dXSBhcyBOYW1lKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgobmFtZXMsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49Mikge3JldHVybjt9XHJcbiAgICAgICAgICAgICAgICBsZXQgW25hbWVIVE1MLCBuYW1lWkhMbiwgbmFtZUVOTG5dID0gam9pbkludE5hbWUobmFtZXMsIDEwLCA3KTtcclxuICAgICAgICAgICAgICAgIHZhciBkeSA9ICghdGhpcy5uYW1lUG9zKSA/IDE4KihpKzEpIDogLTE4KigyLWkpO1xyXG4gICAgICAgICAgICAgICAgZHkgKz0gdGhpcy5fZHk7XHJcbiAgICAgICAgICAgICAgICBkeSAqPSB0aGlzLl90aWNrRmxpcDtcclxuICAgICAgICAgICAgICAgIGR5ICs9IDUuOTUzMTI1IC0gKDE5LjY1NjI1ICsgMTMqKG5hbWVaSExuLTEpICsgNyoobmFtZUVOTG4tMSkpLzI7XHJcbiAgICAgICAgICAgICAgICBlbGVtcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICQoJzxnPicsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fdHh0QW5jaG9yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54ICsgdGhpcy5faW50TmFtZURYfSwke3RoaXMueSArIGR5fSlgLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdOYW1lICcgKyBuYW1lQ2xhc3NcclxuICAgICAgICAgICAgICAgICAgICB9KS5odG1sKG5hbWVIVE1MWzBdKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1bmdycEhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmludFRpY2tIVE1MLCB0aGlzLmljb25IVE1MLCB0aGlzLm5hbWVIVE1MLCAuLi50aGlzLmludE5hbWVIVE1MXTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgSW50M0xTdGF0aW9uIGV4dGVuZHMgSW50M1N0YXRpb24ge1xyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7cmV0dXJuIDkwO31cclxuICAgIGdldCBfdHh0QW5jaG9yKCkge3JldHVybiAnZW5kJzt9XHJcbiAgICBnZXQgX2ludE5hbWVEWCgpIHtyZXR1cm4gLTI0O31cclxufVxyXG5cclxuY2xhc3MgSW50M1JTdGF0aW9uIGV4dGVuZHMgSW50M1N0YXRpb24ge1xyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7cmV0dXJuIC05MDt9XHJcbiAgICBnZXQgX3R4dEFuY2hvcigpIHtyZXR1cm4gJ3N0YXJ0Jzt9XHJcbiAgICBnZXQgX2ludE5hbWVEWCgpIHtyZXR1cm4gMjQ7fVxyXG59XHJcblxyXG5jbGFzcyBPU0kxMVN0YXRpb24gZXh0ZW5kcyBJbnQyU3RhdGlvbiB7XHJcbiAgICBwcml2YXRlIF9vc2lOYW1lczogTmFtZTtcclxuICAgIHByaXZhdGUgX29zaVR5cGU6ICd1JyB8ICdwJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoaWQ6IElELCBkYXRhOiBTdGF0aW9uSW5mbykge1xyXG4gICAgICAgIC8vIGRhdGEuaW50MiA9IGRhdGEub3NpMTE7XHJcbiAgICAgICAgZGF0YS5pbnRlcmNoYW5nZVswXS5wdXNoKGRhdGEuaW50ZXJjaGFuZ2VbMV1bMV0pO1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3NpTmFtZXMgPSBkYXRhLmludGVyY2hhbmdlWzFdWzBdO1xyXG4gICAgICAgIHRoaXMuX29zaVR5cGUgPSBkYXRhLmNoYW5nZV90eXBlLnN1YnN0cmluZyg2LDcpOyAvLyB1KG5wYWlkKSBvciBwKGFpZCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBvc2lDbGFzcygpIHtyZXR1cm4gdGhpcy5fb3NpVHlwZSA9PSAndScgPyAncm1nLXN0bl9fbXRyLS11bnBhaWQtb3NpJyA6ICdybWctc3RuX19tdHItLXBhaWQtb3NpJzt9XHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgdmFyIGljb25Sb3RhdGlvbiA9ICghdGhpcy5uYW1lUG9zKSA/IDAgOiAxODA7XHJcbiAgICAgICAgcmV0dXJuICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjb3NpMTFfaGsnLCBcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlyb3RhdGUoJHtpY29uUm90YXRpb259KWAsIFxyXG4gICAgICAgICAgICBjbGFzczogW3RoaXMuaWNvbkNsYXNzLCB0aGlzLm9zaUNsYXNzXS5qb2luKCcgJylcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX2R5KCkge3JldHVybiAoIXRoaXMubmFtZVBvcykgPyAyNiA6IC0yNjt9XHJcbiAgICBnZXQgX3R4dEFuY2hvcigpIHtyZXR1cm4gJ21pZGRsZSc7fVxyXG4gICAgZ2V0IF9vc2lOYW1lRFgoKSB7cmV0dXJuIDA7fVxyXG5cclxuICAgIGdldCBvc2lOYW1lSFRNTCgpIHtcclxuICAgICAgICB2YXIgZHkgPSB0aGlzLl9keSArIDguMzQzNzUgLSAyNS4wMzEyNS8yO1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6IHRoaXMuX3R4dEFuY2hvciwgXHJcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlKCR7dGhpcy54K3RoaXMuX29zaU5hbWVEWH0sJHt0aGlzLnkrZHl9KWAsIFxyXG4gICAgICAgICAgICAnY2xhc3MnOiAnTmFtZSAnICsgdGhpcy5fbmFtZUNsYXNzXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nKS5hZGRDbGFzcygncm1nLW5hbWVfX3poIHJtZy1uYW1lX19tdHItLW9zaScpLnRleHQodGhpcy5fb3NpTmFtZXNbMF0pXHJcbiAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICQoJzx0ZXh0PicsIHtcclxuICAgICAgICAgICAgICAgICd4JzowLCAnZHknOjEyLCAnY2xhc3MnOidybWctbmFtZV9fZW4gcm1nLW5hbWVfX210ci0tb3NpJ1xyXG4gICAgICAgICAgICB9KS50ZXh0KHRoaXMuX29zaU5hbWVzWzFdKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMuaW50VGlja0hUTUwsIHRoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUwsIHRoaXMuaW50TmFtZUhUTUwsIHRoaXMub3NpTmFtZUhUTUxdO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBPU0kxMUxTdGF0aW9uIGV4dGVuZHMgT1NJMTFTdGF0aW9uIHtcclxuICAgIC8vIE9TSSBuYW1lIG9uIGxlZnRcclxuICAgIGdldCBfdHh0QW5jaG9yKCkge3JldHVybiAnZW5kJzt9XHJcbiAgICBnZXQgX29zaU5hbWVEWCgpIHtyZXR1cm4gLTEzO31cclxufVxyXG5cclxuY2xhc3MgT1NJMTFSU3RhdGlvbiBleHRlbmRzIE9TSTExU3RhdGlvbiB7XHJcbiAgICAvLyBPU0kgbmFtZSBvbiByaWdodFxyXG4gICAgZ2V0IF90eHRBbmNob3IoKSB7cmV0dXJuICdzdGFydCc7fVxyXG4gICAgZ2V0IF9vc2lOYW1lRFgoKSB7cmV0dXJuIDEzO31cclxufVxyXG5cclxuY2xhc3MgT1NJMTJTdGF0aW9uIGV4dGVuZHMgSW50M1N0YXRpb24ge1xyXG4gICAgcHJvdGVjdGVkIF9vc2lOYW1lczogTmFtZTtcclxuICAgIHByaXZhdGUgX29zaVR5cGU6ICd1JyB8ICdwJztcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IgKGlkOiBJRCwgZGF0YTogU3RhdGlvbkluZm8pIHtcclxuICAgICAgICAvLyBkYXRhLmludDMgPSBkYXRhLm9zaTEyO1xyXG4gICAgICAgIGRhdGEuaW50ZXJjaGFuZ2VbMF0udW5zaGlmdCguLi5kYXRhLmludGVyY2hhbmdlWzFdLnNsaWNlKDEsMykpO1xyXG4gICAgICAgIHN1cGVyKGlkLCBkYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3NpTmFtZXMgPSBkYXRhLmludGVyY2hhbmdlWzFdWzBdO1xyXG4gICAgICAgIHRoaXMuX29zaVR5cGUgPSBkYXRhLmNoYW5nZV90eXBlLnNwbGl0KCdfJykucmV2ZXJzZSgpWzBdWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvc2lDbGFzcygpIHtyZXR1cm4gdGhpcy5fb3NpVHlwZSA9PSAndScgPyAncm1nLXN0bl9fbXRyLS11bnBhaWQtb3NpJyA6ICdybWctc3RuX19tdHItLXBhaWQtb3NpJzt9XHJcbiAgICBnZXQgaWNvbkhUTUwoKSB7XHJcbiAgICAgICAgdmFyIGljb25Sb3RhdGlvbiA9ICghdGhpcy5uYW1lUG9zKSA/IDAgOiAxODA7XHJcbiAgICAgICAgcmV0dXJuICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjb3NpMTJfaGsnLCBcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54fSwke3RoaXMueX0pcm90YXRlKCR7aWNvblJvdGF0aW9ufSlgLFxyXG4gICAgICAgICAgICBjbGFzczogW3RoaXMuaWNvbkNsYXNzLCB0aGlzLm9zaUNsYXNzXS5qb2luKCcgJylcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX2R5KCkge3JldHVybiAoIXRoaXMubmFtZVBvcykgPyAoMjYtMTgpIDogLTg7fVxyXG4gICAgZ2V0IF9vc2lEWSgpIHtyZXR1cm4gKCF0aGlzLm5hbWVQb3MpID8gKDI2KzE4KzEwKSArIDguMzQzNzUgIDogLSgyNisxOCsxMCkgKyA4LjM0Mzc1IC0gMjUuMDMxMjU7fVxyXG4gICAgZ2V0IF9vc2lUeHRBbmNob3IoKSB7cmV0dXJuICdtaWRkbGUnO31cclxuICAgIGdldCBfb3NpRFgoKSB7cmV0dXJuIDA7fVxyXG5cclxuICAgIGdldCBvc2lOYW1lSFRNTCgpIHtcclxuICAgICAgICB2YXIgbmFtZUNsYXNzID0gKHRoaXMuc3RhdGUgPT0gLTEpID8gJ1Bhc3MnIDogJ0Z1dHVyZSc7XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fb3NpVHh0QW5jaG9yLCBcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLngrdGhpcy5fZHgrdGhpcy5fb3NpRFh9LCR7dGhpcy55K3RoaXMuX29zaURZfSlgLCBcclxuICAgICAgICAgICAgJ2NsYXNzJzogYE5hbWUgJHtuYW1lQ2xhc3N9YFxyXG4gICAgICAgIH0pLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPHRleHQ+JykuYWRkQ2xhc3MoJ3JtZy1uYW1lX196aCBybWctbmFtZV9fbXRyLS1vc2knKS50ZXh0KHRoaXMuX29zaU5hbWVzWzBdKVxyXG4gICAgICAgICkuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nLCB7XHJcbiAgICAgICAgICAgICAgICAneCc6MCwgJ2R5JzoxMiwgJ2NsYXNzJzoncm1nLW5hbWVfX2VuIHJtZy1uYW1lX19tdHItLW9zaSdcclxuICAgICAgICAgICAgfSkudGV4dCh0aGlzLl9vc2lOYW1lc1sxXS5zcGxpdCgnXFxcXCcpWzBdKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8dHNwYW4+Jywge3g6MCwgZHk6MTB9KS50ZXh0KHRoaXMuX29zaU5hbWVzWzFdLnNwbGl0KCdcXFxcJylbMV0gfHwgJycpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1bmdycEhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmludFRpY2tIVE1MLCB0aGlzLmljb25IVE1MLCB0aGlzLm5hbWVIVE1MLCAuLi50aGlzLmludE5hbWVIVE1MLCB0aGlzLm9zaU5hbWVIVE1MXTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgT1NJMTJMU3RhdGlvbiBleHRlbmRzIE9TSTEyU3RhdGlvbiB7XHJcbiAgICBnZXQgX3RpY2tSb3RhdGlvbigpIHtyZXR1cm4gOTA7fVxyXG4gICAgZ2V0IF90eHRBbmNob3IoKSB7cmV0dXJuICdlbmQnO31cclxuICAgIGdldCBfaW50TmFtZURYKCkge3JldHVybiAtMjQ7fVxyXG59XHJcblxyXG5jbGFzcyBPU0kxMlJTdGF0aW9uIGV4dGVuZHMgT1NJMTJTdGF0aW9uIHtcclxuICAgIGdldCBfdGlja1JvdGF0aW9uKCkge3JldHVybiAtOTA7fVxyXG4gICAgZ2V0IF90eHRBbmNob3IoKSB7cmV0dXJuICdzdGFydCc7fVxyXG4gICAgZ2V0IF9pbnROYW1lRFgoKSB7cmV0dXJuIDI0O31cclxufVxyXG5cclxuY2xhc3MgT1NJMjJTdGF0aW9uIGV4dGVuZHMgT1NJMTJTdGF0aW9uIHtcclxuICAgIHByaXZhdGUgX29yaWdJbnRJbmZvOiBJbnRlcmNoYW5nZUluZm87XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGlkOiBJRCwgZGF0YTogU3RhdGlvbkluZm8pIHtcclxuICAgICAgICBzdXBlcihpZCwgZGF0YSk7XHJcbiAgICAgICAgLy8gZGF0YSBtdXRhdGVkIGJ5IE9TSTEyU3RhdGlvbiEhIVxyXG4gICAgICAgIHRoaXMuX29yaWdJbnRJbmZvID0gZGF0YS5pbnRlcmNoYW5nZVswXVsyXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX25hbWVUeHRBbmNob3IoKSB7cmV0dXJuIHRoaXMuX29zaVR4dEFuY2hvcjt9XHJcbiAgICBnZXQgX25hbWVEWSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lUG9zID8gMTEuNTE1NjI1IDogLTExLjUxNTYyNTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb3JpZ0ludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIHZhciB0aWNrUm90YXRpb24gPSB0aGlzLm5hbWVQb3MgPyAwIDogMTgwO1xyXG4gICAgICAgIHZhciB0aWNrQ29sb3VyID0gdGhpcy5fb3JpZ0ludEluZm9bSW50SW5mb1RhZy5jb2xvdXJdO1xyXG4gICAgICAgIHZhciB0aWNrID0gJCgnPHVzZT4nLCB7XHJcbiAgICAgICAgICAgICd4bGluazpocmVmJzogJyNpbnR0aWNrX2hrJywgXHJcbiAgICAgICAgICAgIHN0cm9rZTogdGlja0NvbG91ciwgXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueH0sJHt0aGlzLnl9KXJvdGF0ZSgke3RpY2tSb3RhdGlvbn0pYCxcclxuICAgICAgICAgICAgJ2NsYXNzJzogJ3JtZy1saW5lIHJtZy1saW5lX19tdHIgcm1nLWxpbmVfX2NoYW5nZSdcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSAtMSkge1xyXG4gICAgICAgICAgICB0aWNrLmFkZENsYXNzKCdybWctbGluZV9fcGFzcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGljaztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb3JpZ0ludE5hbWVIVE1MKCkge1xyXG4gICAgICAgIHZhciBbbmFtZUhUTUwsIG5hbWVaSExuLCBuYW1lRU5Mbl0gPSBqb2luSW50TmFtZShbdGhpcy5fb3JpZ0ludEluZm9bSW50SW5mb1RhZy5uYW1lWkhdLCB0aGlzLl9vcmlnSW50SW5mb1tJbnRJbmZvVGFnLm5hbWVFTl1dLCAxMCwgNyk7XHJcbiAgICAgICAgdmFyIGR5ID0gdGhpcy5uYW1lUG9zID8gMjUgKyA1Ljk1MzEyNSA6IC0yNSArIDUuOTUzMTI1IC0gMTguNjU2MjUgLSAxMyoobmFtZVpITG4tMSkgLSA3KihuYW1lRU5Mbi0xKTtcclxuICAgICAgICAvLyBkeSArPSB0aGlzLl9keTtcclxuICAgICAgICAvLyB2YXIgbmFtZUNsYXNzID0gKHRoaXMuc3RhdGUgPT0gLTEpID8gJ1Bhc3MnIDogJ0Z1dHVyZSc7XHJcbiAgICAgICAgcmV0dXJuICQoJzxnPicsIHtcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdGhpcy5fdHh0QW5jaG9yLCBcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7dGhpcy54IC0gdGhpcy5fbmFtZURYfSwke3RoaXMueSArIGR5fSlgLCBcclxuICAgICAgICAgICAgY2xhc3M6IGBOYW1lICR7dGhpcy5fbmFtZUNsYXNzfWBcclxuICAgICAgICB9KS5odG1sKG5hbWVIVE1MWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX29zaU5hbWVEWCgpOiBudW1iZXIge3JldHVybiAwO31cclxuXHJcbiAgICBnZXQgb3NpTmFtZUhUTUwoKSB7XHJcbiAgICAgICAgdmFyIGR5ID0gdGhpcy5fZHkgLSAodGhpcy5uYW1lUG9zID8gMTgrOSA6IC0yNykgKyA4LjM0Mzc1IC0gMjUuMDMxMjUvMjtcclxuICAgICAgICByZXR1cm4gJCgnPGc+Jywge1xyXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiB0aGlzLl9vc2lUeHRBbmNob3IsIFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLngrdGhpcy5fb3NpTmFtZURYfSwke3RoaXMueStkeX0pYCwgXHJcbiAgICAgICAgICAgIGNsYXNzOiAnTmFtZSAnICsgdGhpcy5fbmFtZUNsYXNzXHJcbiAgICAgICAgfSkuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8dGV4dD4nKS5hZGRDbGFzcygncm1nLW5hbWVfX3poIHJtZy1uYW1lX19tdHItLW9zaScpLnRleHQodGhpcy5fb3NpTmFtZXNbMF0pXHJcbiAgICAgICAgKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICQoJzx0ZXh0PicsIHtcclxuICAgICAgICAgICAgICAgIHg6MCwgZHk6MTIsIGNsYXNzOidybWctbmFtZV9fZW4gcm1nLW5hbWVfX210ci0tb3NpJ1xyXG4gICAgICAgICAgICB9KS50ZXh0KHRoaXMuX29zaU5hbWVzWzFdKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAuLi50aGlzLmludFRpY2tIVE1MLCB0aGlzLm9yaWdJbnRUaWNrSFRNTCwgXHJcbiAgICAgICAgICAgIHRoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUwsIFxyXG4gICAgICAgICAgICAuLi50aGlzLmludE5hbWVIVE1MLCB0aGlzLm9yaWdJbnROYW1lSFRNTCwgdGhpcy5vc2lOYW1lSFRNTFxyXG4gICAgICAgIF1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgT1NJMjJMU3RhdGlvbiBleHRlbmRzIE9TSTIyU3RhdGlvbiB7XHJcbiAgICBnZXQgX25hbWVEWCgpIHtyZXR1cm4gMzt9XHJcbiAgICBnZXQgX3RpY2tSb3RhdGlvbigpIHtyZXR1cm4gOTA7fVxyXG4gICAgZ2V0IF90eHRBbmNob3IoKSB7cmV0dXJuICdlbmQnO31cclxuICAgIGdldCBfaW50TmFtZURYKCkge3JldHVybiAtMjQ7fVxyXG4gICAgZ2V0IF9vc2lOYW1lRFgoKSB7cmV0dXJuIDEzO31cclxuICAgIGdldCBfb3NpVHh0QW5jaG9yKCkge3JldHVybiAnc3RhcnQnO31cclxufVxyXG5cclxuY2xhc3MgT1NJMjJSU3RhdGlvbiBleHRlbmRzIE9TSTIyU3RhdGlvbiB7XHJcbiAgICBnZXQgX25hbWVEWCgpIHtyZXR1cm4gLTM7fVxyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7cmV0dXJuIC05MDt9XHJcbiAgICBnZXQgX3R4dEFuY2hvcigpIHtyZXR1cm4gJ3N0YXJ0Jzt9XHJcbiAgICBnZXQgX2ludE5hbWVEWCgpIHtyZXR1cm4gMjQ7fVxyXG4gICAgZ2V0IF9vc2lOYW1lRFgoKSB7cmV0dXJuIC0xMzt9XHJcbiAgICBnZXQgX29zaVR4dEFuY2hvcigpIHtyZXR1cm4gJ2VuZCc7fVxyXG59XHJcblxyXG5jbGFzcyBPU0kyMkVuZFN0YXRpb24gZXh0ZW5kcyBPU0kxMlN0YXRpb24ge1xyXG4gICAgcHJpdmF0ZSBfb3JpZ0ludENpdHk6IHN0cmluZzsgXHJcbiAgICBwcml2YXRlIF9vcmlnSW50TGluZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ0ludENvbG91cjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ0ludEZnOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9vcmlnSW50TmFtZVpIOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9vcmlnSW50TmFtZUVOOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGlkLCBkYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGRhdGEpO1xyXG4gICAgICAgIC8vIGRhdGEgbXV0YXRlZCBieSBPU0kxMlN0YXRpb24hISFcclxuICAgICAgICBbdGhpcy5fb3JpZ0ludENpdHksIHRoaXMuX29yaWdJbnRMaW5lLCB0aGlzLl9vcmlnSW50Q29sb3VyLCB0aGlzLl9vcmlnSW50RmcsIHRoaXMuX29yaWdJbnROYW1lWkgsIHRoaXMuX29yaWdJbnROYW1lRU5dID0gZGF0YS5pbnRlcmNoYW5nZVswXVsyXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb3JpZ0ludFRpY2tIVE1MKCkge1xyXG4gICAgICAgIHZhciB0aWNrUm90YXRpb24gPSB0aGlzLm5hbWVQb3MgPyAxODAgOiAwO1xyXG4gICAgICAgIHZhciB0aWNrQ29sb3VyID0gdGhpcy5fb3JpZ0ludENvbG91cjtcclxuICAgICAgICB2YXIgdGljayA9ICQoJzx1c2U+Jywge1xyXG4gICAgICAgICAgICAneGxpbms6aHJlZic6ICcjaW50dGlja19oaycsIFxyXG4gICAgICAgICAgICBzdHJva2U6IHRpY2tDb2xvdXIsIFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55fSlyb3RhdGUoJHt0aWNrUm90YXRpb259KWAsXHJcbiAgICAgICAgICAgICdjbGFzcyc6ICdybWctbGluZSBybWctbGluZV9fbXRyIHJtZy1saW5lX19jaGFuZ2UnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gLTEpIHtcclxuICAgICAgICAgICAgdGljay5hZGRDbGFzcygncm1nLWxpbmVfX3Bhc3MnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRpY2s7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG9yaWdJbnROYW1lSFRNTCgpIHtcclxuICAgICAgICB2YXIgW25hbWVIVE1MLCBuYW1lWkhMbiwgbmFtZUVOTG5dID0gam9pbkludE5hbWUoW3RoaXMuX29yaWdJbnROYW1lWkgsIHRoaXMuX29yaWdJbnROYW1lRU5dLCAxMCwgNyk7XHJcbiAgICAgICAgdmFyIGR5ID0gIXRoaXMubmFtZVBvcyA/IDI1ICsgNS45NTMxMjUgOiAtMjUgKyA1Ljk1MzEyNSAtIDE4LjY1NjI1IC0gMTMqKG5hbWVaSExuLTEpIC0gNyoobmFtZUVOTG4tMSk7XHJcbiAgICAgICAgLy8gZHkgKz0gdGhpcy5fZHk7XHJcbiAgICAgICAgLy8gdmFyIG5hbWVDbGFzcyA9ICh0aGlzLnN0YXRlID09IC0xKSA/ICdQYXNzJyA6ICdGdXR1cmUnO1xyXG4gICAgICAgIHJldHVybiAkKCc8Zz4nLCB7XHJcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCBcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGUoJHt0aGlzLnh9LCR7dGhpcy55ICsgZHl9KWAsIFxyXG4gICAgICAgICAgICAnY2xhc3MnOiBgTmFtZSAke3RoaXMuX25hbWVDbGFzc31gXHJcbiAgICAgICAgfSkuaHRtbChuYW1lSFRNTFswXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGljb25IVE1MKCkge1xyXG4gICAgICAgIHZhciBpY29uWUZsaXAgPSB0aGlzLm5hbWVQb3MgPyAxIDogLTE7XHJcbiAgICAgICAgdmFyIGljb25YRmxpcCA9ICh0aGlzLmNoaWxkcmVuWzBdID09ICdsaW5lZW5kJykgPyAxIDogLTE7XHJcbiAgICAgICAgdmFyIGljb25Sb3RhdGlvbiA9ICh0aGlzLmNoaWxkcmVuWzBdID09ICdsaW5lZW5kJykgPyAwIDogMTgwO1xyXG4gICAgICAgIHJldHVybiAkKCc8dXNlPicsIHtcclxuICAgICAgICAgICAgJ3hsaW5rOmhyZWYnOiAnI29zaTIyZW5kX2hrJywgXHJcbiAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlKCR7dGhpcy54fSwke3RoaXMueX0pc2NhbGUoJHtpY29uWEZsaXB9LCR7aWNvbllGbGlwfSlgLCBcclxuICAgICAgICAgICAgY2xhc3M6IFt0aGlzLmljb25DbGFzcywgdGhpcy5vc2lDbGFzc10uam9pbignICcpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF90aWNrUm90YXRpb24oKSB7cmV0dXJuICh0aGlzLmNoaWxkcmVuWzBdID09ICdsaW5lZW5kJykgPyAtOTAgOiA5MDt9XHJcbiAgICBnZXQgX3RpY2tGbGlwKCkge3JldHVybiAtMTt9XHJcbiAgICBnZXQgX2R4KCkge3JldHVybiAodGhpcy5jaGlsZHJlblswXSA9PSAnbGluZWVuZCcpID8gNDEgOiAtNDE7fVxyXG4gICAgZ2V0IF9keSgpIHtyZXR1cm4gIXRoaXMubmFtZVBvcyA/IC0xOCA6IDE4O31cclxuICAgIGdldCBfaW50TmFtZURYKCkge3JldHVybiAodGhpcy5jaGlsZHJlblswXSA9PSAnbGluZWVuZCcpID8gMjQrNDEgOiAtKDI0KzQxKTt9XHJcbiAgICBnZXQgX3R4dEFuY2hvcigpIHtyZXR1cm4gKHRoaXMuY2hpbGRyZW5bMF0gPT0gJ2xpbmVlbmQnKSA/ICdzdGFydCcgOiAnZW5kJzt9XHJcbiAgICBnZXQgX29zaURZKCkge3JldHVybiAhdGhpcy5uYW1lUG9zID8gKDEwKSArIDguMzQzNzUgIDogLSgxMCkgKyA4LjM0Mzc1IC0gMjUuMDMxMjU7fVxyXG4gICAgZ2V0IF9vc2lUeHRBbmNob3IoKSB7cmV0dXJuICh0aGlzLmNoaWxkcmVuWzBdID09ICdsaW5lZW5kJykgPyAnc3RhcnQnIDogJ2VuZCc7fVxyXG4gICAgZ2V0IF9vc2lEWCgpIHtyZXR1cm4gKHRoaXMuY2hpbGRyZW5bMF0gPT0gJ2xpbmVlbmQnKSA/IC05IDogOTt9XHJcblxyXG4gICAgZ2V0IHVuZ3JwSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAuLi50aGlzLmludFRpY2tIVE1MLCB0aGlzLm9yaWdJbnRUaWNrSFRNTCwgXHJcbiAgICAgICAgICAgIHRoaXMuaWNvbkhUTUwsIHRoaXMubmFtZUhUTUwsIFxyXG4gICAgICAgICAgICAuLi50aGlzLmludE5hbWVIVE1MLCB0aGlzLm9yaWdJbnROYW1lSFRNTCwgdGhpcy5vc2lOYW1lSFRNTFxyXG4gICAgICAgIF1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUk1HU3RhdGlvbiwgSW50MlN0YXRpb24sIEludDNMU3RhdGlvbiwgSW50M1JTdGF0aW9uLCBPU0kxMUxTdGF0aW9uLCBPU0kxMVJTdGF0aW9uLCBPU0kxMkxTdGF0aW9uLCBPU0kxMlJTdGF0aW9uLCBPU0kyMlN0YXRpb24sIE9TSTIyTFN0YXRpb24sIE9TSTIyUlN0YXRpb24sIE9TSTIyRW5kU3RhdGlvbiB9O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1kYy50ZXh0RmllbGQ7IiwibW9kdWxlLmV4cG9ydHMgPSBtZGMuZGlhbG9nOyIsIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyIsIm1vZHVsZS5leHBvcnRzID0gbWRjLnJpcHBsZTsiLCJtb2R1bGUuZXhwb3J0cyA9IG1kYy5zZWxlY3Q7IiwibW9kdWxlLmV4cG9ydHMgPSBtZGMubGlzdDsiLCJpbXBvcnQgeyBnZXRUeHRCb3hEaW0sIHNldFBhcmFtcywgZ2V0UGFyYW1zLCBwdXRQYXJhbXMsIGdldFJhbmRvbUlkLCBnZXROYW1lRnJvbUlkIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBSTUdTdGF0aW9uLCBJbnQyU3RhdGlvbiwgSW50M0xTdGF0aW9uLCBJbnQzUlN0YXRpb24sIE9TSTExTFN0YXRpb24sIE9TSTExUlN0YXRpb24sIE9TSTEyTFN0YXRpb24sIE9TSTEyUlN0YXRpb24sIE9TSTIyU3RhdGlvbiwgT1NJMjJMU3RhdGlvbiwgT1NJMjJSU3RhdGlvbiwgT1NJMjJFbmRTdGF0aW9uIH0gZnJvbSAnLi4vU3RhdGlvbi9TdGF0aW9uJztcclxuXHJcbmltcG9ydCB7IElELCBOYW1lLCBTdGF0aW9uSW5mbywgUk1HUGFyYW0sIERpcmVjdGlvbkxvbmcgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGlvbkRpY3Qge1xyXG4gICAgW2luZGV4OiBzdHJpbmddOiBSTUdTdGF0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUk1HTGluZSB7XHJcbiAgICBwcm90ZWN0ZWQgX3N2Z0hlaWdodDogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9zdmdXaWR0aDogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9zdmdEZXN0V2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3Nob3dPdXRlcjogYm9vbGVhbjtcclxuICAgIHRoZW1lQ2l0eTsgdGhlbWVMaW5lOyBfdGhlbWVDb2xvdXI7IF9mZ0NvbG91cjtcclxuICAgIHByaXZhdGUgX3lQYzogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfc3RyaXBQYzogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9wYWRkaW5nOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9sb25nSW50ZXJ2YWwgPSAxO1xyXG4gICAgcHJpdmF0ZSBfYnJhbmNoU3BhY2luZzogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfdHh0RmxpcDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzdGF0aW9ucyA9IHt9IGFzIFN0YXRpb25EaWN0O1xyXG4gICAgcHJvdGVjdGVkIF9jdXJyZW50U3RuSWQ7XHJcbiAgICBwcm90ZWN0ZWQgX2RpcmVjdGlvbjtcclxuICAgIHByb3RlY3RlZCBfcGxhdGZvcm1OdW06IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBfY2hhckZvcm06IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBfbGluZU5hbWVzOiBOYW1lO1xyXG4gICAgcHJpdmF0ZSBfZGVzdExlZ2FjeTogYm9vbGVhbjsgXHJcblxyXG4gICAgY29uc3RydWN0b3IgKHBhcmFtOiBSTUdQYXJhbSkge1xyXG4gICAgICAgIHRoaXMuX3N2Z0hlaWdodCA9IHBhcmFtWydzdmdfaGVpZ2h0J107XHJcbiAgICAgICAgdGhpcy5fc3ZnV2lkdGggPSBwYXJhbVsnc3ZnX3dpZHRoJ107XHJcbiAgICAgICAgdGhpcy5fc3ZnRGVzdFdpZHRoID0gcGFyYW1bJ3N2Z19kZXN0X3dpZHRoJ107XHJcbiAgICAgICAgdGhpcy5fc2hvd091dGVyID0gcGFyYW1bJ3Nob3dfb3V0ZXInXTtcclxuXHJcbiAgICAgICAgW3RoaXMudGhlbWVDaXR5LCB0aGlzLnRoZW1lTGluZSwgdGhpcy5fdGhlbWVDb2xvdXIsIHRoaXMuX2ZnQ29sb3VyXSA9IHBhcmFtLnRoZW1lO1xyXG5cclxuICAgICAgICB0aGlzLnlQYyA9IHBhcmFtWyd5X3BjJ107XHJcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IHBhcmFtWydwYWRkaW5nJ107XHJcbiAgICAgICAgdGhpcy5fc3RyaXBQYyA9IHBhcmFtWydzdHJpcF9wYyddO1xyXG4gICAgICAgIHRoaXMuX2JyYW5jaFNwYWNpbmcgPSBwYXJhbS5icmFuY2hfc3BhY2luZztcclxuICAgICAgICB0aGlzLl90eHRGbGlwID0gcGFyYW1bJ3R4dF9mbGlwJ107XHJcblxyXG4gICAgICAgIHRoaXMuX2xpbmVOYW1lcyA9IHBhcmFtWydsaW5lX25hbWUnXTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluZm9dIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtLnN0bl9saXN0KSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXSA9IHRoaXMuX2luaXRTdG5JbnN0YW5jZShzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdG5JZCA9IHBhcmFtWydjdXJyZW50X3N0bl9pZHgnXTtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBwYXJhbVsnZGlyZWN0aW9uJ107XHJcbiAgICAgICAgdGhpcy5fcGxhdGZvcm1OdW0gPSBwYXJhbVsncGxhdGZvcm1fbnVtJ107XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fZGVzdExlZ2FjeSA9IHBhcmFtWydkZXN0X2xlZ2FjeSddO1xyXG5cclxuICAgICAgICB0aGlzLl9jaGFyRm9ybSA9IHBhcmFtLmNoYXJfZm9ybTtcclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIG90aGVyIHByb3BlcnRpZXMgb2Ygc3RhdGlvbnNcclxuICAgICAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluc3RhbmNlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRpb25zKSkge1xyXG4gICAgICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge2NvbnRpbnVlO31cclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UueCA9IHRoaXMuX3N0blJlYWxYKHN0bklkKTtcclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UueSA9IHRoaXMuX3N0blJlYWxZKHN0bklkKTtcclxuICAgICAgICAgICAgc3RuSW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9zdG5TdGF0ZShzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLm5hbWVQb3MgPSB0aGlzLl90eHRGbGlwID8gIXRoaXMuX3N0bk5hbWVQb3Moc3RuSWQpIDogdGhpcy5fc3RuTmFtZVBvcyhzdG5JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9pbml0U3RuSW5zdGFuY2Uoc3RuSWQ6IElELCBzdG5JbmZvOiBTdGF0aW9uSW5mbykge1xyXG4gICAgICAgIHN3aXRjaCAoc3RuSW5mby5jaGFuZ2VfdHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdpbnQyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW50MlN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBjYXNlICdpbnQzX2wnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzTFN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBjYXNlICdpbnQzX3InOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzUlN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBjYXNlICdvc2kxMV91bCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTExX3BsJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT1NJMTFMU3RhdGlvbihzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTExX3VyJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTFfcHInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPU0kxMVJTdGF0aW9uKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICAgICAgY2FzZSAnb3NpMTJfdWwnOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kxMl9wbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9TSTEyTFN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICBjYXNlICdvc2kxMl91cic6XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTEyX3ByJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT1NJMTJSU3RhdGlvbihzdG5JZCwgc3RuSW5mbyk7XHJcbiAgICAgICAgICAgIGNhc2UgJ29zaTIyX3BsJzpcclxuICAgICAgICAgICAgY2FzZSAnb3NpMjJfdWwnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHN0bkluZm8ucGFyZW50c1swXSA9PSAnbGluZXN0YXJ0JyB8fCBzdG5JbmZvLmNoaWxkcmVuWzBdID09ICdsaW5lZW5kJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT1NJMjJFbmRTdGF0aW9uKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPU0kyMkxTdGF0aW9uKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnb3NpMjJfcHInOlxyXG4gICAgICAgICAgICBjYXNlICdvc2kyMl91cic6XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RuSW5mby5wYXJlbnRzWzBdID09ICdsaW5lc3RhcnQnIHx8IHN0bkluZm8uY2hpbGRyZW5bMF0gPT0gJ2xpbmVlbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPU0kyMkVuZFN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9TSTIyUlN0YXRpb24oc3RuSWQsIHN0bkluZm8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSTUdTdGF0aW9uKHN0bklkLCBzdG5JbmZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN2Z0Rlc3RXaWR0aCh2YWw6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChpc05hTih2YWwpIHx8IHZhbCA8PSAwKSB7cmV0dXJuO31cclxuICAgICAgICB0aGlzLl9zdmdEZXN0V2lkdGggPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdzdmdfZGVzdF93aWR0aCcsIHZhbCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd1NWR0ZyYW1lKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RyaXAoKTtcclxuICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpO1xyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN2Z1dpZHRoKHZhbDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbCkgfHwgdmFsIDw9IDApIHtyZXR1cm47fVxyXG4gICAgICAgIHRoaXMuX3N2Z1dpZHRoID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnc3ZnX3dpZHRoJywgdmFsKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3U1ZHRnJhbWUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnggPSB0aGlzLl9zdG5SZWFsWChzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFJNR0xpbmUuY2xlYXJTVkcoKTtcclxuICAgICAgICB0aGlzLmRyYXdTdG5zKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3TGluZSgpO1xyXG4gICAgICAgIHRoaXMuZHJhd1N0cmlwKCk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RuTmFtZUJnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR0ZXIgb2YgdmVydGljYWwgcG9zaXRpb24gb2YgbGluZSAoeSkuXHJcbiAgICAgKiBAcGFyYW0gdmFsIFBlcmNlbnRhZ2Ugb2YgdmVydGljYWwgcG9zaXRpb24sIGdpdmVuIGZpeGVkIGBzdmdIZWlnaHRgXHJcbiAgICAgKi9cclxuICAgIHNldCB5UGModmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl95UGMgPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCd5X3BjJywgdmFsKTtcclxuXHJcbiAgICAgICAgbGV0IHkgPSB2YWwgKiB0aGlzLl9zdmdIZWlnaHQgLyAxMDA7XHJcbiAgICAgICAgJCgnZyNtYWluJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7eX0pYCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHBhZGRpbmcodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB2YWwgPSBOdW1iZXIodmFsKTtcclxuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygncGFkZGluZycsIHZhbCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IFtzdG5JZCwgc3RuSW5zdGFuY2VdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ2xpbmVzdGFydCcsICdsaW5lZW5kJ10uaW5jbHVkZXMoc3RuSWQpKSB7Y29udGludWU7fVxyXG4gICAgICAgICAgICBzdG5JbnN0YW5jZS54ID0gdGhpcy5fc3RuUmVhbFgoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdG5OYW1lQmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgYnJhbmNoU3BhY2luZyh2YWw6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2JyYW5jaFNwYWNpbmcgPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdicmFuY2hfc3BhY2luZycsIHZhbCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IFtzdG5JZCwgc3RuSW5zdGFuY2VdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ2xpbmVzdGFydCcsICdsaW5lZW5kJ10uaW5jbHVkZXMoc3RuSWQpKSB7Y29udGludWU7fVxyXG4gICAgICAgICAgICBzdG5JbnN0YW5jZS54ID0gdGhpcy5fc3RuUmVhbFgoc3RuSWQpO1xyXG4gICAgICAgICAgICBzdG5JbnN0YW5jZS55ID0gdGhpcy5fc3RuUmVhbFkoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdG5OYW1lQmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdHh0RmxpcCh2YWwpIHtcclxuICAgICAgICB0aGlzLl90eHRGbGlwID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygndHh0X2ZsaXAnLCB2YWwpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluc3RhbmNlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRpb25zKSkge1xyXG4gICAgICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge2NvbnRpbnVlO31cclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UubmFtZVBvcyA9IHRoaXMuX3R4dEZsaXAgPyAhdGhpcy5fc3RuTmFtZVBvcyhzdG5JZCkgOiB0aGlzLl9zdG5OYW1lUG9zKHN0bklkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoJyNzdG5faWNvbnMnKS5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuZHJhd1N0bnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdG5OYW1lQmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdGhlbWVDb2xvdXIoaGV4czogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLl90aGVtZUNvbG91ciA9IGhleHNbMF07XHJcbiAgICAgICAgdGhpcy5fZmdDb2xvdXIgPSBoZXhzWzFdO1xyXG5cclxuICAgICAgICB2YXIgcGFyYW0gPSBnZXRQYXJhbXMoKTtcclxuICAgICAgICBwYXJhbS50aGVtZVsyXSA9IGhleHNbMF07XHJcbiAgICAgICAgcGFyYW0udGhlbWVbM10gPSBoZXhzWzFdO1xyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsbFRoZW1lQ29sb3VyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRpcmVjdGlvbih2YWwpIHtcclxuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdkaXJlY3Rpb24nLCB2YWwpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluc3RhbmNlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRpb25zKSkge1xyXG4gICAgICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge2NvbnRpbnVlO31cclxuICAgICAgICAgICAgc3RuSW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9zdG5TdGF0ZShzdG5JZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3RGVzdEluZm8oKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHRlciBvZiBwbGF0Zm9ybSBudW1iZXIgKGNhbiBiZSBzdHJpbmcpLiBcclxuICAgICAqL1xyXG4gICAgc2V0IHBsYXRmb3JtTnVtKHZhbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fcGxhdGZvcm1OdW0gPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdwbGF0Zm9ybV9udW0nLCB2YWwpO1xyXG4gICAgICAgICQoJy5ybWctbmFtZV9fcGxhdGZvcm1udW0nKS50ZXh0KHZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR0ZXIgb2YgY2hhcmFjdGVyIGZvcm0uIFxyXG4gICAgICogQHBhcmFtIHZhbCAndHJhZCcsICdjbicsICd0dycgb3IgJ2pwJ1xyXG4gICAgICovXHJcbiAgICBzZXQgY2hhckZvcm0odmFsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9jaGFyRm9ybSA9IHZhbDtcclxuICAgICAgICBzZXRQYXJhbXMoJ2NoYXJfZm9ybScsIHZhbCk7XHJcblxyXG4gICAgICAgICQoJy5ybWctbmFtZV9fY2hhci10cmFkLCAucm1nLW5hbWVfX2NoYXItY24sIC5ybWctbmFtZV9fY2hhci10dywgLnJtZy1uYW1lX19jaGFyLWpwJylcclxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdybWctbmFtZV9fY2hhci10cmFkIHJtZy1uYW1lX19jaGFyLWNuIHJtZy1uYW1lX19jaGFyLXR3IHJtZy1uYW1lX19jaGFyLWpwJylcclxuICAgICAgICAgICAgLmFkZENsYXNzKGBybWctbmFtZV9fY2hhci0ke3ZhbH1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR0ZXIgb2YgbmFtZXMgb2YgbGluZS4gXHJcbiAgICAgKi9cclxuICAgIHNldCBsaW5lTmFtZXModmFsOiBOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5fbGluZU5hbWVzID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnbGluZV9uYW1lJywgdmFsKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3RGVzdEluZm8oKTtcclxuICAgICAgICB0aGlzLmxvYWRGb250cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZXN0TGVnYWN5KHZhbDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2Rlc3RMZWdhY3kgPSB2YWw7XHJcbiAgICAgICAgc2V0UGFyYW1zKCdkZXN0X2xlZ2FjeScsIHZhbCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3VycmVudFN0bklkKHZhbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFN0bklkID0gdmFsO1xyXG4gICAgICAgIHNldFBhcmFtcygnY3VycmVudF9zdG5faWR4JywgdmFsKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnN0YXRlID0gdGhpcy5fc3RuU3RhdGUoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3RGVzdEluZm8oKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdG5OYW1lQmcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluY3JlbWVudCBvZiB0aGUgd2VpZ2h0IG9mIG91dC1ib3VuZCBlZGdlIG9mIGEgc3RhdGlvbiwgd2hpY2ggaW5jcmVhc2VzIHRoZSBob3Jpem9udGFsIGludGVydmFsIGZyb20gaXRzIGNoaWxkcmVuLiBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9yaWdodFdpZGVGYWN0b3Ioc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IDA7XHJcbiAgICAgICAgbGV0IHN0bkluc3RhbmNlID0gdGhpcy5zdGF0aW9uc1tzdG5JZF07XHJcbiAgICAgICAgaWYgKHN0bkluc3RhbmNlIGluc3RhbmNlb2YgSW50M1JTdGF0aW9uKSB7cmVzICs9IHRoaXMuX2xvbmdJbnRlcnZhbDt9XHJcbiAgICAgICAgaWYgKHN0bkluc3RhbmNlIGluc3RhbmNlb2YgT1NJMTFSU3RhdGlvbikge3JlcyArPSB0aGlzLl9sb25nSW50ZXJ2YWw7fVxyXG4gICAgICAgIGlmIChzdG5JbnN0YW5jZSBpbnN0YW5jZW9mIE9TSTEyUlN0YXRpb24pIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsO31cclxuICAgICAgICBpZiAoc3RuSW5zdGFuY2UgaW5zdGFuY2VvZiBPU0kyMlN0YXRpb24pIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsO31cclxuICAgICAgICB2YXIgc3RuQ2xhc3NlcyA9IFsnSW50M1JTdGF0aW9uJywgJ09TSTExUlN0YXRpb24nLCAnT1NJMTJSU3RhdGlvbicsICdPU0kyMkxTdGF0aW9uJywgJ09TSTIyUlN0YXRpb24nXTtcclxuICAgICAgICBpZiAoc3RuQ2xhc3Nlcy5pbmNsdWRlcyh0aGlzLnN0YXRpb25zW3N0bklkXS5jb25zdHJ1Y3Rvci5uYW1lKSkge3JlcyArPSB0aGlzLl9sb25nSW50ZXJ2YWw7fVxyXG4gICAgICAgIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpID09IDIpIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsLzI7fVxyXG4gICAgICAgIGlmICh0aGlzLl9zdG5JbmRlZ3JlZSh0aGlzLnN0YXRpb25zW3N0bklkXS5jaGlsZHJlblswXSkgPT0gMikge3JlcyArPSB0aGlzLl9sb25nSW50ZXJ2YWwvMjt9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluY3JlbWVudCBvZiB0aGUgd2VpZ2h0IG9mIGluLWJvdW5kIGVkZ2Ugb2YgYSBzdGF0aW9uLCB3aGljaCBpbmNyZWFzZXMgdGhlIGhvcml6b250YWwgaW50ZXJ2YWwgZnJvbSBpdHMgcGFyZW50cy4gXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfbGVmdFdpZGVGYWN0b3Ioc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IDA7XHJcbiAgICAgICAgbGV0IHN0bkluc3RhbmNlID0gdGhpcy5zdGF0aW9uc1tzdG5JZF07XHJcbiAgICAgICAgaWYgKHN0bkluc3RhbmNlIGluc3RhbmNlb2YgSW50M0xTdGF0aW9uKSB7cmVzICs9IHRoaXMuX2xvbmdJbnRlcnZhbDt9XHJcbiAgICAgICAgaWYgKHN0bkluc3RhbmNlIGluc3RhbmNlb2YgT1NJMTFMU3RhdGlvbikge3JlcyArPSB0aGlzLl9sb25nSW50ZXJ2YWw7fVxyXG4gICAgICAgIGlmIChzdG5JbnN0YW5jZSBpbnN0YW5jZW9mIE9TSTEyTFN0YXRpb24pIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsO31cclxuICAgICAgICBpZiAoc3RuSW5zdGFuY2UgaW5zdGFuY2VvZiBPU0kyMlN0YXRpb24pIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsO31cclxuICAgICAgICBpZiAodGhpcy5fc3RuSW5kZWdyZWUoc3RuSWQpID09IDIpIHtyZXMgKz0gdGhpcy5fbG9uZ0ludGVydmFsLzI7fVxyXG4gICAgICAgIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUodGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXSkgPT0gMikge3JlcyArPSB0aGlzLl9sb25nSW50ZXJ2YWwvMjt9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhdGggd2VpZ2h0IGZyb20gc3RhdGlvbiAxIHRvIHN0YXRpb24gMiAoc3RhdGlvbiAyIG11c3QgYmUgYSBjaGlsZCBvZiBzdGF0aW9uIDEsIG90aGVyd2lzZSByZXR1cm4gYC1JbmZpbml0eWApLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX3BhdGhXZWlnaHQoc3RuSWQxOiBJRCwgc3RuSWQyOiBJRCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0aW9uc1tzdG5JZDFdLmNoaWxkcmVuLmluY2x1ZGVzKHN0bklkMikpIHtyZXR1cm4gLUluZmluaXR5O31cclxuICAgICAgICByZXR1cm4gMSArIHRoaXMuX3JpZ2h0V2lkZUZhY3RvcihzdG5JZDEpICsgdGhpcy5fbGVmdFdpZGVGYWN0b3Ioc3RuSWQyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyaXRpY2FsIHBhdGggYW5kIGNvcnJlc3BvbmRpbmcgbGVuZ3RoIGZyb20gYSBzdGF0aW9uIHRvIGFub3RoZXIuIFxyXG4gICAgICogQHBhcmFtIGZyb20gSUQgb2Ygc3RhdGlvbiBvbiB0aGUgbGVmdFxyXG4gICAgICogQHBhcmFtIHRvIElEIG9mIHN0YXRpb24gb24gdGhlIGxlZnRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9jcChmcm9tOiBJRCwgdG86IElEKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmIChmcm9tID09IHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGxlbjogMCwgbm9kZXM6IFtmcm9tXSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYWxsTGVuZ3RoczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBsZXQgY3JpdGljYWxQYXRoczogSURbXVtdID0gW107XHJcbiAgICAgICAgdGhpcy5zdGF0aW9uc1tmcm9tXS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgbGV0IGNwID0gc2VsZi5fY3AoY2hpbGQsIHRvKTtcclxuICAgICAgICAgICAgaWYgKGNwLmxlbiA8IDApIHtyZXR1cm47fVxyXG4gICAgICAgICAgICBhbGxMZW5ndGhzLnB1c2godGhpcy5fcGF0aFdlaWdodChmcm9tLCBjaGlsZCkgKyBjcC5sZW4pO1xyXG4gICAgICAgICAgICBjcC5ub2Rlcy51bnNoaWZ0KGZyb20pO1xyXG4gICAgICAgICAgICBjcml0aWNhbFBhdGhzLnB1c2goY3Aubm9kZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBtYXhMZW5ndGggPSBNYXRoLm1heCguLi5hbGxMZW5ndGhzKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnbGVuJzogbWF4TGVuZ3RoLCBcclxuICAgICAgICAgICAgJ25vZGVzJzogY3JpdGljYWxQYXRoc1thbGxMZW5ndGhzLmluZGV4T2YobWF4TGVuZ3RoKV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0dGVyIG9mIGNyaXRpY2FsIHBhdGggKGZyb20gbGVmdCB0byByaWdodCkgYW5kIGNvcnJlc3BvbmRpbmcgbGVuZ3RoIG9mIHRoZSBlbnRpcmUgbGluZS4gXHJcbiAgICAgKi9cclxuICAgIGdldCBjcml0aWNhbFBhdGgoKSB7XHJcbiAgICAgICAgbGV0IGFsbExlbmd0aHM6IG51bWJlcltdID0gW107XHJcbiAgICAgICAgbGV0IGNyaXRpY2FsUGF0aHM6IElEW11bXSA9IFtdO1xyXG4gICAgICAgIHRoaXMubGVmdERlc3RzLmZvckVhY2gobGQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0RGVzdHMuZm9yRWFjaChyZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3AgPSB0aGlzLl9jcChsZCwgcmQpO1xyXG4gICAgICAgICAgICAgICAgYWxsTGVuZ3Rocy5wdXNoKGNwLmxlbik7XHJcbiAgICAgICAgICAgICAgICBjcml0aWNhbFBhdGhzLnB1c2goY3Aubm9kZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbWF4TGVuID0gTWF0aC5tYXgoLi4uYWxsTGVuZ3Rocyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2xlbic6IG1heExlbixcclxuICAgICAgICAgICAgJ25vZGVzJzogY3JpdGljYWxQYXRoc1thbGxMZW5ndGhzLmluZGV4T2YobWF4TGVuKV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIF90b3BvT3JkZXIoZnJvbTogSUQsIHRwbzogSURbXSA9IFtdKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHRwby5wdXNoKGZyb20pO1xyXG4gICAgICAgIHRoaXMuc3RhdGlvbnNbZnJvbV0uY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG5JbmRlZ3JlZShjaGlsZCkgPT0gMiAmJiB0aGlzLnN0YXRpb25zW2NoaWxkXS5wYXJlbnRzLmluZGV4T2YoZnJvbSk9PTApIHtcclxuICAgICAgICAgICAgICAgIC8vIHdhaXQgdGhlIG90aGVyIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB0cG8uY29uY2F0KHNlbGYuX3RvcG9PcmRlcihjaGlsZCwgdHBvKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRwbztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHBvKCkge1xyXG4gICAgICAgIGxldCByZXMgPSB0aGlzLl90b3BvT3JkZXIoJ2xpbmVzdGFydCcpO1xyXG4gICAgICAgIHJldHVybiByZXMuc2xpY2UoMSwgcmVzLmxlbmd0aC0xKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgeSgpIHtcclxuICAgIC8vICAgICAvLyByZXR1cm4gdGhpcy5feVBjICogdGhpcy5fc3ZnSGVpZ2h0IC8gMTAwOyBcclxuICAgIC8vICAgICByZXR1cm4gMDtcclxuICAgIC8vIH1cclxuICAgIGdldCBzdHJpcFkoKSB7cmV0dXJuIHRoaXMuX3N0cmlwUGMgKiB0aGlzLl9zdmdIZWlnaHQgLyAxMDA7fVxyXG4gICAgZ2V0IHR1cm5pbmdSYWRpdXMoKSB7cmV0dXJuIHRoaXMuX2JyYW5jaFNwYWNpbmcvMiAqIChNYXRoLnNxcnQoMikgLyAoTWF0aC5zcXJ0KDIpLTEpKTt9XHJcblxyXG4gICAgZ2V0IGxpbmVYcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB0aGlzLl9zdmdXaWR0aCAqIHRoaXMuX3BhZGRpbmcgLyAxMDAsIFxyXG4gICAgICAgICAgICB0aGlzLl9zdmdXaWR0aCAqICgxIC0gdGhpcy5fcGFkZGluZy8xMDApXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGVmdERlc3RzKCkge3JldHVybiB0aGlzLnN0YXRpb25zLmxpbmVzdGFydC5jaGlsZHJlbjt9XHJcbiAgICBnZXQgcmlnaHREZXN0cygpIHtyZXR1cm4gdGhpcy5zdGF0aW9ucy5saW5lZW5kLnBhcmVudHM7fVxyXG5cclxuICAgIGdldCBsVmFsaWREZXN0cygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShcclxuICAgICAgICAgICAgbmV3IFNldChcclxuICAgICAgICAgICAgICAgIHRoaXMucm91dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihyb3V0ZSA9PiByb3V0ZS5pbmRleE9mKHRoaXMuX2N1cnJlbnRTdG5JZCkgIT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAocm91dGUgPT4gcm91dGUuZmlsdGVyKHN0bklkID0+IHN0bklkICE9PSAnbGluZWVuZCcgJiYgc3RuSWQgIT09ICdsaW5lc3RhcnQnKVswXSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJWYWxpZERlc3RzKCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKFxyXG4gICAgICAgICAgICBuZXcgU2V0KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHJvdXRlID0+IHJvdXRlLmluZGV4T2YodGhpcy5fY3VycmVudFN0bklkKSAhPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChyb3V0ZSA9PiByb3V0ZS5maWx0ZXIoc3RuSWQgPT4gc3RuSWQgIT09ICdsaW5lZW5kJyAmJiBzdG5JZCAhPT0gJ2xpbmVzdGFydCcpLnJldmVyc2UoKVswXSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRlZ3JlZSBvZiBhIHN0YXRpb24gbm9kZS5cclxuICAgICAqL1xyXG4gICAgX3N0bkluZGVncmVlKHN0bklkOiBJRCkge3JldHVybiB0aGlzLnN0YXRpb25zW3N0bklkXS5pbkRlZ3JlZTt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXRkZWdyZWUgb2YgYSBzdGF0aW9uIG5vZGUuIFxyXG4gICAgICovXHJcbiAgICBfc3RuT3V0ZGVncmVlKHN0bklkOiBJRCkge3JldHVybiB0aGlzLnN0YXRpb25zW3N0bklkXS5vdXREZWdyZWU7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiAoaW4gc2hhcmVzKSBvZiBzdGF0aW9uIGljb24uIFxyXG4gICAgICovXHJcbiAgICBfc3RuWFNoYXJlKHN0bklkOiBJRCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIGNwID0gdGhpcy5jcml0aWNhbFBhdGg7XHJcbiAgICAgICAgaWYgKGNwLm5vZGVzLmluY2x1ZGVzKHN0bklkKSkge3JldHVybiB0aGlzLl9jcChjcC5ub2Rlc1swXSwgc3RuSWQpLmxlbjt9XHJcblxyXG4gICAgICAgIHZhciBwYXJ0U291cmNlID0gc3RuSWQ7XHJcbiAgICAgICAgdmFyIHBhcnRTaW5rID0gc3RuSWQ7XHJcbiAgICAgICAgdmFyIGxlZnRPcGVuSmF3ID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHJpZ2h0T3BlbkphdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5zdGF0aW9uc1twYXJ0U291cmNlXS5wYXJlbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50ID09ICdsaW5lc3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0T3BlbkphdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJ0U291cmNlID0gcGFyZW50O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RuT3V0ZGVncmVlKHBhcnRTb3VyY2UpID4gMSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuc3RhdGlvbnNbcGFydFNpbmtdLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5bMF0gIT0gJ2xpbmVlbmQnKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0U2luayA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmlnaHRPcGVuSmF3ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG5JbmRlZ3JlZShwYXJ0U2luaykgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxlbmd0aFRvU291cmNlID0gdGhpcy5fY3AocGFydFNvdXJjZSwgc3RuSWQpLmxlbjtcclxuICAgICAgICB2YXIgbGVuZ3RoVG9TaW5rID0gdGhpcy5fY3Aoc3RuSWQsIHBhcnRTaW5rKS5sZW47XHJcbiAgICAgICAgaWYgKGxlZnRPcGVuSmF3KSB7XHJcbiAgICAgICAgICAgIHZhciBhY3R1YWxQYXJ0TGVuZ3RoID0gdGhpcy5fY3AoY3Aubm9kZXNbMF0sIHBhcnRTaW5rKS5sZW47XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zdG5YU2hhcmUocGFydFNpbmspIC0gbGVuZ3RoVG9TaW5rIC8gKGxlbmd0aFRvU291cmNlICsgbGVuZ3RoVG9TaW5rKSAqIGFjdHVhbFBhcnRMZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyaWdodE9wZW5KYXcpIHtcclxuICAgICAgICAgICAgdmFyIGFjdHVhbFBhcnRMZW5ndGggPSB0aGlzLl9jcChwYXJ0U291cmNlLCBjcC5ub2Rlcy5zbGljZSgtMSlbMF0pLmxlbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYWN0dWFsUGFydExlbmd0aCA9IHRoaXMuX2NwKHBhcnRTb3VyY2UsIHBhcnRTaW5rKS5sZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxmLl9zdG5YU2hhcmUocGFydFNvdXJjZSkgKyBsZW5ndGhUb1NvdXJjZSAvIChsZW5ndGhUb1NvdXJjZSArIGxlbmd0aFRvU2luaykgKiBhY3R1YWxQYXJ0TGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiAoaW4gcGl4ZWxzKSBvZiBzdGF0aW9uIGljb24uIFxyXG4gICAgICovXHJcbiAgICBfc3RuUmVhbFgoc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgbGV0IFtsaW5lU3RhcnQsIGxpbmVFbmRdID0gdGhpcy5saW5lWHM7XHJcbiAgICAgICAgcmV0dXJuIGxpbmVTdGFydCArIHRoaXMuX3N0blhTaGFyZShzdG5JZCkgLyB0aGlzLmNyaXRpY2FsUGF0aC5sZW4gKiAobGluZUVuZCAtIGxpbmVTdGFydCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaXJyb3IgYF9zdG5ZU2hhcmVNVFJgLiBcclxuICAgICAqL1xyXG4gICAgX3N0bllTaGFyZShzdG5JZDogSUQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RuWVNoYXJlTVRSKHN0bklkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcnRpY2FsIHBvc2l0aW9uIChpbiBzaGFyZXMpIG9mIHN0YXRpb24gaWNvbiBpZiB1c2luZyBNVFIgc3R5bGUgKGZvciBjb25zaXN0ZW5jeSBvZiBtZXRob2QgYFJNR0xpbmUubmV3U3RuUG9zc2libGVMb2MoKWApLiBcclxuICAgICAqL1xyXG4gICAgX3N0bllTaGFyZU1UUihzdG5JZDogSUQpIHtcclxuICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSB8fCB0aGlzLl9zdG5JbmRlZ3JlZShzdG5JZCkgPiAxIHx8IHRoaXMuX3N0bk91dGRlZ3JlZShzdG5JZCkgPiAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RuUHJlZCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHNbMF07XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmIChzdG5QcmVkKSB7XHJcbiAgICAgICAgICAgIC8vIHBhcmVudCBleGlzdFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RuT3V0ZGVncmVlKHN0blByZWQpID09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vIHNpYmxpbmcsIHRoZW4geSBzYW1lIGFzIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3N0bllTaGFyZU1UUihzdG5QcmVkKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNpYmxpbmcgZXhpc3RzLCB0aGVuIHkgZGVwZW5kcyBvbiBpdHMgaWR4IG9mIGJlaW5nIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGlvbnNbc3RuUHJlZF0uY2hpbGRyZW4uaW5kZXhPZihzdG5JZCkgPT0gMCkgPyAxIDogLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyBwYXJlbnQsIG11c3QgYmUgbGluZXN0YXJ0XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcnRpY2FsIHBvc2l0aW9uIChpbiBwaXhlbHMpIG9mIHN0YXRpb24gaWNvbiByZWxhdGVkIHRvIHZlcnRpY2FsIHBvc2l0aW9uIG9mIGxpbmUuIFxyXG4gICAgICovXHJcbiAgICBfc3RuUmVhbFkoc3RuSWQ6IElEKSB7XHJcbiAgICAgICAgcmV0dXJuIC10aGlzLl9zdG5ZU2hhcmUoc3RuSWQpICogdGhpcy5fYnJhbmNoU3BhY2luZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHN0YXRpb24gMiBpcyBhIHN1Y2Nlc3NvciBvZiBzdGF0aW9uIDEsIGZhbHNlIG90aGVyd2lzZS4gXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2lzU3VjY2Vzc29yKHN0bklkMTogSUQsIHN0bklkMjogSUQpIHtcclxuICAgICAgICBmb3IgKGxldCByb3V0ZSBvZiB0aGlzLnJvdXRlcykge1xyXG4gICAgICAgICAgICBsZXQgaWR4MSA9IHJvdXRlLmluZGV4T2Yoc3RuSWQxKTtcclxuICAgICAgICAgICAgbGV0IGlkeDIgPSByb3V0ZS5pbmRleE9mKHN0bklkMik7XHJcbiAgICAgICAgICAgIGlmIChpZHgxICE9PSAtMSAmJiBpZHgyICE9PSAtMSAmJiBpZHgxIDwgaWR4Mikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgc3RhdGlvbiAyIGlzIGEgcHJlZGVjZXNzb3Igb2Ygc3RhdGlvbiAxLCBmYWxzZSBvdGhlcndpc2UuIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9pc1ByZWRlY2Vzc29yKHN0bklkMTogSUQsIHN0bklkMjogSUQpIHtcclxuICAgICAgICBmb3IgKGxldCByb3V0ZSBvZiB0aGlzLnJvdXRlcykge1xyXG4gICAgICAgICAgICBsZXQgaWR4MSA9IHJvdXRlLmluZGV4T2Yoc3RuSWQxKTtcclxuICAgICAgICAgICAgbGV0IGlkeDIgPSByb3V0ZS5pbmRleE9mKHN0bklkMik7XHJcbiAgICAgICAgICAgIGlmIChpZHgxICE9PSAtMSAmJiBpZHgyICE9PSAtMSAmJiBpZHgyIDwgaWR4MSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHN0YXRlIG9mIGEgc3RhdGlvbiAoLTE6IHBhc3NlZCwgMDogY3VycmVudCwgMTogZnV0dXJlKS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9zdG5TdGF0ZShzdG5JZDogSUQpIHtcclxuICAgICAgICBpZiAoc3RuSWQgPT0gdGhpcy5fY3VycmVudFN0bklkKSB7cmV0dXJuIDA7fVxyXG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT0gJ3InKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1N1Y2Nlc3Nvcih0aGlzLl9jdXJyZW50U3RuSWQsIHN0bklkKSA/IDEgOiAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNQcmVkZWNlc3Nvcih0aGlzLl9jdXJyZW50U3RuSWQsIHN0bklkKSA/IDEgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGF0aW9uIG5hbWUgcG9zaXRpb24gKGBmYWxzZWA6IGFib3ZlIGxpbmUsIGB0cnVlYDogYmVsb3cgbGluZSwgZ2l2ZW4gYHR4dEZsaXBgIGlzIGBmYWxzZWApLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9zdG5OYW1lUG9zKHN0bklkOiBJRCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChzdG5JZCA9PT0gJ2xpbmVzdGFydCcpIHtyZXR1cm4gdHJ1ZTt9XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCBjcCA9IHRoaXMuY3JpdGljYWxQYXRoLm5vZGVzO1xyXG4gICAgICAgIGxldCBwb3MgPSBjcC5pbmRleE9mKHN0bklkKSAlIDI7IC8vIC0xLCAwIG9yIDE7XHJcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcclxuICAgICAgICAgICAgbGV0IHBhcklkID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0bk91dGRlZ3JlZShwYXJJZCkgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9zdG5OYW1lUG9zKHBhcklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gIXNlbGYuX3N0bk5hbWVQb3MocGFySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcG9zID09PSAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGhlaWdodCBhbmQgd2lkdGggZm9yIGJvdGggYHN2Z2BzLiBcclxuICAgICAqL1xyXG4gICAgZHJhd1NWR0ZyYW1lKCkge1xyXG4gICAgICAgICQoJyNyYWlsbWFwLCAjb3V0ZXInKS5hdHRyKHtcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuX3N2Z1dpZHRoLCBcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLl9zdmdIZWlnaHRcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcjZGVzdGluYXRpb24sICNkZXN0X291dGVyJykuYXR0cih7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9zdmdEZXN0V2lkdGgsIFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuX3N2Z0hlaWdodFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dGcmFtZU91dGVyKCkge1xyXG4gICAgICAgIC8vIHZhciBvdXRlckNvbG91ciA9IHRoaXMuX3Nob3dPdXRlciA/ICdibGFjaycgOiAnbm9uZSc7XHJcbiAgICAgICAgLy8gJCgnI291dGVyLCAjZGVzdF9vdXRlcicpLmF0dHIoJ3N0cm9rZScsIG91dGVyQ29sb3VyKTtcclxuICAgICAgICBpZiAodGhpcy5fc2hvd091dGVyKSB7XHJcbiAgICAgICAgICAgICQoJyNvdXRlciwgI2Rlc3Rfb3V0ZXInKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI291dGVyLCAjZGVzdF9vdXRlcicpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEcmF3IGFsbCBzdGF0aW9ucy4gKFByZXZpb3VzbHkgZHJhd24gc3RhdGlvbiBpY29ucyBhcmUgbm90IHJlbW92ZWQuIClcclxuICAgICAqL1xyXG4gICAgZHJhd1N0bnMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgICQoJyNzdG5faWNvbnMnKS5hcHBlbmQoc3RuSW5zdGFuY2UuaHRtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoJyNzdG5faWNvbnMnKS5odG1sKCQoJyNzdG5faWNvbnMnKS5odG1sKCkpOyAvLyBSZWZyZXNoIERPTVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIGJhY2tncm91bmQgb2YgY3VycmVudCBzdGF0aW9uIG5hbWUuIGB5YCBhbmQgYGhlaWdodGAgYXJlIGNoYW5nZWQgd2hpbGUgc3RhdGlvbiBpY29uIGlzIHJlLWRyYXduIGFuZCBgUk1HU3RhdGlvbi5uYW1lSFRNTGAgaXMgbG9hZGVkLiBcclxuICAgICAqL1xyXG4gICAgdXBkYXRlU3RuTmFtZUJnKCkge1xyXG4gICAgICAgIHZhciBzdG5OYW1lRGltID0gZ2V0VHh0Qm94RGltKFxyXG4gICAgICAgICAgICAkKGAjc3RuX2ljb25zID4gIyR7dGhpcy5fY3VycmVudFN0bklkfSA+IC5OYW1lYClbMF0gYXMgRWxlbWVudCBhcyBTVkdHcmFwaGljc0VsZW1lbnQsXHJcbiAgICAgICAgICAgICdyYWlsbWFwJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgJCgnI2N1cnJlbnRfYmcnKS5hdHRyKHtcclxuICAgICAgICAgICAgeDogc3RuTmFtZURpbS54LTMsIFxyXG4gICAgICAgICAgICB3aWR0aDogc3RuTmFtZURpbS53aWR0aCs2LCBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RuRFgoKSB7cmV0dXJuIHRoaXMudHVybmluZ1JhZGl1cyAtIHRoaXMuX2JyYW5jaFNwYWNpbmcvMn07XHJcbiAgICBnZXQgc3RuRFkoKSB7cmV0dXJuIHRoaXMuX2JyYW5jaFNwYWNpbmcvMn07XHJcbiAgICBnZXQgc3RuRXh0cmFIKCkge1xyXG4gICAgICAgIHZhciBbbGluZVN0YXJ0LCBsaW5lRW5kXSA9IHRoaXMubGluZVhzO1xyXG4gICAgICAgIHJldHVybiAobGluZUVuZCAtIGxpbmVTdGFydCkgLyB0aGlzLmNyaXRpY2FsUGF0aC5sZW4gKiB0aGlzLl9sb25nSW50ZXJ2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RuU3BhcmVIKCkge1xyXG4gICAgICAgIHZhciBbbGluZVN0YXJ0LCBsaW5lRW5kXSA9IHRoaXMubGluZVhzO1xyXG4gICAgICAgIHZhciBkaCA9ICggKGxpbmVFbmQtbGluZVN0YXJ0KS90aGlzLmNyaXRpY2FsUGF0aC5sZW4gLSAyKnRoaXMuc3RuRFggKSAvIDI7XHJcbiAgICAgICAgaWYgKGRoIDwgMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFNWRyB3aWR0aCB0b28gc21hbGwhICR7ZGh9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaDtcclxuICAgIH1cclxuICAgIGdldCBwYXRoVHVybkVORSgpIHtyZXR1cm4gYGEgJHt0aGlzLnR1cm5pbmdSYWRpdXN9LCR7dGhpcy50dXJuaW5nUmFkaXVzfSAwIDAsMCAke3RoaXMuc3RuRFh9LCR7LXRoaXMuc3RuRFl9YH07XHJcbiAgICBnZXQgcGF0aFR1cm5ORUUoKSB7cmV0dXJuIGBhICR7dGhpcy50dXJuaW5nUmFkaXVzfSwke3RoaXMudHVybmluZ1JhZGl1c30gMCAwLDEgJHt0aGlzLnN0bkRYfSwkey10aGlzLnN0bkRZfWB9O1xyXG4gICAgZ2V0IHBhdGhUdXJuRVNFKCkge3JldHVybiBgYSAke3RoaXMudHVybmluZ1JhZGl1c30sJHt0aGlzLnR1cm5pbmdSYWRpdXN9IDAgMCwxICR7dGhpcy5zdG5EWH0sJHt0aGlzLnN0bkRZfWB9O1xyXG4gICAgZ2V0IHBhdGhUdXJuU0VFKCkge3JldHVybiBgYSAke3RoaXMudHVybmluZ1JhZGl1c30sJHt0aGlzLnR1cm5pbmdSYWRpdXN9IDAgMCwwICR7dGhpcy5zdG5EWH0sJHt0aGlzLnN0bkRZfWB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgYGRgIGF0dHJpYnV0ZSBvZiBgPHBhdGg+YCBlbGVtZW50IHRocm91Z2ggYWxsIHN0YXRpb25zIGlucHV0LiBcclxuICAgICAqL1xyXG4gICAgX2xpbmVQYXRoKHN0bklkczogSURbXSkge1xyXG4gICAgICAgIHZhciBbcHJldklkLCBwcmV2WSwgcHJldlhdOiBbc3RyaW5nPywgbnVtYmVyPywgbnVtYmVyP10gPSBbXTtcclxuICAgICAgICB2YXIgcGF0aCA9IFtdO1xyXG5cclxuICAgICAgICB2YXIgeyBzdG5FeHRyYUgsIHN0blNwYXJlSCwgcGF0aFR1cm5FU0UsIHBhdGhUdXJuU0VFLCBwYXRoVHVybkVORSwgcGF0aFR1cm5ORUUsIHN0bkRYIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBzdG5JZHMuZm9yRWFjaChzdG5JZCA9PiB7XHJcbiAgICAgICAgICAgIHZhciBbeCx5XSA9IFsnX3N0blJlYWxYJywgJ19zdG5SZWFsWSddLm1hcChmdW4gPT4gdGhpc1tmdW5dKHN0bklkKSk7XHJcbiAgICAgICAgICAgIGlmICghcHJldlkgJiYgcHJldlkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIFtwcmV2SWQsIHByZXZYLCBwcmV2WV0gPSBbc3RuSWQsIHgsIHldO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGBNICR7eH0sJHt5fWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ID4gcHJldlkpIHtcclxuICAgICAgICAgICAgICAgIHBhdGgucHVzaChcclxuICAgICAgICAgICAgICAgICAgICB5PT09MCA/IGBoICR7eCAtIHByZXZYIC0gc3RuRXh0cmFIKnRoaXMuX2xlZnRXaWRlRmFjdG9yKHN0bklkKSAtIHN0blNwYXJlSCAtIHN0bkRYKjJ9YCA6IGBoICR7c3RuRXh0cmFIICogdGhpcy5fcmlnaHRXaWRlRmFjdG9yKHByZXZJZCkgKyBzdG5TcGFyZUh9YFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHBhdGgucHVzaChwYXRoVHVybkVTRSwgcGF0aFR1cm5TRUUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPCBwcmV2WSkge1xyXG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIHk9PT0wID8gYGggJHt4IC0gcHJldlggLSBzdG5FeHRyYUgqdGhpcy5fbGVmdFdpZGVGYWN0b3Ioc3RuSWQpIC0gc3RuU3BhcmVIIC0gc3RuRFgqMn1gIDogYGggJHtzdG5FeHRyYUggKiB0aGlzLl9yaWdodFdpZGVGYWN0b3IocHJldklkKSArIHN0blNwYXJlSH1gXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKHBhdGhUdXJuRU5FLCBwYXRoVHVybk5FRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGF0aC5wdXNoKGBIICR7eH1gKTtcclxuICAgICAgICAgICAgW3ByZXZJZCwgcHJldlgsIHByZXZZXSA9IFtzdG5JZCwgeCwgeV07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNpbXBsaWZ5IHBhdGhcclxuICAgICAgICByZXR1cm4gcGF0aC5qb2luKCcgJykucmVwbGFjZSgvKCBIIChbXFxkLl0rKSkrL2csICcgSCAkMicpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdMaW5lKCkge1xyXG4gICAgICAgIHRoaXMuYnJhbmNoZXMubWFwKGJyYW5jaCA9PiB7XHJcbiAgICAgICAgICAgIHZhciBsaW5lTWFpblN0bnMgPSBicmFuY2guZmlsdGVyKHN0bklkID0+IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnN0YXRlID49IDApO1xyXG4gICAgICAgICAgICB2YXIgbGluZVBhc3NTdG5zID0gYnJhbmNoLmZpbHRlcihzdG5JZCA9PiB0aGlzLnN0YXRpb25zW3N0bklkXS5zdGF0ZSA8PSAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsaW5lTWFpblN0bnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lUGFzc1N0bnMgPSBicmFuY2g7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChsaW5lTWFpblN0bnMuZmlsdGVyKHN0bklkID0+IGxpbmVQYXNzU3Rucy5pbmRleE9mKHN0bklkKSAhPT0gLTEpLmxlbmd0aCA9PSAwICYmIGxpbmVNYWluU3Rucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHR3byBzZXQgZGlzam9pbnRcclxuICAgICAgICAgICAgICAgIGlmIChsaW5lUGFzc1N0bnNbMF0gPT09IGJyYW5jaFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIC0xIC0xIDEgMVxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVQYXNzU3Rucy5wdXNoKGxpbmVNYWluU3Ruc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmVNYWluU3Ruc1swXSA9PT0gYnJhbmNoWzBdICYmIGxpbmVNYWluU3Ruc1tsaW5lTWFpblN0bnMubGVuZ3RoLTFdID09PSBicmFuY2hbYnJhbmNoLmxlbmd0aC0xXSAmJiBsaW5lUGFzc1N0bnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVBhc3NTdG5zID0gYnJhbmNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVNYWluU3RucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAxIDEgLTEgLTFcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUGFzc1N0bnMudW5zaGlmdChsaW5lTWFpblN0bnNbbGluZU1haW5TdG5zLmxlbmd0aC0xXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQoJyNsaW5lX21haW4nKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8cGF0aD4nLCB7ZDp0aGlzLl9saW5lUGF0aChsaW5lTWFpblN0bnMpfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgJCgnI2xpbmVfcGFzcycpLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJzxwYXRoPicsIHtkOnRoaXMuX2xpbmVQYXRoKGxpbmVQYXNzU3Rucyl9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjbGluZV9tYWluJykuaHRtbCgkKCcjbGluZV9tYWluJykuaHRtbCgpKTtcclxuICAgICAgICAkKCcjbGluZV9wYXNzJykuaHRtbCgkKCcjbGluZV9wYXNzJykuaHRtbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3U3RyaXAoKSB7XHJcbiAgICAgICAgLy8gJCgnI3N0cmlwLCAjZGVzdF9zdHJpcCcpLmF0dHIoJ2QnLCBgTSAwLCR7dGhpcy5zdHJpcFl9IEggJHt0aGlzLl9zdmdXaWR0aH1gKVxyXG4gICAgICAgICQoJyNzdHJpcCcpLmF0dHIoJ2QnLCBgTSAwLCR7dGhpcy5zdHJpcFl9IEggJHt0aGlzLl9zdmdXaWR0aH1gKTtcclxuICAgICAgICAkKCcjZGVzdF9zdHJpcCcpLmF0dHIoJ2QnLCBgTSAwLCR7dGhpcy5zdHJpcFl9IEggJHt0aGlzLl9zdmdEZXN0V2lkdGh9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbFRoZW1lQ29sb3VyKCkge1xyXG4gICAgICAgICQoJyNsaW5lX21haW4sICNzdHJpcCwgI2Rlc3Rfc3RyaXAnKS5hdHRyKCdzdHJva2UnLCB0aGlzLl90aGVtZUNvbG91cik7XHJcbiAgICAgICAgJCgnI2Rlc3RfbmFtZSA+ICNwbGF0Zm9ybSA+IGNpcmNsZScpLmF0dHIoJ2ZpbGwnLCB0aGlzLl90aGVtZUNvbG91cik7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0Rlc3RJbmZvKCkge1xyXG4gICAgICAgICQoJyNkZXN0X25hbWUgPiAjcGxhdGZvcm0gPiB0ZXh0JykudGV4dCh0aGlzLl9wbGF0Zm9ybU51bSk7XHJcblxyXG4gICAgICAgIGxldCB2YWxpZERlc3Q6IElEW10gPSB0aGlzW3RoaXMuX2RpcmVjdGlvbiArICdWYWxpZERlc3RzJ107XHJcbiAgICAgICAgbGV0IHR4dEFuY2hvciA9IHRoaXMuX2RpcmVjdGlvbj09PSdsJyA/ICdzdGFydCcgOiAnZW5kJztcclxuXHJcbiAgICAgICAgdmFyIFtkZXN0TmFtZVpILCBkZXN0TmFtZUVOXSA9IFswLDFdLm1hcChpZHggPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsaWREZXN0Lm1hcChzdG5JZCA9PiB0aGlzLnN0YXRpb25zW3N0bklkXS5uYW1lW2lkeF0ucmVwbGFjZSgvXFxcXC9nLCAnICcpKS5qb2luKCcvJyk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlc3RMZWdhY3kpIHtcclxuICAgICAgICAgICAgdmFyIFtsaW5lTmFtZVpILCBsaW5lTmFtZUVOXSA9IHRoaXMuX2xpbmVOYW1lcztcclxuICAgICAgICAgICAgbGluZU5hbWVFTiArPSAnICc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpbmVOYW1lWkggPSBsaW5lTmFtZUVOID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcjZGVzdF9uYW1lID4gZzpsYXN0LWNoaWxkIHRleHQnKS5lcSgwKS50ZXh0KGAke2xpbmVOYW1lWkh95b6AJHtkZXN0TmFtZVpIfWApO1xyXG4gICAgICAgICQoJyNkZXN0X25hbWUgPiBnOmxhc3QtY2hpbGQgdGV4dCcpLmVxKDEpLnRleHQoYCR7bGluZU5hbWVFTn10byAke2Rlc3ROYW1lRU59YCk7XHJcblxyXG4gICAgICAgIHZhciBiY3IgPSAkKCcjZGVzdF9uYW1lID4gZzpsYXN0LWNoaWxkJylbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIGZsYWdMZW5ndGggPSAxNjAgKyAxNTAgKyBiY3Iud2lkdGggKyA0NSArIDUwO1xyXG4gICAgICAgIHZhciBpc0xlZnQgPSAodGhpcy5fZGlyZWN0aW9uID09ICdsJykgPyAxIDogLTE7XHJcbiAgICAgICAgdmFyIGFycm93WCA9ICh0aGlzLl9zdmdEZXN0V2lkdGggLSBpc0xlZnQgKiBmbGFnTGVuZ3RoKSAvIDI7XHJcbiAgICAgICAgdmFyIGFycm93Um90YXRlID0gOTAgKiAoMSAtIGlzTGVmdCk7XHJcbiAgICAgICAgdmFyIHBsYXRmb3JtTnVtWCA9IGFycm93WCArIGlzTGVmdCAqICgxNjAgKyA1MCArIDc1KTtcclxuICAgICAgICB2YXIgZGVzdE5hbWVYID0gcGxhdGZvcm1OdW1YICsgaXNMZWZ0ICogKDc1ICsgNDUpO1xyXG4gICAgICAgICQoJyNkZXN0X25hbWUgPiB1c2UnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7YXJyb3dYfSwxMzApcm90YXRlKCR7YXJyb3dSb3RhdGV9KWApO1xyXG4gICAgICAgICQoJyNkZXN0X25hbWUgPiAjcGxhdGZvcm0nKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7cGxhdGZvcm1OdW1YfSwxMzApYCk7XHJcbiAgICAgICAgJCgnI2Rlc3RfbmFtZSA+IGc6bGFzdC1jaGlsZCcpLmF0dHIoe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtkZXN0TmFtZVh9LDEwNSlgLCBcclxuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogdHh0QW5jaG9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEZvbnRzKCkge1xyXG4gICAgICAgICQoJy5ybWctbmFtZV9femgnKS5hZGRDbGFzcyhgcm1nLW5hbWVfX2NoYXItJHt0aGlzLl9jaGFyRm9ybX1gKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5OYW1lKHN0bklkOiBJRCwgbmFtZXM6IE5hbWUsIHN0bk51bTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtID0gZ2V0UGFyYW1zKCk7XHJcbiAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLm5hbWUgPSBuYW1lcztcclxuICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ubnVtID0gc3RuTnVtO1xyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLm5hbWUgPSBuYW1lcztcclxuICAgICAgICAvLyB0aGlzLnN0YXRpb25zW3N0bklkXS5fbmFtZVpIID0gbmFtZVpIO1xyXG4gICAgICAgIC8vIHRoaXMuc3RhdGlvbnNbc3RuSWRdLl9uYW1lRU4gPSBuYW1lRU47XHJcbiAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0uc3RuTnVtID0gc3RuTnVtO1xyXG5cclxuICAgICAgICAkKGAjc3RuX2ljb25zICMke3N0bklkfWApLnJlbW92ZSgpO1xyXG4gICAgICAgICQoJyNzdG5faWNvbnMnKS5hcHBlbmQodGhpcy5zdGF0aW9uc1tzdG5JZF0uaHRtbCk7XHJcbiAgICAgICAgJCgnI3N0bl9pY29ucycpLmh0bWwoJCgnI3N0bl9pY29ucycpLmh0bWwoKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxlZnREZXN0cy5pbmNsdWRlcyhzdG5JZCkgJiYgdGhpcy5fZGlyZWN0aW9uID09ICdsJykge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodERlc3RzLmluY2x1ZGVzKHN0bklkKSAmJiB0aGlzLl9kaXJlY3Rpb24gPT0gJ3InKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvYWRGb250cygpO1xyXG4gICAgICAgIGlmIChzdG5JZCA9PSB0aGlzLl9jdXJyZW50U3RuSWQpIHt0aGlzLnVwZGF0ZVN0bk5hbWVCZygpO31cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdG5UcmFuc2ZlcihzdG5JZDogSUQsIHR5cGUsIGluZm89bnVsbCkge1xyXG4gICAgICAgIHZhciBwcmV2Q2xhc3MgPSB0aGlzLnN0YXRpb25zW3N0bklkXS5jb25zdHJ1Y3Rvci5uYW1lO1xyXG5cclxuICAgICAgICB2YXIgcGFyYW0gPSBnZXRQYXJhbXMoKTtcclxuICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uY2hhbmdlX3R5cGUgPSB0eXBlO1xyXG4gICAgICAgIGlmICh0eXBlID09ICdub25lJykge1xyXG4gICAgICAgICAgICBkZWxldGUgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLnRyYW5zZmVyO1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmludGVyY2hhbmdlO1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uaW50ZXJjaGFuZ2UgPSBbW11dO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHBhcmFtLnN0bl9saXN0W3N0bklkXS50cmFuc2ZlciA9IGluZm87XHJcbiAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5pbnRlcmNoYW5nZSA9IGluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdID0gdGhpcy5faW5pdFN0bkluc3RhbmNlKHN0bklkLCBwYXJhbS5zdG5fbGlzdFtzdG5JZF0pO1xyXG5cclxuICAgICAgICBpZiAocHJldkNsYXNzICE9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNvbnN0cnVjdG9yLm5hbWUpIHtcclxuICAgICAgICAgICAgLy8gTm90IHN1cmUgcG9zaXRpb24sIHJlZHJhdyBhbGxcclxuICAgICAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ2xpbmVzdGFydCcsICdsaW5lZW5kJ10uaW5jbHVkZXMoc3RuSWQpKSB7Y29udGludWU7fVxyXG4gICAgICAgICAgICAgICAgc3RuSW5zdGFuY2UueCA9IHRoaXMuX3N0blJlYWxYKHN0bklkKTtcclxuICAgICAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgICAgICAgICBzdG5JbnN0YW5jZS5uYW1lUG9zID0gdGhpcy5fdHh0RmxpcCA/ICF0aGlzLl9zdG5OYW1lUG9zKHN0bklkKSA6IHRoaXMuX3N0bk5hbWVQb3Moc3RuSWQpO1xyXG4gICAgICAgICAgICAgICAgc3RuSW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9zdG5TdGF0ZShzdG5JZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgUk1HTGluZS5jbGVhclNWRygpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdG5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3U3RyaXAoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS54ID0gdGhpcy5fc3RuUmVhbFgoc3RuSWQpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS55ID0gdGhpcy5fc3RuUmVhbFkoc3RuSWQpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5uYW1lUG9zID0gdGhpcy5fdHh0RmxpcCA/ICF0aGlzLl9zdG5OYW1lUG9zKHN0bklkKSA6IHRoaXMuX3N0bk5hbWVQb3Moc3RuSWQpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5zdGF0ZSA9IHRoaXMuX3N0blN0YXRlKHN0bklkKTtcclxuICAgICAgICAgICAgJChgI3N0bl9pY29ucyAjJHtzdG5JZH1gKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgJCgnI3N0bl9pY29ucycpLmFwcGVuZCh0aGlzLnN0YXRpb25zW3N0bklkXS5odG1sKTtcclxuICAgICAgICAgICAgJCgnI3N0bl9pY29ucycpLmh0bWwoJCgnI3N0bl9pY29ucycpLmh0bWwoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RuTmFtZUJnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlU3RuKHN0bklkOiBJRCkge1xyXG4gICAgICAgIHZhciBwYXJhbSA9IGdldFBhcmFtcygpO1xyXG5cclxuICAgICAgICB2YXIgcGFyZW50cyA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHM7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW47XHJcblxyXG4gICAgICAgIHZhciBpc0xhc3RNYWluQnJhbmNoU3RuID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBpZCBpbiB0aGlzLnN0YXRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChbc3RuSWQsICdsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKGlkKSkge2NvbnRpbnVlO31cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0bllTaGFyZU1UUihpZCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNMYXN0TWFpbkJyYW5jaFN0biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJlbnRzLmxlbmd0aCA9PSAyICYmIGNoaWxkcmVuLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIC8vIFRvIGJlIHJld3JpdHRlbiwgam9pbiB0d28gYnJhbmNoZXNcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNMYXN0TWFpbkJyYW5jaFN0bikge1xyXG4gICAgICAgICAgICAvLyBMYXN0IG1haW4gbGluZSBzdGF0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKHBhcmFtLnN0bl9saXN0KS5sZW5ndGggPT0gNCkge1xyXG4gICAgICAgICAgICAvLyBMYXN0IHR3byBzdGF0aW9uc1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXJlbnRzLmxlbmd0aCA9PSAyIHx8IGNoaWxkcmVuLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIHBhcmVudHMuZm9yRWFjaChwYXJJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtwYXJJZF0uY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFySWRdLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRJZF0ucGFyZW50cyA9IHBhcmVudHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkSWRdLnBhcmVudHMgPSBwYXJlbnRzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3BhcmVudHNbMF1dLmJyYW5jaC5yaWdodCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFyZW50c1swXV0uYnJhbmNoLnJpZ2h0ID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLnJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRyZW5bMF1dLmJyYW5jaC5sZWZ0ID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkcmVuWzBdXS5icmFuY2gubGVmdCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUocGFyZW50c1swXSk9PTIgJiYgdGhpcy5fc3RuSW5kZWdyZWUoY2hpbGRyZW5bMF0pPT0yKSB7XHJcbiAgICAgICAgICAgIC8vIDEgcGFyIDEgY2hpbGQsIGxhc3Qgc3RhdGlvbiBvbiB1cHBlci9sb3dlciBicmFuY2hcclxuICAgICAgICAgICAgLy8gYnJhbmNoIGRpc2FwcGVhclxyXG4gICAgICAgICAgICB2YXIgY2hpbGRJZHhPZlBhciA9IHRoaXMuc3RhdGlvbnNbcGFyZW50c1swXV0uY2hpbGRyZW4uaW5kZXhPZihzdG5JZCk7XHJcbiAgICAgICAgICAgIHZhciBwYXJJZHhPZkNoaWxkID0gdGhpcy5zdGF0aW9uc1tjaGlsZHJlblswXV0ucGFyZW50cy5pbmRleE9mKHN0bklkKTtcclxuICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyZW50c1swXV0uY2hpbGRyZW4uc3BsaWNlKGNoaWxkSWR4T2ZQYXIsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3BhcmVudHNbMF1dLmNoaWxkcmVuLnNwbGljZShjaGlsZElkeE9mUGFyLCAxKTtcclxuICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRyZW5bMF1dLnBhcmVudHMuc3BsaWNlKHBhcklkeE9mQ2hpbGQsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkcmVuWzBdXS5wYXJlbnRzLnNwbGljZShwYXJJZHhPZkNoaWxkLCAxKTtcclxuXHJcbiAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3BhcmVudHNbMF1dLmJyYW5jaC5yaWdodCA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3BhcmVudHNbMF1dLmJyYW5jaC5yaWdodCA9IFtdO1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtjaGlsZHJlblswXV0uYnJhbmNoLmxlZnQgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZHJlblswXV0uYnJhbmNoLmxlZnQgPSBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAxIHBhciAxIGNoaWxkXHJcbiAgICAgICAgICAgIHBhcmVudHMuZm9yRWFjaChwYXJJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gcGFyYW0uc3RuX2xpc3RbcGFySWRdLmNoaWxkcmVuLmluZGV4T2Yoc3RuSWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3BhcklkXS5jaGlsZHJlbltpZHhdID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1twYXJJZF0uY2hpbGRyZW5baWR4XSA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSaWdodCBkZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFySWRdLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFySWRdLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW3BhcklkXS5icmFuY2gucmlnaHRbMV0gPT09IHN0bklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1twYXJJZF0uYnJhbmNoLnJpZ2h0WzFdID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFySWRdLmJyYW5jaC5yaWdodFsxXSA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZElkID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHggPSBwYXJhbS5zdG5fbGlzdFtjaGlsZElkXS5wYXJlbnRzLmluZGV4T2Yoc3RuSWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRJZF0ucGFyZW50c1tpZHhdID0gcGFyZW50c1swXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkSWRdLnBhcmVudHNbaWR4XSA9IHBhcmVudHNbMF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIExlZnQgZGVzdFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkSWRdLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZElkXS5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW2NoaWxkSWRdLmJyYW5jaC5sZWZ0WzFdID09PSBzdG5JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbY2hpbGRJZF0uYnJhbmNoLmxlZnRbMV0gPSBwYXJlbnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkSWRdLmJyYW5jaC5sZWZ0WzFdID0gcGFyZW50c1swXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlbGV0ZSBwYXJhbS5zdG5fbGlzdFtzdG5JZF07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuc3RhdGlvbnNbc3RuSWRdO1xyXG5cclxuICAgICAgICB2YXIgaXNDdXJyZW50U3RuQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RuSWQgPT0gc3RuSWQpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0N1cnJlbnRTdG5JZCA9IE9iamVjdC5rZXlzKHRoaXMuc3RhdGlvbnMpWzJdO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RuSWQgPSBuZXdDdXJyZW50U3RuSWQ7XHJcbiAgICAgICAgICAgIHBhcmFtLmN1cnJlbnRfc3RuX2lkeCA9IG5ld0N1cnJlbnRTdG5JZDtcclxuICAgICAgICAgICAgaXNDdXJyZW50U3RuQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHBhcmVudHMuY29uY2F0KGNoaWxkcmVuKS5mb3JFYWNoKG5lSWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKG5lSWQpKSB7cmV0dXJuO31cclxuICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tuZUlkXSA9IHRoaXMuX2luaXRTdG5JbnN0YW5jZShuZUlkLCBwYXJhbS5zdG5fbGlzdFtuZUlkXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBmb3IgKGxldCBbc3RuSWQsIHN0bkluc3RhbmNlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRpb25zKSkge1xyXG4gICAgICAgICAgICBpZiAoWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSkge2NvbnRpbnVlO31cclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UueCA9IHRoaXMuX3N0blJlYWxYKHN0bklkKTtcclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UueSA9IHRoaXMuX3N0blJlYWxZKHN0bklkKTtcclxuICAgICAgICAgICAgc3RuSW5zdGFuY2UubmFtZVBvcyA9IHRoaXMuX3R4dEZsaXAgPyAhdGhpcy5fc3RuTmFtZVBvcyhzdG5JZCkgOiB0aGlzLl9zdG5OYW1lUG9zKHN0bklkKTtcclxuICAgICAgICAgICAgc3RuSW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9zdG5TdGF0ZShzdG5JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFJNR0xpbmUuY2xlYXJTVkcoKTtcclxuICAgICAgICB0aGlzLmRyYXdTdG5zKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3TGluZSgpO1xyXG4gICAgICAgIHRoaXMuZHJhd1N0cmlwKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RuTmFtZUJnKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3U3RuUG9zc2libGVMb2MocHJlcDogJ2JlZm9yZScgfCAnYWZ0ZXInLCBzdG5JZDogSUQpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgSURbXSwgSURbXV0ge1xyXG4gICAgICAgIHZhciBkZWcgPSAocHJlcCA9PSAnYmVmb3JlJykgPyB0aGlzLl9zdG5JbmRlZ3JlZShzdG5JZCkgOiB0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpO1xyXG4gICAgICAgIHN3aXRjaCAoZGVnKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIC8vIDEgLT4gMlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxLDEsMSxbXSxbXV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG5ZU2hhcmVNVFIoc3RuSWQpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAxIC0+IDFcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhdGU6IElEW10gfCAwID0gdGhpcy5uZXdCcmFuY2hQb3NzaWJsZUVuZChwcmVwLCBzdG5JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAoc3RhdGUubGVuZ3RoKSA/IHN0YXRlIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsxLDAsMCxzdGF0ZSxzdGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gWzEsMCwwLDEsMV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0bllTaGFyZU1UUihzdG5JZCkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXAgPT0gJ2JlZm9yZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLl9zdG5PdXRkZWdyZWUodGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXSktMSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLDEsW10sW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuX3N0bkluZGVncmVlKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuWzBdKS0xLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsMSxbXSxbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXAgPT0gJ2JlZm9yZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLl9zdG5PdXRkZWdyZWUodGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXSktMSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLDAsW10sW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuX3N0bkluZGVncmVlKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuWzBdKS0xLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsMCxbXSxbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFswLDAsMCxbXSxbXV07XHJcbiAgICB9XHJcblxyXG4gICAgbmV3QnJhbmNoUG9zc2libGVFbmQocHJlcDogJ2JlZm9yZScgfCAnYWZ0ZXInLCBzdG5JZDogSUQpIHtcclxuICAgICAgICBsZXQgcmVzOiBJRFtdID0gW107XHJcbiAgICAgICAgaWYgKHByZXAgPT0gJ2JlZm9yZScpIHtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX3N0bkluZGVncmVlKHN0bklkKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBzdG5JZCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHNbMF07XHJcbiAgICAgICAgICAgICAgICByZXMudW5zaGlmdChzdG5JZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzLnBvcCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHN0bklkID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChzdG5JZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzLnNoaWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU3RuKHByZXA6ICdiZWZvcmUnIHwgJ2FmdGVyJywgc3RuSWQ6IElELCBsb2MsIGVuZDogSUQpOiBbSUQsIFN0YXRpb25JbmZvXSB7XHJcbiAgICAgICAgbGV0IG5ld0lkID0gZ2V0UmFuZG9tSWQoKTtcclxuICAgICAgICB3aGlsZSAoT2JqZWN0LmtleXModGhpcy5zdGF0aW9ucykuaW5jbHVkZXMobmV3SWQpKSB7XHJcbiAgICAgICAgICAgIG5ld0lkID0gZ2V0UmFuZG9tSWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwYXJhbSA9IGdldFBhcmFtcygpO1xyXG4gICAgICAgIGxldCBuZXdJbmZvID0ge30gYXMgU3RhdGlvbkluZm87XHJcblxyXG4gICAgICAgIGlmIChwcmVwID09ICdiZWZvcmUnKSB7XHJcbiAgICAgICAgICAgIGlmIChsb2MgPT0gJ2NlbnRyZScpIHtcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHM7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RuSW5kZWdyZWUoc3RuSWQpPT0wICYmIHRoaXMuX3N0bllTaGFyZU1UUihzdG5JZCkgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSB0aGlzLmxlZnREZXN0cztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RuWVNoYXJlTVRSKHN0bklkKSAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGl2b3Qgb24gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbiA9IHRoaXMuc3RhdGlvbnNbdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXV0uY2hpbGRyZW47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8uYnJhbmNoID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBbXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnN0YXRpb25zW25ld0luZm8ucGFyZW50c1swXV0uYnJhbmNoLnJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW25ld0luZm8ucGFyZW50c1swXV0uYnJhbmNoLnJpZ2h0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbbmV3SW5mby5wYXJlbnRzWzBdXS5icmFuY2gucmlnaHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGl2b3Qgb24gbWFpblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSBbc3RuSWRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmJyYW5jaCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLmxlZnQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogW11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5sZWZ0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmJyYW5jaC5sZWZ0ID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMuZm9yRWFjaChwYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZF0ucGFyZW50cyA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRdLnBhcmVudHMgPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jID09ICd1cHBlcicpIHtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8uYnJhbmNoID0geyBsZWZ0OltdLCByaWdodDpbXSB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0bkluZGVncmVlKHN0bklkKSA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5sZWZ0WzFdID09IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLmxlZnRbMV0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmJyYW5jaC5sZWZ0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMgPSB0aGlzLnN0YXRpb25zW3N0bklkXS5wYXJlbnRzLnNsaWNlKDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbiA9IFtzdG5JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzLmZvckVhY2gocGFyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1twYXJdLmNoaWxkcmVuID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1swXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5wYXJlbnRzWzBdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgb24gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50cztcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuID0gW3N0bklkXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMuZm9yRWFjaChwYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3Bhcl0uY2hpbGRyZW5bMF0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlblswXSA9IG5ld0lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbcGFyXS5icmFuY2gucmlnaHRbMV0gPT09IHN0bklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3Bhcl0uYnJhbmNoLnJpZ2h0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtwYXJdLmJyYW5jaC5yaWdodFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZF0ucGFyZW50cyA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkXS5wYXJlbnRzID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2MgPT0gJ2xvd2VyJykge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7IGxlZnQ6W10sIHJpZ2h0OltdIH07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RuSW5kZWdyZWUoc3RuSWQpID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLmxlZnRbMV0gPT0gdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1sxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5icmFuY2gubGVmdFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoLmxlZnRbMV0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHMuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbiA9IFtzdG5JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzLmZvckVhY2gocGFyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1twYXJdLmNoaWxkcmVuID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50c1sxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5wYXJlbnRzWzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgb24gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50cztcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuID0gW3N0bklkXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMuZm9yRWFjaChwYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyQ2hpbGRMZW4gPSB0aGlzLnN0YXRpb25zW3Bhcl0uY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3Bhcl0uY2hpbGRyZW5bcGFyQ2hpbGRMZW4tMV0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlbltwYXJDaGlsZExlbi0xXSA9IG5ld0lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbcGFyXS5icmFuY2gucmlnaHRbMV0gPT09IHN0bklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3Bhcl0uYnJhbmNoLnJpZ2h0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtwYXJdLmJyYW5jaC5yaWdodFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZF0ucGFyZW50cyA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkXS5wYXJlbnRzID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2MgPT0gJ25ld3VwcGVyJykge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7IGxlZnQ6W10sIHJpZ2h0OltdIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5icmFuY2gubGVmdCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gubGVmdCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbZW5kXS5icmFuY2gucmlnaHQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmJyYW5jaC5yaWdodCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMgPSBbZW5kXTtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSBbc3RuSWRdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2VuZF0uY2hpbGRyZW4udW5zaGlmdChuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmNoaWxkcmVuLnVuc2hpZnQobmV3SWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHMudW5zaGlmdChuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ucGFyZW50cy51bnNoaWZ0KG5ld0lkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2MgPT0gJ25ld2xvd2VyJykge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7IGxlZnQ6W10sIHJpZ2h0OltdIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5icmFuY2gubGVmdCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gubGVmdCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbZW5kXS5icmFuY2gucmlnaHQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmJyYW5jaC5yaWdodCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMgPSBbZW5kXTtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSBbc3RuSWRdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2VuZF0uY2hpbGRyZW4ucHVzaChuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmNoaWxkcmVuLnB1c2gobmV3SWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHMucHVzaChuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ucGFyZW50cy5wdXNoKG5ld0lkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb2MgPT0gJ2NlbnRyZScpIHtcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSB0aGlzLnN0YXRpb25zW3N0bklkXS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpPT0wICYmIHRoaXMuX3N0bllTaGFyZU1UUihzdG5JZCkgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IHRoaXMucmlnaHREZXN0cztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RuWVNoYXJlTVRSKHN0bklkKSAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGl2b3Qgb24gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzID0gdGhpcy5zdGF0aW9uc1t0aGlzLnN0YXRpb25zW3N0bklkXS5jaGlsZHJlblswXV0ucGFyZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuc3RhdGlvbnNbbmV3SW5mby5jaGlsZHJlblswXV0uYnJhbmNoLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tuZXdJbmZvLmNoaWxkcmVuWzBdXS5icmFuY2gubGVmdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W25ld0luZm8uY2hpbGRyZW5bMF1dLmJyYW5jaC5sZWZ0ID0gW107XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBpdm90IG9uIG1haW5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMgPSBbc3RuSWRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmJyYW5jaCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnN0YXRpb25zW3N0bklkXS5icmFuY2gucmlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZF0ucGFyZW50cyA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRdLnBhcmVudHMgPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMuZm9yRWFjaChwYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2MgPT0gJ3VwcGVyJykge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7IGxlZnQ6W10sIHJpZ2h0OltdIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdID09IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW4uc2xpY2UoMCwxKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMgPSBbc3RuSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbY2hpbGRdLnBhcmVudHMgPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtjaGlsZF0ucGFyZW50cyA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW5bMF0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uY2hpbGRyZW5bMF0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBvbiBicmFuY2hcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzID0gW3N0bklkXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkXS5wYXJlbnRzWzBdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkXS5wYXJlbnRzWzBdID0gbmV3SWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tjaGlsZF0uYnJhbmNoLmxlZnRbMV0gPT09IHN0bklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkXS5icmFuY2gubGVmdFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRdLmJyYW5jaC5sZWZ0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLnBhcmVudHMuZm9yRWFjaChwYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW3Bhcl0uY2hpbGRyZW4gPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtwYXJdLmNoaWxkcmVuID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2MgPT0gJ2xvd2VyJykge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5mby5icmFuY2ggPSB7IGxlZnQ6W10sIHJpZ2h0OltdIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG5PdXRkZWdyZWUoc3RuSWQpID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdID09IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodFsxXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuID0gdGhpcy5zdGF0aW9uc1tzdG5JZF0uY2hpbGRyZW4uc2xpY2UoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5wYXJlbnRzID0gW3N0bklkXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmZvLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2NoaWxkXS5wYXJlbnRzID0gW25ld0lkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRdLnBhcmVudHMgPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuWzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmNoaWxkcmVuWzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgb24gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbiA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IFtzdG5JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0bkluZGVncmVlKGNoaWxkKSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tjaGlsZF0ucGFyZW50c1swXSA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbY2hpbGRdLnBhcmVudHNbMF0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbY2hpbGRdLnBhcmVudHNbMV0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W2NoaWxkXS5wYXJlbnRzWzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW2NoaWxkXS5icmFuY2gubGVmdFsxXSA9PT0gc3RuSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbY2hpbGRdLmJyYW5jaC5sZWZ0WzFdID0gbmV3SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtjaGlsZF0uYnJhbmNoLmxlZnRbMV0gPSBuZXdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cy5mb3JFYWNoKHBhciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbcGFyXS5jaGlsZHJlbiA9IFtuZXdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3Bhcl0uY2hpbGRyZW4gPSBbbmV3SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvYyA9PSAnbmV3dXBwZXInKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLmJyYW5jaCA9IHsgbGVmdDpbXSwgcmlnaHQ6W10gfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2VuZF0uYnJhbmNoLmxlZnQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmJyYW5jaC5sZWZ0ID0gWyd0aHJvdWdoJywgbmV3SWRdO1xyXG5cclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSBbZW5kXTtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IFtzdG5JZF07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbZW5kXS5wYXJlbnRzLnVuc2hpZnQobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbZW5kXS5wYXJlbnRzLnVuc2hpZnQobmV3SWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuLnVuc2hpZnQobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmNoaWxkcmVuLnVuc2hpZnQobmV3SWQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvYyA9PSAnbmV3bG93ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmZvLmJyYW5jaCA9IHsgbGVmdDpbXSwgcmlnaHQ6W10gfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5yaWdodCA9IFsndGhyb3VnaCcsIG5ld0lkXTtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpb25zW2VuZF0uYnJhbmNoLmxlZnQgPSBbJ3Rocm91Z2gnLCBuZXdJZF07XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtlbmRdLmJyYW5jaC5sZWZ0ID0gWyd0aHJvdWdoJywgbmV3SWRdO1xyXG5cclxuICAgICAgICAgICAgICAgIG5ld0luZm8uY2hpbGRyZW4gPSBbZW5kXTtcclxuICAgICAgICAgICAgICAgIG5ld0luZm8ucGFyZW50cyA9IFtzdG5JZF07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbZW5kXS5wYXJlbnRzLnB1c2gobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbZW5kXS5wYXJlbnRzLnB1c2gobmV3SWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuLnB1c2gobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmNoaWxkcmVuLnB1c2gobmV3SWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXdJbmZvLm5hbWUgPSBnZXROYW1lRnJvbUlkKG5ld0lkKTtcclxuICAgICAgICBuZXdJbmZvLmNoYW5nZV90eXBlID0gJ25vbmUnO1xyXG4gICAgICAgIG5ld0luZm8ubnVtID0gJzAwJztcclxuICAgICAgICBuZXdJbmZvLmludGVyY2hhbmdlID0gW1tdXTtcclxuICAgICAgICBcclxuICAgICAgICBwYXJhbS5zdG5fbGlzdFtuZXdJZF0gPSBuZXdJbmZvO1xyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGlvbnNbbmV3SWRdID0gdGhpcy5faW5pdFN0bkluc3RhbmNlKG5ld0lkLCBuZXdJbmZvKTtcclxuICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXSA9IHRoaXMuX2luaXRTdG5JbnN0YW5jZShzdG5JZCwgZ2V0UGFyYW1zKCkuc3RuX2xpc3Rbc3RuSWRdKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnggPSB0aGlzLl9zdG5SZWFsWChzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnN0YXRlID0gdGhpcy5fc3RuU3RhdGUoc3RuSWQpO1xyXG4gICAgICAgICAgICBzdG5JbnN0YW5jZS5uYW1lUG9zID0gdGhpcy5fdHh0RmxpcCA/ICF0aGlzLl9zdG5OYW1lUG9zKHN0bklkKSA6IHRoaXMuX3N0bk5hbWVQb3Moc3RuSWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUk1HTGluZS5jbGVhclNWRygpO1xyXG4gICAgICAgIHRoaXMuZHJhd1N0bnMoKTtcclxuICAgICAgICB0aGlzLmRyYXdMaW5lKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RyaXAoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3RGVzdEluZm8oKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdG5OYW1lQmcoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtuZXdJZCwgbmV3SW5mb107XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZXJzZVN0bnMoKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtID0gZ2V0UGFyYW1zKCk7XHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKHN0bklkID09PSAnbGluZXN0YXJ0Jykge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbJ2xpbmVlbmQnXS5wYXJlbnRzID0gc3RuSW5zdGFuY2UuY2hpbGRyZW4ucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbJ2xpbmVlbmQnXS5icmFuY2ggPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogc3RuSW5zdGFuY2UuYnJhbmNoLnJpZ2h0LCBcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogW11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RuSWQgPT09ICdsaW5lZW5kJykge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbJ2xpbmVzdGFydCddLmNoaWxkcmVuID0gc3RuSW5zdGFuY2UucGFyZW50cy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFsnbGluZXN0YXJ0J10uYnJhbmNoID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IFtdLCBcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogc3RuSW5zdGFuY2UuYnJhbmNoLmxlZnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB0bXBBcnIgPSBzdG5JbnN0YW5jZS5jaGlsZHJlbi5yZXZlcnNlKCkubWFwKGlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVzdGFydCc6IHJldHVybiAnbGluZWVuZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVlbmQnOiByZXR1cm4gJ2xpbmVzdGFydCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBpZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5jaGlsZHJlbiA9IHN0bkluc3RhbmNlLnBhcmVudHMucmV2ZXJzZSgpLm1hcChpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lc3RhcnQnOiByZXR1cm4gJ2xpbmVlbmQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lZW5kJzogcmV0dXJuICdsaW5lc3RhcnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ucGFyZW50cyA9IHRtcEFycjtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gubGVmdCA9IHN0bkluc3RhbmNlLmJyYW5jaC5yaWdodDtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5icmFuY2gucmlnaHQgPSBzdG5JbnN0YW5jZS5icmFuY2gubGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdXRQYXJhbXMocGFyYW0pO1xyXG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVCcmFuY2hUeXBlKHN0bklkOiBJRCwgZGlyZWN0aW9uOiBEaXJlY3Rpb25Mb25nLCB0eXBlOiAndGhyb3VnaCcgfCAnbm9udGhyb3VnaCcpIHtcclxuICAgICAgICBsZXQgZGlyZWMgPSBEaXJlY3Rpb25Mb25nW2RpcmVjdGlvbl07XHJcbiAgICAgICAgLy8gbm8gY2hhbmdlXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaFtkaXJlY11bMF0gPT09IHR5cGUpIHtyZXR1cm47fVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5icmFuY2hbZGlyZWNdWzBdID0gdHlwZTtcclxuICAgICAgICBsZXQgcGFyYW0gPSBnZXRQYXJhbXMoKTtcclxuICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoW2RpcmVjXVswXSA9IHR5cGU7XHJcbiAgICAgICAgcHV0UGFyYW1zKHBhcmFtKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnN0YXRlID0gdGhpcy5fc3RuU3RhdGUoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpO1xyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQnJhbmNoRmlyc3Qoc3RuSWQ6IElELCBkaXJlY3Rpb246IERpcmVjdGlvbkxvbmcsIGZpcnN0OiBJRCkge1xyXG4gICAgICAgIGxldCBkaXJlYyA9IERpcmVjdGlvbkxvbmdbZGlyZWN0aW9uXTtcclxuICAgICAgICAvLyBubyBjaGFuZ2VcclxuICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoW2RpcmVjXVsxXSA9PT0gZmlyc3QpIHtyZXR1cm4gZmFsc2U7fVxyXG5cclxuICAgICAgICBsZXQgYnJhbmNoRW5kSWQgPSBmaXJzdDtcclxuICAgICAgICBsZXQgcGFyYW0gPSBnZXRQYXJhbXMoKTtcclxuICAgICAgICBpZiAoZGlyZWMgPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLmluRGVncmVlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmFuY2hFbmRJZCA9IHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBicmFuY2hGaXJzdElkeCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuLmluZGV4T2YoZmlyc3QpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdID0gcGFyYW0uc3RuX2xpc3Rbc3RuSWRdLmJyYW5jaC5yaWdodFsxXSA9IGZpcnN0O1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW2JyYW5jaEVuZElkXS5icmFuY2gubGVmdFsxXSA9IHBhcmFtLnN0bl9saXN0W2JyYW5jaEVuZElkXS5icmFuY2gubGVmdFsxXSA9IHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLnBhcmVudHNbYnJhbmNoRmlyc3RJZHhdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YXRpb25zW2JyYW5jaEVuZElkXS5vdXREZWdyZWUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGJyYW5jaEVuZElkID0gdGhpcy5zdGF0aW9uc1ticmFuY2hFbmRJZF0ucGFyZW50c1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgYnJhbmNoRmlyc3RJZHggPSB0aGlzLnN0YXRpb25zW3N0bklkXS5wYXJlbnRzLmluZGV4T2YoZmlyc3QpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLmxlZnRbMV0gPSBwYXJhbS5zdG5fbGlzdFtzdG5JZF0uYnJhbmNoLmxlZnRbMV0gPSBmaXJzdDtcclxuICAgICAgICAgICAgdGhpcy5zdGF0aW9uc1ticmFuY2hFbmRJZF0uYnJhbmNoLnJpZ2h0WzFdID0gcGFyYW0uc3RuX2xpc3RbYnJhbmNoRW5kSWRdLmJyYW5jaC5yaWdodFsxXSA9IHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLmNoaWxkcmVuW2JyYW5jaEZpcnN0SWR4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHV0UGFyYW1zKHBhcmFtKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnggPSB0aGlzLl9zdG5SZWFsWChzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnN0YXRlID0gdGhpcy5fc3RuU3RhdGUoc3RuSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSTUdMaW5lLmNsZWFyU1ZHKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3RucygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmUoKTtcclxuICAgICAgICB0aGlzLmRyYXdEZXN0SW5mbygpO1xyXG4gICAgICAgIHRoaXMubG9hZEZvbnRzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUJyYW5jaFBvcyhzdG5JZDogSUQsIGRpcmVjdGlvbjogRGlyZWN0aW9uTG9uZywgcG9zOiAwIHwgMSkge1xyXG4gICAgICAgIGxldCBkaXJlYyA9IERpcmVjdGlvbkxvbmdbZGlyZWN0aW9uXTtcclxuICAgICAgICAvLyBubyBjaGFuZ2VcclxuICAgICAgICBpZiAoZGlyZWMgPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmNoaWxkcmVuLmluZGV4T2YodGhpcy5zdGF0aW9uc1tzdG5JZF0uYnJhbmNoLnJpZ2h0WzFdKSA9PT0gcG9zKSB7cmV0dXJuO31cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0aW9uc1tzdG5JZF0ucGFyZW50cy5pbmRleE9mKHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaC5sZWZ0WzFdKSA9PT0gcG9zKSB7cmV0dXJuO31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBicmFuY2hFbmRJZCA9IHRoaXMuc3RhdGlvbnNbc3RuSWRdLmJyYW5jaFtkaXJlY11bMV07XHJcbiAgICAgICAgbGV0IHBhcmFtID0gZ2V0UGFyYW1zKCk7XHJcbiAgICAgICAgaWYgKGRpcmVjID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YXRpb25zW2JyYW5jaEVuZElkXS5pbkRlZ3JlZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgYnJhbmNoRW5kSWQgPSB0aGlzLnN0YXRpb25zW2JyYW5jaEVuZElkXS5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zW3N0bklkXS5jaGlsZHJlbi5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIHBhcmFtLnN0bl9saXN0W3N0bklkXS5jaGlsZHJlbi5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLnBhcmVudHMucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFticmFuY2hFbmRJZF0ucGFyZW50cy5yZXZlcnNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLm91dERlZ3JlZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgYnJhbmNoRW5kSWQgPSB0aGlzLnN0YXRpb25zW2JyYW5jaEVuZElkXS5wYXJlbnRzWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbc3RuSWRdLnBhcmVudHMucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBwYXJhbS5zdG5fbGlzdFtzdG5JZF0ucGFyZW50cy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGlvbnNbYnJhbmNoRW5kSWRdLmNoaWxkcmVuLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgcGFyYW0uc3RuX2xpc3RbYnJhbmNoRW5kSWRdLmNoaWxkcmVuLnJldmVyc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHV0UGFyYW1zKHBhcmFtKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW3N0bklkLCBzdG5JbnN0YW5jZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKFsnbGluZXN0YXJ0JywgJ2xpbmVlbmQnXS5pbmNsdWRlcyhzdG5JZCkpIHtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnggPSB0aGlzLl9zdG5SZWFsWChzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bkluc3RhbmNlLnkgPSB0aGlzLl9zdG5SZWFsWShzdG5JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFJNR0xpbmUuY2xlYXJTVkcoKTtcclxuICAgICAgICB0aGlzLmRyYXdTdG5zKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3TGluZSgpO1xyXG4gICAgICAgIHRoaXMuZHJhd0Rlc3RJbmZvKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkRm9udHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2xlYXJTVkcoKSB7XHJcbiAgICAgICAgJCgnI3N0bl9pY29ucywgI2xpbmVfbWFpbiwgI2xpbmVfcGFzcycpLmVtcHR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGluaXRTVkcobGluZSkge1xyXG4gICAgICAgIGxpbmUuZHJhd1NWR0ZyYW1lKCk7XHJcbiAgICAgICAgbGluZS5zaG93RnJhbWVPdXRlcigpO1xyXG4gICAgICAgIGxpbmUuZHJhd1N0bnMoKTtcclxuICAgICAgICBsaW5lLmZpbGxUaGVtZUNvbG91cigpO1xyXG4gICAgICAgIGxpbmUuZHJhd0xpbmUoKTtcclxuICAgICAgICBsaW5lLmRyYXdTdHJpcCgpO1xyXG4gICAgICAgIGxpbmUuZHJhd0Rlc3RJbmZvKCk7XHJcbiAgICAgICAgbGluZS5sb2FkRm9udHMoKTtcclxuICAgICAgICBsaW5lLnVwZGF0ZVN0bk5hbWVCZygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBicmFuY2hlcygpIHtcclxuICAgICAgICB2YXIgc3RhY2sgPSBbJ2xpbmVzdGFydCddO1xyXG4gICAgICAgIHZhciBicmFuY2hlcyA9IFtbXV07XHJcbiAgICAgICAgdmFyIGJyYW5jaENvdW50ID0gMDtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJJZCA9IHN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2SWQgPSBicmFuY2hlc1ticmFuY2hDb3VudF1bMF0gfHwgbnVsbDtcclxuICAgICAgICAgICAgdmFyIGN1ckJyYW5jaCA9IFtjdXJJZF07XHJcbiAgICAgICAgICAgIGlmIChwcmV2SWQpIHtjdXJCcmFuY2gudW5zaGlmdChwcmV2SWQpO31cclxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJJZCA9PSAnbGluZWVuZCcpIHticmVhazt9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VySWQgIT0gJ2xpbmVzdGFydCcgJiYgcHJldklkID09IHRoaXMuc3RhdGlvbnNbY3VySWRdLmJyYW5jaC5sZWZ0WzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYnJhbmNoIGVuZHNcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldklkID0gY3VySWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5zdGF0aW9uc1twcmV2SWRdLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cklkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmNoZXMucHVzaChbcHJldklkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldklkID09ICdsaW5lc3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJyYW5jaE5leHRJZCA9IHRoaXMuc3RhdGlvbnNbcHJldklkXS5icmFuY2gucmlnaHRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBicmFuY2hOZXh0SWQgPSB0aGlzLnN0YXRpb25zW3ByZXZJZF0uYnJhbmNoLnJpZ2h0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGJyYW5jaE5leHRJZCA9IGdldFBhcmFtcygpLnN0bl9saXN0W3ByZXZJZF0uYnJhbmNoLnJpZ2h0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChicmFuY2hOZXh0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VySWQgPSBjaGlsZHJlbi5maWx0ZXIoc3RuSWQgPT4gc3RuSWQgIT0gYnJhbmNoTmV4dElkKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJCcmFuY2gucHVzaChjdXJJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJhbmNoZXNbYnJhbmNoQ291bnRdID0gY3VyQnJhbmNoO1xyXG4gICAgICAgICAgICBicmFuY2hDb3VudCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJyYW5jaGVzLm1hcChicmFuY2ggPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYnJhbmNoLmZpbHRlcihzdG5JZCA9PiAhWydsaW5lc3RhcnQnLCAnbGluZWVuZCddLmluY2x1ZGVzKHN0bklkKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXR0ZXIgb2Ygcm91dGVzICjooYzou4rkuqTot68pIG9mIHRoZSBsaW5lLiBUaGUgZmlyc3Qgcm91dGUgbXVzdCBiZSB0aGUgbWFpbiBsaW5lLiBcclxuICAgICAqL1xyXG4gICAgZ2V0IHJvdXRlcygpIHtcclxuICAgICAgICB2YXIgc3RhY2sgPSBbJ2xpbmVzdGFydCddO1xyXG4gICAgICAgIHZhciBicmFuY2hlcyA9IFtbJ2xpbmVzdGFydCddXTtcclxuICAgICAgICB2YXIgYnJhbmNoQ291bnQgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGN1cklkID0gc3RhY2suc2hpZnQoKTtcclxuICAgICAgICAgICAgdmFyIHByZXZJZCA9IGJyYW5jaGVzW2JyYW5jaENvdW50XS5zbGljZSgpLnJldmVyc2UoKVswXSB8fCBudWxsO1xyXG4gICAgICAgICAgICBpZiAocHJldklkICYmIGN1cklkICE9PSAnbGluZXN0YXJ0Jykge1xyXG4gICAgICAgICAgICAgICAgYnJhbmNoZXNbYnJhbmNoQ291bnRdLnB1c2goY3VySWQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJhbmNoZXNbYnJhbmNoQ291bnRdID0gW2N1cklkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAoY3VySWQgIT09ICdsaW5lZW5kJykge1xyXG4gICAgICAgICAgICAgICAgcHJldklkID0gY3VySWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnN0YXRpb25zW3ByZXZJZF0uY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VySWQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnJhbmNoTmV4dElkID0gdGhpcy5zdGF0aW9uc1twcmV2SWRdLmJyYW5jaC5yaWdodFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGJyYW5jaENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zW3ByZXZJZF0uYnJhbmNoLnJpZ2h0WzBdID09PSAndGhyb3VnaCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5jaGVzLnB1c2goYnJhbmNoZXNbYnJhbmNoQ291bnRdLnNsaWNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChicmFuY2hOZXh0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyYW5jaENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmNoZXMucHVzaChbcHJldklkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChicmFuY2hOZXh0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJhbmNoZXMucHVzaChbcHJldklkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YWNrLnB1c2goYnJhbmNoTmV4dElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJZCA9IGNoaWxkcmVuLmZpbHRlcihzdG5JZCA9PiBzdG5JZCAhPSBicmFuY2hOZXh0SWQpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyYW5jaGVzW2JyYW5jaENvdW50XS5wdXNoKGN1cklkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJldklkID09PSB0aGlzLnN0YXRpb25zW2N1cklkXS5icmFuY2gubGVmdFsxXSAmJiB0aGlzLnN0YXRpb25zW2N1cklkXS5icmFuY2gubGVmdFswXSA9PT0gJ25vbnRocm91Z2gnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYnJhbmNoZXNbYnJhbmNoQ291bnRdID0gY3VyQnJhbmNoO1xyXG4gICAgICAgICAgICBicmFuY2hDb3VudCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJyYW5jaGVzO1xyXG4gICAgfVxyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gbWRjLnRhYkJhcjsiLCJtb2R1bGUuZXhwb3J0cyA9IG1kYy5zbGlkZXI7IiwibW9kdWxlLmV4cG9ydHMgPSBtZGMuc3dpdGNoQ29udHJvbDsiLCJtb2R1bGUuZXhwb3J0cyA9IG1kYy5pY29uQnV0dG9uOyIsImltcG9ydCB7IHVwZGF0ZVBhcmFtLCBnZXRQYXJhbXMgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IE1EQ0RpYWxvZyB9IGZyb20gJ0BtYXRlcmlhbC9kaWFsb2cnO1xyXG5pbXBvcnQgeyBSTUdMaW5lIH0gZnJvbSAnLi9MaW5lJztcclxuXHJcbmNvbnN0IGdldExpbmVDbGFzcyA9IGFzeW5jIChzdHlsZTogc3RyaW5nKSA9PiB7XHJcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XHJcbiAgICAgICAgY2FzZSAnbXRyJzpcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShSTUdMaW5lKTtcclxuICAgICAgICAvLyBsYXp5IGxvYWRpbmdcclxuICAgICAgICBjYXNlICdnem10cic6XHJcbiAgICAgICAgICAgIHJldHVybiBpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogXCJMaW5lR1pcIiAqLyAnLi9MaW5lR1onKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHsgUk1HTGluZUdaIH0pID0+IFJNR0xpbmVHWik7XHJcbiAgICAgICAgY2FzZSAnc2htZXRybyc6XHJcbiAgICAgICAgICAgIHJldHVybiBpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogXCJMaW5lU0hcIiAqLyAnLi9MaW5lU0gnKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHsgUk1HTGluZVNIIH0pID0+IFJNR0xpbmVTSCk7XHJcbiAgICAgICAgLy8gYW55IG90aGVyIHN0eWxlc1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuY29uc3QgbG9hZExpbmUgPSBhc3luYyAocGFyYW0pID0+IHtcclxuICAgIGxldCBsaW5lQ2xhc3MgPSBhd2FpdCBnZXRMaW5lQ2xhc3Mod2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJykpO1xyXG4gICAgd2luZG93Lm15TGluZSA9IGF3YWl0IG5ldyBsaW5lQ2xhc3MocGFyYW0pO1xyXG4gICAgbGluZUNsYXNzLmluaXRTVkcod2luZG93Lm15TGluZSk7XHJcbn1cclxuXHJcbmlmIChsb2NhbFN0b3JhZ2Uucm1nUGFyYW0gIT0gbnVsbCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB1cGRhdGVQYXJhbSgpO1xyXG4gICAgICAgIGxvYWRMaW5lKGdldFBhcmFtcygpKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGxldCBpbml0RXJyRGlhZyA9IE1EQ0RpYWxvZy5hdHRhY2hUbygkKCcjaW5pdF9lcnJfZGlhZycpWzBdKTtcclxuICAgICAgICAkKCcjaW5pdF9lcnJfZGlhZycpXHJcbiAgICAgICAgICAgIC5maW5kKCcjZXJyX3N0YWNrJylcclxuICAgICAgICAgICAgLmh0bWwoZXJyICsgJzxicj4nICsgZXJyLnN0YWNrLnJlcGxhY2UoL1xcbi9nLCAnPGJyPicpKTtcclxuICAgICAgICBpbml0RXJyRGlhZy5vcGVuKCk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG59IGVsc2Uge1xyXG4gICAgJC5nZXRKU09OKGB0ZW1wbGF0ZXMvYmxhbmsuanNvbmAsIGRhdGEgPT4ge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5ybWdQYXJhbSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgICAgIHVwZGF0ZVBhcmFtKCk7XHJcbiAgICAgICAgbG9hZExpbmUoZ2V0UGFyYW1zKCkpO1xyXG4gICAgfSk7XHJcbn1cclxuICAgIFxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBnZXRQYXJhbXMsIHB1dFBhcmFtcywgY291bnRyeUNvZGUyRW1vamksIGdldFRyYW5zVGV4dCwgcmdiMkhleCwgTmFtZSB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgQ2l0eUVudHJ5LCBMaW5lRW50cnkgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IFJNR0xpbmVHWiB9IGZyb20gJy4uL0xpbmUvTGluZUdaJztcclxuaW1wb3J0IHsgTURDTGlzdCB9IGZyb20gJ0BtYXRlcmlhbC9saXN0JztcclxuaW1wb3J0IHsgTURDRGlhbG9nIH0gZnJvbSAnQG1hdGVyaWFsL2RpYWxvZyc7XHJcbmltcG9ydCB7IE1EQ1NlbGVjdCB9IGZyb20gJ0BtYXRlcmlhbC9zZWxlY3QnO1xyXG5pbXBvcnQgeyBNRENUZXh0RmllbGQgfSBmcm9tICdAbWF0ZXJpYWwvdGV4dGZpZWxkJztcclxuaW1wb3J0IHsgTURDU3dpdGNoIH0gZnJvbSAnQG1hdGVyaWFsL3N3aXRjaCc7XHJcbmltcG9ydCB7IE1EQ1JpcHBsZSB9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vbigpIHtcclxuICAgIC8vIG1kYyBpbnN0YW5jZXNcclxuICAgIGNvbnN0IGRlc2lnbkxpc3QgPSBNRENMaXN0LmF0dGFjaFRvKCQoJyNkZXNpZ25fbGlzdCcpWzBdKTtcclxuICAgIGNvbnN0IFt0aGVtZURpYWxvZywgbGluZU5hbWVEaWFsb2ddID0gXHJcbiAgICAgICAgWycjZGVzaWduX3RoZW1lX2RpYWcnLCAnI2xpbmVfbmFtZV9kaWFnJ10ubWFwKHNlbGVjdG9yID0+IE1EQ0RpYWxvZy5hdHRhY2hUbygkKHNlbGVjdG9yKVswXSkpO1xyXG4gICAgY29uc3QgW3RoZW1lQ2l0eVNlbGVjdCwgdGhlbWVMaW5lU2VsZWN0XSA9IFxyXG4gICAgICAgIFsnI3RoZW1lX2NpdHknLCAnI3RoZW1lX2xpbmUnXS5tYXAoc2VsZWN0b3IgPT4gbmV3IE1EQ1NlbGVjdCgkKHNlbGVjdG9yKVswXSkpO1xyXG4gICAgLy8gY29uc3QgdGhlbWVDaXR5U2VsZWN0ID0gbmV3IE1EQ1NlbGVjdCgkKCcjdGhlbWVfY2l0eScpWzBdKTtcclxuICAgIC8vIGNvbnN0IHRoZW1lTGluZVNlbGVjdCA9IG5ldyBNRENTZWxlY3QoJCgnI3RoZW1lX2xpbmUnKVswXSk7XHJcbiAgICBjb25zdCBbbGluZU5hbWVaSFRleHRGaWVsZCwgbGluZU5hbWVFTlRleHRGaWVsZF0gPSBcclxuICAgICAgICBbJyNuYW1lX3poJywgJyNuYW1lX2VuJ10ubWFwKHNlbGVjdG9yID0+IE1EQ1RleHRGaWVsZC5hdHRhY2hUbygkKCcjbGluZV9uYW1lX2RpYWcnKS5maW5kKHNlbGVjdG9yKVswXSkpO1xyXG4gICAgY29uc3QgcGxhdGZvcm1OdW1UZXh0RmllbGQgPSBNRENUZXh0RmllbGQuYXR0YWNoVG8oJCgnI3BsYXRmb3JtX251bScpWzBdKTtcclxuICAgICQoJyNwYW5lbF9kZXNpZ24gLm1kYy1saXN0IGxpJykubWFwKChfLGVsKSA9PiBuZXcgTURDUmlwcGxlKGVsKSk7XHJcblxyXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uc1xyXG4gICAgY29uc3QgZ2V0RGlyZWN0aW9uVGV4dCA9IChkaXJlYzogJ2wnIHwgJ3InKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICQoJyNkZXNpZ25fbGlzdCcpXHJcbiAgICAgICAgICAgIC5maW5kKGBsaSNkaXJlYyBwIyR7ZGlyZWN9YClcclxuICAgICAgICAgICAgLnRleHQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gaW5pdCB2YWx1ZXNcclxuICAgIFByb21pc2UucmVzb2x2ZShnZXRQYXJhbXMoKSlcclxuICAgICAgICAudGhlbihwYXJhbSA9PiB7XHJcbiAgICAgICAgICAgICQoJyNkZXNpZ25fbGlzdCcpXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnbGkjbmFtZSAubWRjLWxpc3QtaXRlbV9fc2Vjb25kYXJ5LXRleHQnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQocGFyYW0ubGluZV9uYW1lLmpvaW4oKSk7XHJcbiAgICAgICAgICAgIGxpbmVOYW1lWkhUZXh0RmllbGQudmFsdWUgPSBwYXJhbS5saW5lX25hbWVbMF07XHJcbiAgICAgICAgICAgIGxpbmVOYW1lRU5UZXh0RmllbGQudmFsdWUgPSBwYXJhbS5saW5lX25hbWVbMV07XHJcblxyXG4gICAgICAgICAgICAkKCcjZGVzaWduX2xpc3QnKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpI2RpcmVjIC5tZGMtbGlzdC1pdGVtX19zZWNvbmRhcnktdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dChnZXREaXJlY3Rpb25UZXh0KHBhcmFtLmRpcmVjdGlvbikpO1xyXG5cclxuICAgICAgICAgICAgcGxhdGZvcm1OdW1UZXh0RmllbGQudmFsdWUgPSBwYXJhbS5wbGF0Zm9ybV9udW07XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICQuZ2V0SlNPTignZGF0YS9jaXR5X2xpc3QuanNvbicsIChkYXRhOiBDaXR5RW50cnlbXSkgPT4ge1xyXG4gICAgICAgIGxldCBsYW5nID0gd2luZG93LnVybFBhcmFtcy5nZXQoJ2xhbmcnKTtcclxuICAgICAgICBkYXRhLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICQoJyN0aGVtZV9jaXR5X19zZWxlY3Rpb24nKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8bGk+Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnbWRjLWxpc3QtaXRlbScsIFxyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbHVlJzogYy5pZFxyXG4gICAgICAgICAgICAgICAgfSkudGV4dChjb3VudHJ5Q29kZTJFbW9qaShjLmNvdW50cnkpICsgZ2V0VHJhbnNUZXh0KGMubmFtZSwgbGFuZykpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJyN0aGVtZV9jaXR5X19zZWxlY3Rpb24gbGknKS5tYXAoKF8sZWwpID0+IG5ldyBNRENSaXBwbGUoZWwpKTtcclxuXHJcbiAgICAgICAgdmFyIFt0aGVtZUNpdHldID0gZ2V0UGFyYW1zKCkudGhlbWVcclxuICAgICAgICB2YXIgY2l0eUlkeCA9ICQoYCN0aGVtZV9jaXR5X19zZWxlY3Rpb24gPiBbZGF0YS12YWx1ZT1cIiR7dGhlbWVDaXR5fVwiXWApLmluZGV4KCk7XHJcbiAgICAgICAgdGhlbWVDaXR5U2VsZWN0LnNlbGVjdGVkSW5kZXggPSBjaXR5SWR4O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgZGVzaWduTGlzdC5saXN0ZW4oJ01EQ0xpc3Q6YWN0aW9uJywgKGV2ZW50OiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGV0YWlsLmluZGV4KSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoZW1lRGlhbG9nLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBsaW5lTmFtZURpYWxvZy5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgaWYgKGdldFBhcmFtcygpLmRpcmVjdGlvbiA9PSAncicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmlnaHQgdG8gbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5teUxpbmUuZGlyZWN0aW9uID0gJ2wnO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNkZXNpZ25fbGlzdCcpLmZpbmQoJ2xpI2RpcmVjIC5tZGMtbGlzdC1pdGVtX19zZWNvbmRhcnktdGV4dCcpLnRleHQoZ2V0RGlyZWN0aW9uVGV4dCgnbCcpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xlZnQgdG8gcmlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubXlMaW5lLmRpcmVjdGlvbiA9ICdyJztcclxuICAgICAgICAgICAgICAgICAgICAkKCcjZGVzaWduX2xpc3QnKS5maW5kKCdsaSNkaXJlYyAubWRjLWxpc3QtaXRlbV9fc2Vjb25kYXJ5LXRleHQnKS50ZXh0KGdldERpcmVjdGlvblRleHQoJ3InKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm15TGluZS5yZXZlcnNlU3RucygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbWVEaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6b3BlbmVkJywgKCkgPT4ge1xyXG4gICAgICAgIFt0aGVtZUNpdHlTZWxlY3QsIHRoZW1lTGluZVNlbGVjdF0ubWFwKHNlbGVjdCA9PiBzZWxlY3QubGF5b3V0KCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbWVDaXR5U2VsZWN0Lmxpc3RlbihcIk1EQ1NlbGVjdDpjaGFuZ2VcIiwgKGV2ZW50OiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBjaXR5ID0gZXZlbnQuZGV0YWlsLnZhbHVlO1xyXG4gICAgICAgICQoJyN0aGVtZV9saW5lX19zZWxlY3Rpb24nKS5lbXB0eSgpO1xyXG4gICAgICAgICQuZ2V0SlNPTihgZGF0YS8ke2NpdHl9Lmpzb25gLCAoZGF0YTogTGluZUVudHJ5W10pID0+IHtcclxuICAgICAgICAgICAgdmFyIGxhbmcgPSB3aW5kb3cudXJsUGFyYW1zLmdldCgnbGFuZycpO1xyXG4gICAgICAgICAgICBkYXRhLmZvckVhY2gobCA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKCcjdGhlbWVfbGluZV9fc2VsZWN0aW9uJykuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICQoJzxsaT4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnbWRjLWxpc3QtaXRlbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbHVlJzogbC5pZFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnPHNwYW4+JykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGwuY29sb3VyLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBsLmZnIHx8ICcjZmZmJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50ZXh0KCdcXHUwMGEwJyArIGdldFRyYW5zVGV4dChsLm5hbWUsIGxhbmcpICsgJ1xcdTAwYTAnKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnI3RoZW1lX2xpbmVfX3NlbGVjdGlvbiBsaScpLm1hcCgoXyxlbCkgPT4gbmV3IE1EQ1JpcHBsZShlbCkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmFtID0gZ2V0UGFyYW1zKCk7XHJcbiAgICAgICAgICAgIHBhcmFtLnRoZW1lWzBdID0gY2l0eTtcclxuICAgICAgICAgICAgcHV0UGFyYW1zKHBhcmFtKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsaW5lSWR4ID0gJChgI3RoZW1lX2xpbmVfX3NlbGVjdGlvbiA+IFtkYXRhLXZhbHVlPVwiJHtwYXJhbS50aGVtZVsxXX1cIl1gKS5pbmRleCgpO1xyXG4gICAgICAgICAgICB0aGVtZUxpbmVTZWxlY3Quc2VsZWN0ZWRJbmRleCA9IGxpbmVJZHg9PS0xID8gMCA6IGxpbmVJZHg7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVtZUxpbmVTZWxlY3QubGlzdGVuKFwiTURDU2VsZWN0OmNoYW5nZVwiLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IGxpbmVJZHggPSBldmVudC5kZXRhaWwuaW5kZXg7XHJcblxyXG4gICAgICAgIHZhciBwYXJhbSA9IGdldFBhcmFtcygpO1xyXG4gICAgICAgIHBhcmFtLnRoZW1lWzFdID0gZXZlbnQuZGV0YWlsLnZhbHVlO1xyXG4gICAgICAgIHB1dFBhcmFtcyhwYXJhbSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5teUxpbmUudGhlbWVMaW5lID0gZXZlbnQuZGV0YWlsLnZhbHVlO1xyXG4gICAgICAgIHdpbmRvdy5teUxpbmUudGhlbWVDb2xvdXIgPSBbJ2JhY2tncm91bmQtY29sb3InLCAnY29sb3InXVxyXG4gICAgICAgICAgICAubWFwKHByb3AgPT4gJCgnI3RoZW1lX2xpbmVfX3NlbGVjdGlvbiBzcGFuJykuZXEobGluZUlkeCkuY3NzKHByb3ApKVxyXG4gICAgICAgICAgICAubWFwKHJnYjJIZXgpO1xyXG5cclxuICAgICAgICAkKCcjZGVzaWduX2xpc3QnKVxyXG4gICAgICAgICAgICAuZmluZCgnbGkjdGhlbWUgLm1kYy1saXN0LWl0ZW1fX3NlY29uZGFyeS10ZXh0JylcclxuICAgICAgICAgICAgLmh0bWwoXHJcbiAgICAgICAgICAgICAgICAkKCcjdGhlbWVfY2l0eV9fc2VsZWN0aW9uIGxpJykuZXEodGhlbWVDaXR5U2VsZWN0LnNlbGVjdGVkSW5kZXgpLnRleHQoKSArXHJcbiAgICAgICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICAgICAgJCgnI3RoZW1lX2xpbmVfX3NlbGVjdGlvbiBsaScpLmVxKGxpbmVJZHgpLmh0bWwoKS50cmltKClcclxuICAgICAgICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxpbmVOYW1lRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5lZCcsIGV2ZW50ID0+IHtcclxuICAgICAgICBbbGluZU5hbWVaSFRleHRGaWVsZCwgbGluZU5hbWVFTlRleHRGaWVsZF0ubWFwKHRleHRmaWVsZCA9PiB0ZXh0ZmllbGQubGF5b3V0KCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2xpbmVfbmFtZV9kaWFnJylcclxuICAgICAgICAuZmluZCgnLm1kYy10ZXh0LWZpZWxkJylcclxuICAgICAgICAub24oJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbGluZU5hbWVzID0gW2xpbmVOYW1lWkhUZXh0RmllbGQsIGxpbmVOYW1lRU5UZXh0RmllbGRdLm1hcCh0ZXh0ZmllbGQgPT4gdGV4dGZpZWxkLnZhbHVlKSBhcyBOYW1lO1xyXG4gICAgICAgICAgICB3aW5kb3cubXlMaW5lLmxpbmVOYW1lcyA9IGxpbmVOYW1lcztcclxuICAgICAgICAgICAgJCgnI2Rlc2lnbl9saXN0JylcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnbGkjbmFtZSAubWRjLWxpc3QtaXRlbV9fc2Vjb25kYXJ5LXRleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KGxpbmVOYW1lcy5qb2luKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICgkKHBsYXRmb3JtTnVtVGV4dEZpZWxkLnJvb3RfKS5maW5kKCdpbnB1dCcpIGFzIEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50PilcclxuICAgICAgICAub24oJ2lucHV0JywgZXZlbnQgPT4gd2luZG93Lm15TGluZS5wbGF0Zm9ybU51bSA9IGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtdHIoKSB7XHJcbiAgICAvLyBtZGMgaW5zdGFuY2VzXHJcbiAgICBjb25zdCBkZXNpZ25MaXN0TVRSTGlzdCA9IE1EQ0xpc3QuYXR0YWNoVG8oJCgnI2Rlc2lnbl9saXN0X210cicpWzBdKTtcclxuICAgIGNvbnN0IGNoYXJEaWFsb2cgPSBNRENEaWFsb2cuYXR0YWNoVG8oJCgnI2Rlc2lnbl9jaGFyX2RpYWcnKVswXSk7XHJcbiAgICBjb25zdCBsZWdhY3lTd2l0Y2ggPSBuZXcgTURDU3dpdGNoKCQoJyNsZWdhY3knKVswXSk7XHJcblxyXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uc1xyXG4gICAgY29uc3QgZ2V0Q2hhclRleHQgPSAoY2hhcjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICQoJyNkZXNpZ25fY2hhcl9kaWFnJylcclxuICAgICAgICAgICAgLmZpbmQoJ2xpJylcclxuICAgICAgICAgICAgLmZpbHRlcigoXywgZWw6IEhUTUxFbGVtZW50KSA9PiBlbC5kYXRhc2V0Lm1kY0RpYWxvZ0FjdGlvbiA9PT0gY2hhcilcclxuICAgICAgICAgICAgLmZpbmQoJ3NwYW4nKVxyXG4gICAgICAgICAgICAudGV4dCgpXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGluaXQgdmFsdWVzXHJcbiAgICBQcm9taXNlLnJlc29sdmUoZ2V0UGFyYW1zKCkpXHJcbiAgICAgICAgLnRoZW4ocGFyYW0gPT4ge1xyXG4gICAgICAgICAgICAvLyAkKCcjZGVzaWduX2xpc3RfbXRyJylcclxuICAgICAgICAgICAgLy8gICAgIC5maW5kKCdsaSNjaGFyIC5tZGMtbGlzdC1pdGVtX19zZWNvbmRhcnktdGV4dCcpXHJcbiAgICAgICAgICAgIC8vICAgICAudGV4dChnZXRDaGFyVGV4dChwYXJhbS5jaGFyX2Zvcm0pKTtcclxuICAgICAgICAgICAgJCgnI2Rlc2lnbl9jaGFyX2RpYWcnKVswXS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnTURDRGlhbG9nOmNsb3NlZCcsIHsgZGV0YWlsOiB7YWN0aW9uOiBwYXJhbS5jaGFyX2Zvcm19fSkpO1xyXG4gICAgICAgICAgICAvLyBjaGFyRGlhbG9nLmNsb3NlKHBhcmFtLmNoYXJfZm9ybSk7XHJcbiAgICAgICAgICAgIGxlZ2FjeVN3aXRjaC5jaGVja2VkID0gcGFyYW0uZGVzdF9sZWdhY3k7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgIGRlc2lnbkxpc3RNVFJMaXN0Lmxpc3RlbignTURDTGlzdDphY3Rpb24nLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC5kZXRhaWwuaW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm15TGluZS50eHRGbGlwID0gIWdldFBhcmFtcygpLnR4dF9mbGlwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGNoYXJEaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY2hhckRpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpjbG9zZWQnLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IGNoYXIgPSBldmVudC5kZXRhaWwuYWN0aW9uO1xyXG4gICAgICAgIGlmIChjaGFyID09ICdjbG9zZScpIHtyZXR1cm47fVxyXG5cclxuICAgICAgICB3aW5kb3cubXlMaW5lLmNoYXJGb3JtID0gY2hhcjtcclxuICAgICAgICAkKCcjZGVzaWduX2xpc3RfbXRyJylcclxuICAgICAgICAgICAgLmZpbmQoJ2xpI2NoYXIgLm1kYy1saXN0LWl0ZW1fX3NlY29uZGFyeS10ZXh0JylcclxuICAgICAgICAgICAgLnRleHQoZ2V0Q2hhclRleHQoY2hhcikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgKCQobGVnYWN5U3dpdGNoLnJvb3RfKS5maW5kKCdpbnB1dCcpIGFzIEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50PilcclxuICAgICAgICAub24oJ2NoYW5nZScsIGV2ZW50ID0+IHdpbmRvdy5teUxpbmUuZGVzdExlZ2FjeSA9IGV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd6bXRyKCkge1xyXG4gICAgLy8gbWRjIGluc3RhbmNlc1xyXG4gICAgY29uc3QgZGVzaWduTGlzdEdaTVRSTGlzdCA9IE1EQ0xpc3QuYXR0YWNoVG8oJCgnI2Rlc2lnbl9saXN0X2d6bXRyJylbMF0pO1xyXG4gICAgY29uc3QgcGFuZWxUeXBlRGlhbG9nID0gTURDRGlhbG9nLmF0dGFjaFRvKCQoJyNwYW5lbF90eXBlX2RpYWcnKVswXSk7XHJcbiAgICBjb25zdCBbcHNkTnVtVGV4dEZpZWxkLCBsaW5lTnVtVGV4dEZpZWxkXSA9IFxyXG4gICAgICAgIFsnI3BzZF9udW0nLCAnI2xpbmVfbnVtJ10ubWFwKHNlbGVjdG9yID0+IE1EQ1RleHRGaWVsZC5hdHRhY2hUbygkKHNlbGVjdG9yKVswXSkpO1xyXG5cclxuICAgIC8vIGluaXQgdmFsdWVzXHJcbiAgICBQcm9taXNlLnJlc29sdmUoZ2V0UGFyYW1zKCkpXHJcbiAgICAgICAgLnRoZW4ocGFyYW0gPT4ge1xyXG4gICAgICAgICAgICBwc2ROdW1UZXh0RmllbGQudmFsdWUgPSBwYXJhbS5wc2RfbnVtO1xyXG4gICAgICAgICAgICBsaW5lTnVtVGV4dEZpZWxkLnZhbHVlID0gcGFyYW0ubGluZV9udW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgZGVzaWduTGlzdEdaTVRSTGlzdC5saXN0ZW4oJ01EQ0xpc3Q6YWN0aW9uJywgKGV2ZW50OiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGV0YWlsLmluZGV4KSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHBhbmVsVHlwZURpYWxvZy5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAoJChsaW5lTnVtVGV4dEZpZWxkLnJvb3RfKS5maW5kKCdpbnB1dCcpIGFzIEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50PilcclxuICAgICAgICAub24oJ2lucHV0JywgZXZlbnQgPT4gKDxSTUdMaW5lR1o+d2luZG93Lm15TGluZSkubGluZU51bSA9IGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcblxyXG4gICAgKCQocHNkTnVtVGV4dEZpZWxkLnJvb3RfKS5maW5kKCdpbnB1dCcpIGFzIEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50PilcclxuICAgICAgICAub24oJ2lucHV0JywgZXZlbnQgPT4gKDxSTUdMaW5lR1o+d2luZG93Lm15TGluZSkucHNkTnVtID0gZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHJcbiAgICBwYW5lbFR5cGVEaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6Y2xvc2VkJywgKGV2ZW50OiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5kZXRhaWwuYWN0aW9uID09PSAnY2xvc2UnKSB7cmV0dXJuO31cclxuICAgICAgICAoPFJNR0xpbmVHWj53aW5kb3cubXlMaW5lKS5pbmZvUGFuZWxUeXBlID0gZXZlbnQuZGV0YWlsLmFjdGlvbjtcclxuICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgZ2V0UGFyYW1zLCBjb3VudHJ5Q29kZTJFbW9qaSwgZ2V0VHJhbnNUZXh0IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBJRCwgU3RhdGlvbkluZm8sIE5hbWUsIERpcmVjdGlvbkxvbmcsIE5laWdoYm91clBsIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBNRENEaWFsb2cgfSBmcm9tICdAbWF0ZXJpYWwvZGlhbG9nJztcclxuaW1wb3J0IHsgTURDU2VsZWN0IH0gZnJvbSAnQG1hdGVyaWFsL3NlbGVjdCc7XHJcbmltcG9ydCB7IE1EQ1RleHRGaWVsZCB9IGZyb20gJ0BtYXRlcmlhbC90ZXh0ZmllbGQnO1xyXG5pbXBvcnQgeyBNRENUYWJCYXIgfSBmcm9tICdAbWF0ZXJpYWwvdGFiLWJhcic7XHJcbmltcG9ydCB7IE1EQ0ljb25CdXR0b25Ub2dnbGUgfSBmcm9tICdAbWF0ZXJpYWwvaWNvbi1idXR0b24nO1xyXG5cclxuY29uc3QgZ2V0U3RhdGlvbkNhcmQgPSAoaWQ6IElELCBuYW1lczogTmFtZSwgbnVtOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiAkKCc8ZGl2PicsIHtcclxuICAgICAgICBpZDogaWQsIFxyXG4gICAgICAgIGNsYXNzOiAnbWRjLWNhcmQgbWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTItZGVza3RvcCBtZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNC10YWJsZXQgbWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTItcGhvbmUgc3RhdGlvbi1jYXJkJ1xyXG4gICAgfSlcclxuICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8ZGl2PicsIHsgY2xhc3M6ICdtZGMtY2FyZF9fcHJpbWFyeS1hY3Rpb24nfSlcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7IGNsYXNzOiAnbWRjLWNhcmRfX21lZGlhIG1kYy1jYXJkX19tZWRpYS0tMTYtOScgfSkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JywgeyBjbGFzczogJ21kYy1jYXJkX19tZWRpYS1jb250ZW50IHN0YXRpb24tY2FyZF9fY29udGVudCd9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChuYW1lcy5qb2luKCc8YnI+JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPHNwYW4+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5Jywgd2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJykgPT09ICdnem10cicgPyAnaW5saW5lJyA6ICdub25lJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChudW0gKyAnXFx1MDBhMCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgICAgLmFwcGVuZChcclxuICAgICAgICAgICAgJCgnPGRpdj4nLCB7IGNsYXNzOiAnbWRjLWNhcmRfX2FjdGlvbnMnIH0pXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JywgeyBjbGFzczogJ21kYy1jYXJkX19hY3Rpb24taWNvbnMnIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8YnV0dG9uPicsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1NldCBBcyBDdXJyZW50JywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdtYXRlcmlhbC1pY29ucyBtZGMtaWNvbi1idXR0b24gbWRjLWNhcmRfX2FjdGlvbiBtZGMtY2FyZF9fYWN0aW9uLS1pY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgnbXlfbG9jYXRpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8YnV0dG9uPicsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0ludGVyY2hhbmdlJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdtYXRlcmlhbC1pY29ucyBtZGMtaWNvbi1idXR0b24gbWRjLWNhcmRfX2FjdGlvbiBtZGMtY2FyZF9fYWN0aW9uLS1pY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgnZWRpdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxidXR0b24+Jywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVtb3ZlJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdtYXRlcmlhbC1pY29ucyBtZGMtaWNvbi1idXR0b24gbWRjLWNhcmRfX2FjdGlvbiBtZGMtY2FyZF9fYWN0aW9uLS1pY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgnZGVsZXRlX2ZvcmV2ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21tb24oKSB7XHJcbiAgICAvLyBEdXBsaWNhdGUgZWxlbWVudFxyXG4gICAgdmFyIGludE5hbWVFbCA9ICQoJyNzdG5fdHJhbnNmZXJfZGlhZyAubWRjLWxheW91dC1ncmlkX19pbm5lciAjaW50X25hbWVfemgsI2ludF9uYW1lX2VuJykuc2xpY2UoMCwyKS5jbG9uZSgpO1xyXG4gICAgaW50TmFtZUVsLmZpbmQoJy5tZGMtdGV4dC1maWVsZCcpLnJlbW92ZUF0dHIoJ2RhdGEtbWRjLWF1dG8taW5pdC1zdGF0ZScpOyAvLyB0byBiZSByZW1vdmVkXHJcbiAgICAkKCdkaXYjaW50X2xpbmUnKS5zbGljZSgxLDMpLmFmdGVyKGludE5hbWVFbCk7XHJcblxyXG4gICAgLy8gbWRjIGluc3RhbmNlc1xyXG4gICAgY29uc3QgW3N0bkFkZERpYWxvZywgc3RuTW9kaWZ5RGlhbG9nLCBzdG5UcmFuc2ZlckRpYWxvZywgc3RuRGVsZXRlRGlhbG9nLCBzdG5EZWxldGVFcnJEaWFsb2ddID0gXHJcbiAgICAgICAgWycjc3RuX2FkZF9kaWFnJywgJyNzdG5fbW9kaWZ5X2RpYWcnLCAnI3N0bl90cmFuc2Zlcl9kaWFnJywgJyNzdG5fZGVsZXRlX2RpYWcnLCAnI3N0bl9kZWxldGVfZXJyJ11cclxuICAgICAgICAgICAgLm1hcChzZWxlY3RvciA9PiBuZXcgTURDRGlhbG9nKCQoc2VsZWN0b3IpWzBdKSk7XHJcbiAgICBcclxuICAgIGNvbnN0IFtzdG5BZGRQcmVwU2VsZWN0LCBzdG5BZGRQaXZvdFNlbGVjdCwgc3RuQWRkTG9jU2VsZWN0LCBzdG5BZGRFbmRTZWxlY3RdID0gXHJcbiAgICAgICAgWycjcHJlcCcsICcjcGl2b3QnLCAnI2xvYycsICcjZW5kJ10ubWFwKHNlbGVjdG9yID0+IG5ldyBNRENTZWxlY3QoJCgnI3N0bl9hZGRfZGlhZycpLmZpbmQoc2VsZWN0b3IpWzBdKSk7XHJcblxyXG4gICAgY29uc3Qgc3RuTW9kaWZ5TmFtZUZpZWxkcyA9IFxyXG4gICAgICAgIFsnI25hbWVfemgnLCAnI25hbWVfZW4nXS5tYXAoc2VsZWN0b3IgPT4gbmV3IE1EQ1RleHRGaWVsZCgkKCcjc3RuX21vZGlmeV9kaWFnJykuZmluZChzZWxlY3RvcilbMF0pKTtcclxuICAgIGNvbnN0IHN0bk1vZGlmeU51bUZpZWxkID0gbmV3IE1EQ1RleHRGaWVsZCgkKCcjc3RuX21vZGlmeV9kaWFnICNzdG5fbnVtJylbMF0pO1xyXG5cclxuICAgIGNvbnN0IHN0blRyYW5zZmVyVGFiQmFyID0gbmV3IE1EQ1RhYkJhcigkKCcjc3RuX3RyYW5zZmVyX2RpYWcgLm1kYy10YWItYmFyJylbMF0pO1xyXG4gICAgY29uc3QgY2hhbmdlVHlwZVNlbGVjdCA9IG5ldyBNRENTZWxlY3QoJCgnI2NoYW5nZV90eXBlJylbMF0pO1xyXG4gICAgY29uc3QgaW50Q2l0eVNlbGVjdHMgPSAkKCcjaW50X2NpdHkgLm1kYy1zZWxlY3QnKS5tYXAoKF8sZWwpID0+IG5ldyBNRENTZWxlY3QoZWwpKS5nZXQoKTtcclxuICAgIGNvbnN0IGludExpbmVTZWxlY3RzID0gJCgnI2ludF9saW5lIC5tZGMtc2VsZWN0JykubWFwKChfLGVsKSA9PiBuZXcgTURDU2VsZWN0KGVsKSkuZ2V0KCk7XHJcbiAgICBjb25zdCBpbnROYW1lRmllbGRzID0gWyd6aCcsICdlbiddXHJcbiAgICAgICAgLm1hcChsYW5nID0+ICQoYGRpdiNpbnRfbmFtZV8ke2xhbmd9YCkuZmluZCgnLm1kYy10ZXh0LWZpZWxkJykubWFwKChfLGVsKSA9PiBuZXcgTURDVGV4dEZpZWxkKGVsKSkuZ2V0KCkpO1xyXG4gICAgY29uc3Qgc3RuT1NJTmFtZUZpZWxkcyA9IFxyXG4gICAgICAgIFsnemgnLCAnZW4nXS5tYXAobGFuZyA9PiBuZXcgTURDVGV4dEZpZWxkKCQoJyNzdG5fdHJhbnNmZXJfZGlhZycpLmZpbmQoYCNvc2lfbmFtZV8ke2xhbmd9YClbMF0pKTtcclxuICAgIGNvbnN0IFt0aWNrRGlyZWNUb2dnbGUsIHBhaWRBcmVhVG9nZ2xlXSA9IFxyXG4gICAgICAgIFsnI3RpY2tfZGlyZWMnLCAnI3BhaWRfYXJlYSddLm1hcChzZWxlY3RvciA9PiBuZXcgTURDSWNvbkJ1dHRvblRvZ2dsZSgkKCcjc3RuX3RyYW5zZmVyX2RpYWcnKS5maW5kKHNlbGVjdG9yKVswXSkpO1xyXG5cclxuICAgIGNvbnN0IFt0aHJvdWdoU2VsZWN0cywgZmlyc3RTZWxlY3RzLCBwb3NTZWxlY3RzXSA9IFxyXG4gICAgICAgIFsndGhyb3VnaCcsICdmaXJzdCcsICdwb3MnXVxyXG4gICAgICAgICAgICAubWFwKHNlbGVjdG9yID0+IFsnbGVmdCcsICdyaWdodCddLm1hcChkaXJlYyA9PiBuZXcgTURDU2VsZWN0KCQoYCMke2RpcmVjfV8ke3NlbGVjdG9yfWApWzBdKSkpO1xyXG5cclxuICAgIHZhciBzdG5MaXN0ID0gZ2V0UGFyYW1zKCkuc3RuX2xpc3Q7XHJcbiAgICB3aW5kb3cubXlMaW5lLnRwby5mb3JFYWNoKHN0bklkID0+IHtcclxuICAgICAgICAkKCcjcGFuZWxfc3RhdGlvbnMgLm1kYy1sYXlvdXQtZ3JpZF9faW5uZXI6Zmlyc3QnKS5hcHBlbmQoZ2V0U3RhdGlvbkNhcmQoc3RuSWQsIHN0bkxpc3Rbc3RuSWRdLm5hbWUsIHN0bkxpc3Rbc3RuSWRdLm51bSkpO1xyXG4gICAgICAgICQoJyNwaXZvdF9fc2VsZWN0aW9uJykuYXBwZW5kKFxyXG4gICAgICAgICAgICAkKCc8bGk+JywgeydkYXRhLXZhbHVlJzpzdG5JZH0pLmFkZENsYXNzKCdtZGMtbGlzdC1pdGVtJykudGV4dChzdG5MaXN0W3N0bklkXS5uYW1lLmpvaW4oKSlcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI3BhbmVsX3N0YXRpb25zIC5tZGMtY2FyZF9fcHJpbWFyeS1hY3Rpb24nKS5vbignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgdmFyIHN0bklkID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5tZGMtY2FyZCcpLmlkO1xyXG4gICAgICAgIGlmIChzdG5JZCA9PSAnYWRkX3N0bicpIHtyZXR1cm47fVxyXG4gICAgICAgICQoJyNzdG5fbW9kaWZ5X2RpYWcnKS5hdHRyKCdmb3InLCBzdG5JZCk7XHJcbiAgICAgICAgc3RuTW9kaWZ5RGlhbG9nLm9wZW4oKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI3BhbmVsX3N0YXRpb25zIC5tZGMtY2FyZF9fYWN0aW9uLWljb25zID4gW3RpdGxlPVwiQWRkXCJdJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHN0bkFkZERpYWxvZy5vcGVuKCk7XHJcbiAgICB9KTtcclxuICAgICQoJyNwYW5lbF9zdGF0aW9ucyAubWRjLWNhcmRfX2FjdGlvbi1pY29ucyA+IFt0aXRsZT1cIlNldCBBcyBDdXJyZW50XCJdJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHZhciBzdG5JZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcubWRjLWNhcmQnKS5pZDtcclxuICAgICAgICB3aW5kb3cubXlMaW5lLmN1cnJlbnRTdG5JZCA9IHN0bklkO1xyXG4gICAgfSk7XHJcbiAgICAkKCcjcGFuZWxfc3RhdGlvbnMgLm1kYy1jYXJkX19hY3Rpb24taWNvbnMgPiBbdGl0bGU9XCJJbnRlcmNoYW5nZVwiXScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgICAgICAkKCcjc3RuX3RyYW5zZmVyX2RpYWcnKS5hdHRyKCdmb3InLCBldmVudC50YXJnZXQuY2xvc2VzdCgnLm1kYy1jYXJkJykuaWQpXHJcbiAgICAgICAgc3RuVHJhbnNmZXJEaWFsb2cub3BlbigpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcjcGFuZWxfc3RhdGlvbnMgLm1kYy1jYXJkX19hY3Rpb24taWNvbnMgPiBbdGl0bGU9XCJSZW1vdmVcIl0nKS5vbignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgdmFyIHN0bklkID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5tZGMtY2FyZCcpLmlkO1xyXG4gICAgICAgICQoJyNzdG5fZGVsZXRlX2RpYWcnKS5hdHRyKCdmb3InLCBzdG5JZCk7XHJcbiAgICAgICAgc3RuRGVsZXRlRGlhbG9nLm9wZW4oKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBBZGRpdGlvblxyXG4gICAgc3RuQWRkRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5pbmcnLCAoKSA9PiB7XHJcbiAgICAgICAgc3RuQWRkUGl2b3RTZWxlY3Quc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICB9KTtcclxuICAgIHN0bkFkZERpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpvcGVuZWQnLCAoKSA9PiB7XHJcbiAgICAgICAgW3N0bkFkZFByZXBTZWxlY3QsIHN0bkFkZFBpdm90U2VsZWN0LCBzdG5BZGRMb2NTZWxlY3RdLmZvckVhY2goc2VsZWN0ID0+IHNlbGVjdC5sYXlvdXQoKSk7XHJcbiAgICB9KTtcclxuICAgIHN0bkFkZERpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpjbG9zZWQnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5kZXRhaWwuYWN0aW9uID09ICdjbG9zZScpIHtyZXR1cm47fVxyXG5cclxuICAgICAgICB2YXIgcHJlcCA9IHN0bkFkZFByZXBTZWxlY3QudmFsdWUgYXMgJ2JlZm9yZScgfCAnYWZ0ZXInO1xyXG4gICAgICAgIHZhciBzdG5JZCA9IHN0bkFkZFBpdm90U2VsZWN0LnZhbHVlO1xyXG4gICAgICAgIHZhciBsb2MgPSBzdG5BZGRMb2NTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgdmFyIGVuZCA9IHN0bkFkZEVuZFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgW25ld0lkLCBuZXdJbmZvXSA9IHdpbmRvdy5teUxpbmUuYWRkU3RuKHByZXAsIHN0bklkLCBsb2MsIGVuZCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHByZXAsIHN0bklkLCBsb2MsIGVuZCk7XHJcbiAgICAgICAgLy8gX2dlblN0bkxpc3QoKTtcclxuICAgICAgICB2YXIgcHJldklkID0gd2luZG93Lm15TGluZS50cG9bd2luZG93Lm15TGluZS50cG8uaW5kZXhPZihuZXdJZCkgLSAxXSB8fCAnYWRkX3N0bic7XHJcbiAgICAgICAgJChgI3BhbmVsX3N0YXRpb25zIC5tZGMtbGF5b3V0LWdyaWRfX2lubmVyOmZpcnN0ICMke3ByZXZJZH1gKS5hZnRlcihnZXRTdGF0aW9uQ2FyZChuZXdJZCwgbmV3SW5mby5uYW1lLCBuZXdJbmZvLm51bSkpO1xyXG4gICAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAkKGAjcGFuZWxfc3RhdGlvbnMgIyR7bmV3SWR9IC5tZGMtY2FyZF9fcHJpbWFyeS1hY3Rpb25gKS5vbignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIHZhciBzdG5JZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcubWRjLWNhcmQnKS5pZDtcclxuICAgICAgICAgICAgaWYgKHN0bklkID09ICdhZGRfc3RuJykge3JldHVybjt9XHJcbiAgICAgICAgICAgICQoJyNzdG5fbW9kaWZ5X2RpYWcnKS5hdHRyKCdmb3InLCBzdG5JZCk7XHJcbiAgICAgICAgICAgIHN0bk1vZGlmeURpYWxvZy5vcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChgI3BhbmVsX3N0YXRpb25zICMke25ld0lkfSAubWRjLWNhcmRfX2FjdGlvbi1pY29ucyA+IFt0aXRsZT1cIlNldCBBcyBDdXJyZW50XCJdYCkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICB2YXIgc3RuSWQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLm1kYy1jYXJkJykuaWQ7XHJcbiAgICAgICAgICAgIHdpbmRvdy5teUxpbmUuY3VycmVudFN0bklkID0gc3RuSWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChgI3BhbmVsX3N0YXRpb25zICMke25ld0lkfSAubWRjLWNhcmRfX2FjdGlvbi1pY29ucyA+IFt0aXRsZT1cIkludGVyY2hhbmdlXCJdYCkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICB2YXIgc3RuSWQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLm1kYy1jYXJkJykuaWQ7XHJcbiAgICAgICAgICAgICQoJyNzdG5fdHJhbnNmZXJfZGlhZycpLmF0dHIoJ2ZvcicsIHN0bklkKTtcclxuICAgICAgICAgICAgc3RuVHJhbnNmZXJEaWFsb2cub3BlbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoYCNwYW5lbF9zdGF0aW9ucyAjJHtuZXdJZH0gLm1kYy1jYXJkX19hY3Rpb24taWNvbnMgPiBbdGl0bGU9XCJSZW1vdmVcIl1gKS5vbignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIHZhciBzdG5JZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcubWRjLWNhcmQnKS5pZDtcclxuICAgICAgICAgICAgJCgnI3N0bl9kZWxldGVfZGlhZycpLmF0dHIoJ2ZvcicsIHN0bklkKTtcclxuICAgICAgICAgICAgc3RuRGVsZXRlRGlhbG9nLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGxpc3RFbGVtID0gJCgnPGxpPicsIHtcclxuICAgICAgICAgICAgJ2RhdGEtdmFsdWUnOiBuZXdJZCwgJ2NsYXNzJzogJ21kYy1saXN0LWl0ZW0nXHJcbiAgICAgICAgfSkudGV4dChuZXdJbmZvLm5hbWUuam9pbignIC0gJykpO1xyXG4gICAgICAgIGlmIChwcmV2SWQgPT0gJ2FkZF9zdG4nKSB7XHJcbiAgICAgICAgICAgICQoJyNwaXZvdF9fc2VsZWN0aW9uJykucHJlcGVuZChsaXN0RWxlbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJChgI3Bpdm90X19zZWxlY3Rpb24gW2RhdGEtdmFsdWU9XCIke3ByZXZJZH1cImApLmFmdGVyKGxpc3RFbGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgc3RhdGlvbiBuYW1lIG1vZGlmaWNhdGlvblxyXG4gICAgICAgICQoJyNzdG5fbW9kaWZ5X2RpYWcnKS5hdHRyKCdmb3InLCBuZXdJZCk7XHJcbiAgICAgICAgc3RuTW9kaWZ5RGlhbG9nLm9wZW4oKTtcclxuICAgIH0pO1xyXG4gICAgc3RuQWRkUHJlcFNlbGVjdC5saXN0ZW4oJ01EQ1NlbGVjdDpjaGFuZ2UnLCBldmVudCA9PiB7XHJcbiAgICAgICAgJCgnI3N0bl9hZGRfZGlhZyAjcGl2b3QnKVswXS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnTURDU2VsZWN0OmNoYW5nZScpKTtcclxuICAgIH0pO1xyXG4gICAgc3RuQWRkUGl2b3RTZWxlY3QubGlzdGVuKCdNRENTZWxlY3Q6Y2hhbmdlJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHZhciBwcmVwID0gc3RuQWRkUHJlcFNlbGVjdC52YWx1ZSBhcyAnYmVmb3JlJyB8ICdhZnRlcic7XHJcbiAgICAgICAgdmFyIHN0bklkID0gc3RuQWRkUGl2b3RTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgdmFyIHN0bkxpc3QgPSBnZXRQYXJhbXMoKS5zdG5fbGlzdDtcclxuICAgICAgICBmb3IgKGxldCBbaWR4LCBzdGF0ZV0gb2Ygd2luZG93Lm15TGluZS5uZXdTdG5Qb3NzaWJsZUxvYyhwcmVwLCBzdG5JZCkuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMSB8fCAoPElEW10+c3RhdGUpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2xvY19fc2VsZWN0aW9uIGxpJykuZXEoaWR4KS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID49IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXd1cHBlciBvciBuZXdsb3dlclxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNlbmRfX3NlbGVjdGlvbicpLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxJRFtdPnN0YXRlKS5mb3JFYWNoKHN0bklkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2VuZF9fc2VsZWN0aW9uJykuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGxpPicsIHsgY2xhc3M6J21kYy1saXN0LWl0ZW0nLCAnZGF0YS12YWx1ZSc6c3RuSWQgfSkudGV4dChzdG5MaXN0W3N0bklkXS5uYW1lLmpvaW4oJyAtICcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI2xvY19fc2VsZWN0aW9uIGxpJykuZXEoaWR4KS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RuQWRkTG9jU2VsZWN0LnZhbHVlID0gJCgnI2xvY19fc2VsZWN0aW9uIGxpOm5vdChbc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiXSk6Zmlyc3QnKS5hdHRyKCdkYXRhLXZhbHVlJyk7XHJcbiAgICAgICAgc3RuQWRkTG9jU2VsZWN0LnZhbHVlID0gQXJyYXlcclxuICAgICAgICAgICAgLmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2xvY19fc2VsZWN0aW9uIGxpJykgYXMgTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZWwgPT4gZWwuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKVswXVxyXG4gICAgICAgICAgICAuZGF0YXNldC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgc3RuQWRkTG9jU2VsZWN0Lmxpc3RlbignTURDU2VsZWN0OmNoYW5nZScsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKFsnbmV3dXBwZXInLCAnbmV3bG93ZXInXS5pbmNsdWRlcyhldmVudC5kZXRhaWwudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIC8vICQoJyNzdG5fYWRkX2RpYWcgI25ld19icmFuY2gnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNzdG5fYWRkX2RpYWcgW25ldy1icmFuY2hdJykuc2hvdygpO1xyXG4gICAgICAgICAgICBzdG5BZGRFbmRTZWxlY3Quc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gJCgnI3N0bl9hZGRfZGlhZyAjbmV3X2JyYW5jaCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnI3N0bl9hZGRfZGlhZyBbbmV3LWJyYW5jaF0nKS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIE1vZGlmaWNhdGlvbiAoTmFtZSlcclxuICAgIHN0bk1vZGlmeURpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpvcGVuaW5nJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHZhciBzdG5JZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdmb3InKTtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUoZ2V0UGFyYW1zKCkuc3RuX2xpc3QpXHJcbiAgICAgICAgICAgIC50aGVuKHN0bkxpc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3RuTW9kaWZ5TmFtZUZpZWxkcy5mb3JFYWNoKCh0ZXh0ZmllbGQsIGkpID0+IHRleHRmaWVsZC52YWx1ZSA9IHN0bkxpc3Rbc3RuSWRdLm5hbWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgc3RuTW9kaWZ5TnVtRmllbGQudmFsdWUgPSBzdG5MaXN0W3N0bklkXS5udW07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3RuTW9kaWZ5RGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5lZCcsICgpID0+IHtcclxuICAgICAgICBzdG5Nb2RpZnlOYW1lRmllbGRzLm1hcCh0ZXh0ZmllbGQgPT4gdGV4dGZpZWxkLmxheW91dCgpKTtcclxuICAgICAgICBzdG5Nb2RpZnlOdW1GaWVsZC5sYXlvdXQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNzdG5fbW9kaWZ5X2RpYWcnKS5maW5kKCcjbmFtZV96aCwgI25hbWVfZW4sICNzdG5fbnVtJykub24oJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgIGxldCBuYW1lcyA9IHN0bk1vZGlmeU5hbWVGaWVsZHMubWFwKHRleHRmaWVsZCA9PiB0ZXh0ZmllbGQudmFsdWUpIGFzIE5hbWU7XHJcbiAgICAgICAgdmFyIHN0bk51bSA9IHN0bk1vZGlmeU51bUZpZWxkLnZhbHVlO1xyXG5cclxuICAgICAgICB2YXIgc3RuSWQgPSAkKCcjc3RuX21vZGlmeV9kaWFnJykuYXR0cignZm9yJyk7XHJcbiAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVTdG5OYW1lKHN0bklkLCBuYW1lcywgc3RuTnVtKTtcclxuICAgICAgICAkKGAjcGFuZWxfc3RhdGlvbnMgLm1kYy1sYXlvdXQtZ3JpZF9faW5uZXI6Zmlyc3QgIyR7c3RuSWR9IC5tZGMtY2FyZF9fbWVkaWEtY29udGVudGApXHJcbiAgICAgICAgICAgIC5odG1sKG5hbWVzLmpvaW4oJzxicj4nKSlcclxuICAgICAgICAgICAgLnByZXBlbmQoJCgnPHNwYW4+JywgeyBzdHlsZTood2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJyk9PSdnem10cicgPyAnJyA6ICdkaXNwbGF5Om5vbmU7Jyl9KS50ZXh0KHN0bk51bSsnICcpKTtcclxuICAgICAgICAkKGBsaVtkYXRhLXZhbHVlPVwiJHtzdG5JZH1gKS50ZXh0KG5hbWVzLmpvaW4oKSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gTW9kaWZpY2F0aW9uIChJbnRlcmNoYW5nZSlcclxuICAgIGNvbnN0IGZvY3VzSW50ZXJjaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgY2hhbmdlVHlwZVNlbGVjdC5sYXlvdXQoKTtcclxuICAgICAgICBpbnRDaXR5U2VsZWN0cy5mb3JFYWNoKHNlbGVjdCA9PiBzZWxlY3QubGF5b3V0KCkpO1xyXG4gICAgICAgIGludExpbmVTZWxlY3RzLmZvckVhY2goc2VsZWN0ID0+IHNlbGVjdC5sYXlvdXQoKSk7XHJcbiAgICAgICAgW10uY29uY2F0KC4uLmludE5hbWVGaWVsZHMpLmZvckVhY2godGV4dGZpZWxkID0+IHRleHRmaWVsZC5sYXlvdXQoKSk7XHJcbiAgICAgICAgc3RuT1NJTmFtZUZpZWxkcy5mb3JFYWNoKHRleHRmaWVsZCA9PiB0ZXh0ZmllbGQubGF5b3V0KCkpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGZvY3VzQnJhbmNoID0gKCkgPT4ge1xyXG4gICAgICAgIFsuLi50aHJvdWdoU2VsZWN0cywgLi4uZmlyc3RTZWxlY3RzLCAuLi5wb3NTZWxlY3RzXVxyXG4gICAgICAgICAgICAubWFwKHNlbGVjdCA9PiBzZWxlY3QubGF5b3V0KCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBpbml0QnJhbmNoID0gKHN0bkluZm86IFN0YXRpb25JbmZvKSA9PiB7XHJcbiAgICAgICAgLy8gdGhyb3VnaCB0eXBlXHJcbiAgICAgICAgWydsZWZ0JywgJ3JpZ2h0J10uZm9yRWFjaChkaXJlYyA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0aHJvdWdoVHlwZSA9IHN0bkluZm8uYnJhbmNoW2RpcmVjXVswXTtcclxuICAgICAgICAgICAgaWYgKHRocm91Z2hUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdWdoU2VsZWN0c1tEaXJlY3Rpb25Mb25nW2RpcmVjXV0udmFsdWUgPSB0aHJvdWdoVHlwZTtcclxuICAgICAgICAgICAgICAgICQoYCMke2RpcmVjfV90aHJvdWdoX19zZWxlY3Rpb24gW2RhdGEtdmFsdWU9XCJuYVwiXWApLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoYCMke2RpcmVjfV90aHJvdWdoX19zZWxlY3Rpb24gW2RhdGEtdmFsdWU9XCJ0aHJvdWdoXCJdYCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJChgIyR7ZGlyZWN9X3Rocm91Z2hfX3NlbGVjdGlvbiBbZGF0YS12YWx1ZT1cIm5vbnRocm91Z2hcIl1gKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChgWyR7ZGlyZWN9LWZpcnN0LWdyb3VwXSwgWyR7ZGlyZWN9LXBvcy1ncm91cF1gKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdWdoU2VsZWN0c1tEaXJlY3Rpb25Mb25nW2RpcmVjXV0udmFsdWUgPSAnbmEnO1xyXG4gICAgICAgICAgICAgICAgJChgIyR7ZGlyZWN9X3Rocm91Z2hfX3NlbGVjdGlvbiBbZGF0YS12YWx1ZT1cIm5hXCJdYCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJChgIyR7ZGlyZWN9X3Rocm91Z2hfX3NlbGVjdGlvbiBbZGF0YS12YWx1ZT1cInRocm91Z2hcIl1gKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKGAjJHtkaXJlY31fdGhyb3VnaF9fc2VsZWN0aW9uIFtkYXRhLXZhbHVlPVwibm9udGhyb3VnaFwiXWApLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKGBbJHtkaXJlY30tZmlyc3QtZ3JvdXBdLCBbJHtkaXJlY30tcG9zLWdyb3VwXWApLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBmaXJzdCBzdGF0aW9uXHJcbiAgICAgICAgJCgnI2xlZnRfZmlyc3RfX3NlbGVjdGlvbiwgI3JpZ2h0X2ZpcnN0X19zZWxlY3Rpb24nKS5lbXB0eSgpO1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZShnZXRQYXJhbXMoKS5zdG5fbGlzdClcclxuICAgICAgICAgICAgLnRoZW4oc3RuTGlzdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBbMCwgMV0uZm9yRWFjaChpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzdG5JbmZvW05laWdoYm91clBsW2ldIGFzICdwYXJlbnRzJyB8ICdjaGlsZHJlbiddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKG5lID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke0RpcmVjdGlvbkxvbmdbaV19X2ZpcnN0X19zZWxlY3Rpb25gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxsaT4nLCB7IGNsYXNzOiAnbWRjLWxpc3QtaXRlbScsICdkYXRhLXZhbHVlJzogbmV9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoc3RuTGlzdFtuZV0ubmFtZS5qb2luKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhyb3VnaFNlbGVjdHMuZm9yRWFjaCgoc2VsZWN0LCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdFNlbGVjdHNbaWR4XS5zZWxlY3RlZEluZGV4ID0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdC52YWx1ZSAhPT0gJ25hJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0bkluZm9bTmVpZ2hib3VyUGxbaWR4XV0uaW5kZXhPZihzdG5JbmZvLmJyYW5jaFtEaXJlY3Rpb25Mb25nW2lkeF1dWzFdKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gc3dhcCBwb3NpdGlvblxyXG4gICAgICAgIHBvc1NlbGVjdHMuZm9yRWFjaCgoc2VsZWN0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gc3RuSW5mb1tOZWlnaGJvdXJQbFtpXV0uaW5kZXhPZihzdG5JbmZvLmJyYW5jaFtEaXJlY3Rpb25Mb25nW2ldXVsxXSlcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3RuVHJhbnNmZXJUYWJCYXIubGlzdGVuKCdNRENUYWJCYXI6YWN0aXZhdGVkJywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRldGFpbC5pbmRleCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAkKCcjcGFuZWxfaW50ZXJjaGFuZ2UnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGFuZWxfYnJhbmNoJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9jdXNJbnRlcmNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICQoJyNwYW5lbF9pbnRlcmNoYW5nZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwYW5lbF9icmFuY2gnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICBmb2N1c0JyYW5jaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBhdXRvSW5pdCgpO1xyXG5cclxuICAgICQuZ2V0SlNPTignZGF0YS9jaXR5X2xpc3QuanNvbicsIGRhdGEgPT4ge1xyXG4gICAgICAgIHZhciBsYW5nID0gd2luZG93LnVybFBhcmFtcy5nZXQoJ2xhbmcnKTtcclxuICAgICAgICBkYXRhLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICQoJyNpbnRfY2l0eV9fc2VsZWN0aW9uLm1kYy1saXN0JykuZWFjaCgoXyxlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgJChlbCkuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICQoJzxsaT4nLCB7IGNsYXNzOiAnbWRjLWxpc3QtaXRlbScsICdkYXRhLXZhbHVlJzogYy5pZH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGNvdW50cnlDb2RlMkVtb2ppKGMuY291bnRyeSkgKyBnZXRUcmFuc1RleHQoYy5uYW1lLCBsYW5nKSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBfc2hvd0FsbEZpZWxkcyhuLCBzaG93KSB7XHJcbiAgICAgICAgaWYgKHNob3cpIHtcclxuICAgICAgICAgICAgJCgnI2ludF9jaXR5LCAjaW50X2xpbmUsICNpbnRfbmFtZV96aCwgI2ludF9uYW1lX2VuJykuc2xpY2Uobio0LCAobisxKSo0KS5zaG93KCk7XHJcbiAgICAgICAgICAgIGludENpdHlTZWxlY3RzW25dLmxheW91dCgpO1xyXG4gICAgICAgICAgICBpbnRMaW5lU2VsZWN0c1tuXS5sYXlvdXQoKTtcclxuICAgICAgICAgICAgaW50TmFtZUZpZWxkcy5tYXAoZmllbGRzID0+IGZpZWxkc1tuXS5sYXlvdXQoKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI2ludF9jaXR5LCAjaW50X2xpbmUsICNpbnRfbmFtZV96aCwgI2ludF9uYW1lX2VuJykuc2xpY2Uobio0LCAobisxKSo0KS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0blRyYW5zZmVyRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5pbmcnLCBldmVudCA9PiB7XHJcbiAgICAgICAgdmFyIHN0bklkID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2ZvcicpO1xyXG4gICAgICAgIHZhciBzdG5JbmZvID0gZ2V0UGFyYW1zKCkuc3RuX2xpc3Rbc3RuSWRdO1xyXG4gICAgICAgIGxldCBsaW5lVGhlbWVDaXR5ID0gZ2V0UGFyYW1zKCkudGhlbWVbMF07XHJcblxyXG4gICAgICAgIGNoYW5nZVR5cGVTZWxlY3QudmFsdWUgPSBzdG5JbmZvLmNoYW5nZV90eXBlLnNwbGl0KCdfJylbMF07XHJcblxyXG4gICAgICAgIGlmIChzdG5JbmZvLmNoYW5nZV90eXBlICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgdmFyIGFsbEludGVyY2hhbmdlcyA9IHN0bkluZm8uaW50ZXJjaGFuZ2VbMF0uY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgc3RuSW5mby5pbnRlcmNoYW5nZVsxXSA/IHN0bkluZm8uaW50ZXJjaGFuZ2VbMV0uc2xpY2UoMSxzdG5JbmZvLmludGVyY2hhbmdlWzFdLmxlbmd0aCkgOiBbXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoYWxsSW50ZXJjaGFuZ2VzLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgICAgIGFsbEludGVyY2hhbmdlcy51bnNoaWZ0KFssLCwsLCxdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxsSW50ZXJjaGFuZ2VzLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgICAgIGFsbEludGVyY2hhbmdlcy5wdXNoKFssLCwsLCxdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhbGxJbnRlcmNoYW5nZXMpXHJcbiAgICAgICAgICAgIGFsbEludGVyY2hhbmdlcy5mb3JFYWNoKChpbnRJbmZvLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjSWR4ID0gJCgnI2ludF9jaXR5X19zZWxlY3Rpb24ubWRjLWxpc3QnKS5lcSgwKS5maW5kKGBbZGF0YS12YWx1ZT1cIiR7aW50SW5mb1swXSB8fCBsaW5lVGhlbWVDaXR5fVwiXWApLmluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICBpbnRDaXR5U2VsZWN0c1tpZHhdLnNlbGVjdGVkSW5kZXggPSBjSWR4O1xyXG4gICAgICAgICAgICAgICAgaW50TmFtZUZpZWxkcy5mb3JFYWNoKChmaWVsZHMsIGkpID0+IGZpZWxkc1tpZHhdLnZhbHVlID0gaW50SW5mb1s0K2ldIHx8ICcnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGNJZHggPSAkKCcjaW50X2NpdHlfX3NlbGVjdGlvbi5tZGMtbGlzdCcpLmVxKDApLmZpbmQoYFtkYXRhLXZhbHVlPVwiJHtsaW5lVGhlbWVDaXR5fVwiXWApLmluZGV4KCk7XHJcbiAgICAgICAgICAgIGludENpdHlTZWxlY3RzLmZvckVhY2goc2VsZWN0ID0+IHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gY0lkeCk7XHJcbiAgICAgICAgICAgIFtdLmNvbmNhdCguLi5pbnROYW1lRmllbGRzKS5mb3JFYWNoKHRleHRmaWVsZCA9PiB0ZXh0ZmllbGQudmFsdWUgPSAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoWydub25lJywgJ2ludDInXS5pbmNsdWRlcyhzdG5JbmZvLmNoYW5nZV90eXBlLnNwbGl0KCdfJylbMF0pKSB7XHJcbiAgICAgICAgICAgIHRpY2tEaXJlY1RvZ2dsZS5vbiA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGlja0RpcmVjVG9nZ2xlLm9uID0gKHN0bkluZm8uY2hhbmdlX3R5cGUuc2xpY2UoLTEpID09ICdyJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RuSW5mby5jaGFuZ2VfdHlwZS5zdWJzdHJpbmcoMCwzKSA9PSAnb3NpJykge1xyXG4gICAgICAgICAgICBzdG5PU0lOYW1lRmllbGRzLmZvckVhY2goKHRleHRmaWVsZCxpKSA9PiB0ZXh0ZmllbGQudmFsdWUgPSBzdG5JbmZvLmludGVyY2hhbmdlWzFdWzBdW2ldKTtcclxuICAgICAgICAgICAgcGFpZEFyZWFUb2dnbGUub24gPSAoc3RuSW5mby5jaGFuZ2VfdHlwZS5zcGxpdCgnXycpLnJldmVyc2UoKVswXVswXSA9PSAncCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0bk9TSU5hbWVGaWVsZHMuZm9yRWFjaCh0ZXh0ZmllbGQgPT4gdGV4dGZpZWxkLnZhbHVlID0gJycpO1xyXG4gICAgICAgICAgICBwYWlkQXJlYVRvZ2dsZS5vbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCcmFuY2hcclxuICAgICAgICBpbml0QnJhbmNoKHN0bkluZm8pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3RuVHJhbnNmZXJEaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6b3BlbmVkJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIGZvY3VzSW50ZXJjaGFuZ2UoKTtcclxuICAgICAgICBmb2N1c0JyYW5jaCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3RuVHJhbnNmZXJEaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6Y2xvc2VkJywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmFjdGlvbiA9PSAnY2xvc2UnKSB7cmV0dXJuO31cclxuXHJcbiAgICAgICAgLy8gdmFyIHN0bklkID0gJCgnI3BhbmVsX3N0YXRpb25zICNzZWxlY3RlZF9zdG4nKS5hdHRyKCdzdG4nKTtcclxuICAgICAgICB2YXIgc3RuSWQgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdmb3InKTtcclxuICAgICAgICB2YXIgdHlwZSA9IGNoYW5nZVR5cGVTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgdmFyIHRpY2tEaXJlYyA9IHRpY2tEaXJlY1RvZ2dsZS5vbiA/ICdyJyA6ICdsJztcclxuICAgICAgICBsZXQgb3NpID0gc3RuT1NJTmFtZUZpZWxkcy5tYXAodGV4dGZpZWxkID0+IHRleHRmaWVsZC52YWx1ZSk7XHJcbiAgICAgICAgdmFyIG9zaVBhaWRBcmVhID0gcGFpZEFyZWFUb2dnbGUub24gPyAncCcgOiAndSc7XHJcblxyXG4gICAgICAgIHZhciBbaW50SW5mbzAsIGludEluZm8xLCBpbnRJbmZvMl0gPSBbMCwxLDJdLm1hcChpZHggPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gW2ludENpdHlTZWxlY3RzW2lkeF0udmFsdWUsIGludExpbmVTZWxlY3RzW2lkeF0udmFsdWVdXHJcbiAgICAgICAgICAgICAgICAuY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgICAgICQoJ3VsI2ludF9saW5lX19zZWxlY3Rpb24nKS5lcShpZHgpLmZpbmQoJ2xpIHNwYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoaW50TGluZVNlbGVjdHNbaWR4XS5zZWxlY3RlZEluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3R5bGUnKS5tYXRjaCgvI1tcXHdcXGRdKy9nKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uaW50TmFtZUZpZWxkcy5tYXAoZmllbGRzID0+IGZpZWxkc1tpZHhdLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodHlwZSA9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgdHlwZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdvc2kyMicpIHtcclxuICAgICAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgYCR7dHlwZX1fJHtvc2lQYWlkQXJlYX0ke3RpY2tEaXJlY31gLCBbW2ludEluZm8wXSwgW29zaSwgaW50SW5mbzEsIGludEluZm8yXV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50Mic6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgdHlwZSwgW1tdLCBpbnRJbmZvMSwgW11dKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubXlMaW5lLnVwZGF0ZVN0blRyYW5zZmVyKHN0bklkLCB0eXBlLCBbW2ludEluZm8xXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb3NpMTEnOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvdy5teUxpbmUudXBkYXRlU3RuVHJhbnNmZXIoc3RuSWQsIGAke3R5cGV9XyR7b3NpUGFpZEFyZWF9JHt0aWNrRGlyZWN9YCwgW29zaSwgaW50SW5mbzEsIFtdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgYCR7dHlwZX1fJHtvc2lQYWlkQXJlYX0ke3RpY2tEaXJlY31gLCBbW10sIFtvc2ksIGludEluZm8xXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW50Myc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cubXlMaW5lLnVwZGF0ZVN0blRyYW5zZmVyKHN0bklkLCBgJHt0eXBlfV8ke3RpY2tEaXJlY31gLCBbW10sIGludEluZm8xLCBpbnRJbmZvMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgYCR7dHlwZX1fJHt0aWNrRGlyZWN9YCwgW1tpbnRJbmZvMSwgaW50SW5mbzJdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3NpMTInOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93Lm15TGluZS51cGRhdGVTdG5UcmFuc2ZlcihzdG5JZCwgYCR7dHlwZX1fJHtvc2lQYWlkQXJlYX0ke3RpY2tEaXJlY31gLCBbb3NpLCBpbnRJbmZvMSwgaW50SW5mbzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5teUxpbmUudXBkYXRlU3RuVHJhbnNmZXIoc3RuSWQsIGAke3R5cGV9XyR7b3NpUGFpZEFyZWF9JHt0aWNrRGlyZWN9YCwgW1tdLCBbb3NpLCBpbnRJbmZvMSwgaW50SW5mbzJdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGNoYW5nZVR5cGVTZWxlY3QubGlzdGVuKCdNRENTZWxlY3Q6Y2hhbmdlJywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLnZhbHVlID09ICdpbnQyJykge1xyXG4gICAgICAgICAgICBfc2hvd0FsbEZpZWxkcygwLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIF9zaG93QWxsRmllbGRzKDEsIHRydWUpO1xyXG4gICAgICAgICAgICBfc2hvd0FsbEZpZWxkcygyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICQoJyNzdG5fdHJhbnNmZXJfZGlhZyAjdGlja19kaXJlYycpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnI29zaV9uYW1lX3poLCAjb3NpX25hbWVfZW4sICNwYWlkX2FyZWEnKS5oaWRlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwudmFsdWUgPT0gJ2ludDMnKSB7XHJcbiAgICAgICAgICAgIF9zaG93QWxsRmllbGRzKDAsIGZhbHNlKTtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIF9zaG93QWxsRmllbGRzKDIsIHRydWUpO1xyXG4gICAgICAgICAgICAkKCcjc3RuX3RyYW5zZmVyX2RpYWcgI3RpY2tfZGlyZWMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNvc2lfbmFtZV96aCwgI29zaV9uYW1lX2VuLCAjcGFpZF9hcmVhJykuaGlkZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGV0YWlsLnZhbHVlID09ICdvc2kxMScpIHtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBfc2hvd0FsbEZpZWxkcygxLCB0cnVlKTtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAkKCcjc3RuX3RyYW5zZmVyX2RpYWcgI3RpY2tfZGlyZWMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNvc2lfbmFtZV96aCwgI29zaV9uYW1lX2VuLCAjcGFpZF9hcmVhJykuc2hvdygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGV0YWlsLnZhbHVlID09ICdvc2kxMicpIHtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBfc2hvd0FsbEZpZWxkcygxLCB0cnVlKTtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoJyNzdG5fdHJhbnNmZXJfZGlhZyAjdGlja19kaXJlYycpLnNob3coKTtcclxuICAgICAgICAgICAgJCgnI29zaV9uYW1lX3poLCAjb3NpX25hbWVfZW4sICNwYWlkX2FyZWEnKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwudmFsdWUgPT0gJ29zaTIyJykge1xyXG4gICAgICAgICAgICAvLyAkKCcjc3RuX3RyYW5zZmVyX2RpYWcgLm1kYy1kaWFsb2dfX2NvbnRlbnQgW2lkXWRpdiwgI3BhaWRfYXJlYScpLnNsaWNlKDEpLnNob3coKVxyXG4gICAgICAgICAgICBfc2hvd0FsbEZpZWxkcygwLCB0cnVlKTtcclxuICAgICAgICAgICAgX3Nob3dBbGxGaWVsZHMoMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIF9zaG93QWxsRmllbGRzKDIsIHRydWUpO1xyXG4gICAgICAgICAgICAkKCcjb3NpX25hbWVfemgsICNvc2lfbmFtZV9lbiwgI3BhaWRfYXJlYScpLnNob3coKTtcclxuICAgICAgICAgICAgbGV0IHN0bkluZm8gPSBnZXRQYXJhbXMoKS5zdG5fbGlzdFskKCcjc3RuX3RyYW5zZmVyX2RpYWcnKS5hdHRyKCdmb3InKV07XHJcbiAgICAgICAgICAgIGlmIChzdG5JbmZvLnBhcmVudHNbMF0gPT0gJ2xpbmVzdGFydCcgfHwgc3RuSW5mby5jaGlsZHJlblswXSA9PSAnbGluZWVuZCcpIHtcclxuICAgICAgICAgICAgICAgICQoJyN0aWNrX2RpcmVjJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI3RpY2tfZGlyZWMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjc3RuX3RyYW5zZmVyX2RpYWcgI3BhbmVsX2ludGVyY2hhbmdlIFtpZF1kaXYnKS5zbGljZSgxKS5oaWRlKClcclxuICAgICAgICAgICAgJCgnI3RpY2tfZGlyZWMsICNwYWlkX2FyZWEnKS5oaWRlKClcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnRDaXR5U2VsZWN0cy5mb3JFYWNoKChzZWxlY3QsIGlkeCkgPT4ge1xyXG4gICAgICAgIHNlbGVjdC5saXN0ZW4oJ01EQ1NlbGVjdDpjaGFuZ2UnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmluZGV4ID09PSAtMSkge3JldHVybjt9XHJcbiAgICAgICAgICAgICQuZ2V0SlNPTihgZGF0YS8ke2V2ZW50LmRldGFpbC52YWx1ZX0uanNvbmAsIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhbmcgPSB3aW5kb3cudXJsUGFyYW1zLmdldCgnbGFuZycpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2ludF9saW5lX19zZWxlY3Rpb24ubWRjLWxpc3QnKS5lcShpZHgpLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2gobCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2ludF9saW5lX19zZWxlY3Rpb24ubWRjLWxpc3QnKS5lcShpZHgpLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgYDxsaSBjbGFzcz1cIm1kYy1saXN0LWl0ZW1cIiBkYXRhLXZhbHVlPVwiJHtsLmlkfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImJhY2tncm91bmQ6JHtsLmNvbG91cn07Y29sb3I6JHtsLmZnIHx8ICcjZmZmJ307XCI+Jm5ic3A7JHtnZXRUcmFuc1RleHQobC5uYW1lLCBsYW5nKX0mbmJzcDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+YFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RuSWQgPSAkKCcjc3RuX3RyYW5zZmVyX2RpYWcnKS5hdHRyKCdmb3InKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdG5JbmZvID0gZ2V0UGFyYW1zKCkuc3RuX2xpc3Rbc3RuSWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0bkluZm8uY2hhbmdlX3R5cGUgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxJbnRlcmNoYW5nZXMgPSBzdG5JbmZvLmludGVyY2hhbmdlWzBdLmNvbmNhdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RuSW5mby5pbnRlcmNoYW5nZVsxXSA/IHN0bkluZm8uaW50ZXJjaGFuZ2VbMV0uc2xpY2UoMSxzdG5JbmZvLmludGVyY2hhbmdlWzFdLmxlbmd0aCkgOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbEludGVyY2hhbmdlcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEludGVyY2hhbmdlcy51bnNoaWZ0KFssLCwsLCxdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbEludGVyY2hhbmdlcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEludGVyY2hhbmdlcy5wdXNoKFssLCwsLCxdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxJZHggPSAkKCcjaW50X2xpbmVfX3NlbGVjdGlvbi5tZGMtbGlzdCcpLmVxKGlkeCkuZmluZChgW2RhdGEtdmFsdWU9XCIke2FsbEludGVyY2hhbmdlc1tpZHhdWzFdfVwiXWApLmluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50TGluZVNlbGVjdHNbaWR4XS5zZWxlY3RlZEluZGV4ID0gKGxJZHggPT0gLTEpID8gMCA6IGxJZHg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGludExpbmVTZWxlY3RzW2lkeF0uc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KTsgXHJcblxyXG4gICAgLy8gTW9kaWZpY2F0aW9uIChCcmFuY2gpXHJcbiAgICB0aHJvdWdoU2VsZWN0cy5mb3JFYWNoKChzZWxlY3QsIGlkeCkgPT4ge1xyXG4gICAgICAgIHNlbGVjdC5saXN0ZW4oJ01EQ1NlbGVjdDpjaGFuZ2UnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLnZhbHVlID09PSAnbmEnKSB7cmV0dXJuO31cclxuICAgICAgICAgICAgbGV0IHN0bklkID0gJCgnI3N0bl90cmFuc2Zlcl9kaWFnJykuYXR0cignZm9yJyk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5teUxpbmUudXBkYXRlQnJhbmNoVHlwZShzdG5JZCwgaWR4LCBldmVudC5kZXRhaWwudmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZmlyc3RTZWxlY3RzLmZvckVhY2goKHNlbGVjdCwgaWR4KSA9PiB7XHJcbiAgICAgICAgc2VsZWN0Lmxpc3RlbignTURDU2VsZWN0OmNoYW5nZScsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICgkKGAjJHtEaXJlY3Rpb25Mb25nW2lkeF19X2ZpcnN0X19zZWxlY3Rpb25gKS5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMSkge3JldHVybjt9XHJcbiAgICAgICAgICAgIGxldCBzdG5JZCA9ICQoJyNzdG5fdHJhbnNmZXJfZGlhZycpLmF0dHIoJ2ZvcicpO1xyXG4gICAgICAgICAgICBpZiAod2luZG93Lm15TGluZS51cGRhdGVCcmFuY2hGaXJzdChzdG5JZCwgaWR4LCBldmVudC5kZXRhaWwudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NTZWxlY3RzW2lkeF0uc2VsZWN0ZWRJbmRleCA9IHBvc1NlbGVjdHNbaWR4XS5zZWxlY3RlZEluZGV4ID09PSAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvc1NlbGVjdHMuZm9yRWFjaCgoc2VsZWN0LCBpZHgpID0+IHtcclxuICAgICAgICBzZWxlY3QubGlzdGVuKCdNRENTZWxlY3Q6Y2hhbmdlJywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRocm91Z2hTZWxlY3RzW2lkeF0udmFsdWUgPT09ICduYScpIHtyZXR1cm47fVxyXG4gICAgICAgICAgICBsZXQgc3RuSWQgPSAkKCcjc3RuX3RyYW5zZmVyX2RpYWcnKS5hdHRyKCdmb3InKTtcclxuICAgICAgICAgICAgd2luZG93Lm15TGluZS51cGRhdGVCcmFuY2hQb3Moc3RuSWQsIGlkeCwgZXZlbnQuZGV0YWlsLmluZGV4KTtcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBEZWxldGlvblxyXG4gICAgc3RuRGVsZXRlRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5pbmcnLCBldmVudCA9PiB7XHJcbiAgICAgICAgdmFyIHN0bklkID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2ZvcicpO1xyXG4gICAgICAgICQoJyNzdG5fZGVsZXRlX2RpYWcgI2Vycl9zdG4nKS50ZXh0KGdldFBhcmFtcygpLnN0bl9saXN0W3N0bklkXS5uYW1lLmpvaW4oJyAtICcpKTtcclxuICAgIH0pO1xyXG4gICAgc3RuRGVsZXRlRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOmNsb3NlZCcsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5hY3Rpb24gPT0gJ2Nsb3NlJykge3JldHVybjt9XHJcbiAgICAgICAgdmFyIHN0bklkID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2ZvcicpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBmcm9tIGRhdGEgYW5kIHN2Z1xyXG4gICAgICAgIGlmICh3aW5kb3cubXlMaW5lLnJlbW92ZVN0bihzdG5JZCkpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHN0YXRpb24gZnJvbSBzZWxlY3Rpb25cclxuICAgICAgICAgICAgJChgI3BhbmVsX3N0YXRpb25zIC5tZGMtbGF5b3V0LWdyaWRfX2lubmVyICMke3N0bklkfWApLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAkKGAjcGl2b3RfX3NlbGVjdGlvbiBbZGF0YS12YWx1ZT1cIiR7c3RuSWR9XCJdYCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RuRGVsZXRlRXJyRGlhbG9nLm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsImltcG9ydCAqIGFzIGluaXRTYXZlIGZyb20gJy4vUGFnZUluaXRpYWxpc2VyL3NhdmUnO1xyXG5pbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCB7IFJNR0xpbmUgfSBmcm9tICcuL0xpbmUvTGluZSc7XHJcbmltcG9ydCBpbml0TGluZSBmcm9tICcuL0xpbmUvaW5pdCc7XHJcbmltcG9ydCBpbml0UGFuZWxzIGZyb20gJy4vUGFnZUluaXRpYWxpc2VyL2luaXQnO1xyXG5pbXBvcnQgeyBnZXRQYXJhbXMgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIG15TGluZT86IFJNR0xpbmU7XHJcbiAgICAgICAgdXJsUGFyYW1zPzogVVJMU2VhcmNoUGFyYW1zO1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgcmVxdWVzdExhbmcgPSB3aW5kb3cudXJsUGFyYW1zLmdldCgnbGFuZycpIHx8IGxvY2FsU3RvcmFnZS5ybWdMYW5nIHx8IG5hdmlnYXRvci5sYW5ndWFnZS5zcGxpdCgnLScpLnNsaWNlKDAsMikuam9pbignLScpO1xyXG5zd2l0Y2ggKHJlcXVlc3RMYW5nLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgIGNhc2UgJ3poLWNuJzpcclxuICAgIGNhc2UgJ3poLWhhbnMnOlxyXG4gICAgICAgIHdpbmRvdy51cmxQYXJhbXMuc2V0KCdsYW5nJywgJ3poLUhhbnMnKTtcclxuICAgICAgICBicmVhaztcclxuICAgIGNhc2UgJ3poJzpcclxuICAgIGNhc2UgJ3poLWhrJzpcclxuICAgIGNhc2UgJ3poLXR3JzpcclxuICAgICAgICB3aW5kb3cudXJsUGFyYW1zLnNldCgnbGFuZycsICd6aC1ISycpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDogd2luZG93LnVybFBhcmFtcy5zZXQoJ2xhbmcnLCAnZW4nKTtcclxufVxyXG5cclxuc3dpdGNoICh3aW5kb3cudXJsUGFyYW1zLmdldCgnc3R5bGUnKSkge1xyXG4gICAgY2FzZSAnbXRyJzpcclxuICAgIGNhc2UgJ2d6bXRyJzpcclxuICAgIGNhc2UgJ3NobWV0cm8nOlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDogd2luZG93LnVybFBhcmFtcy5zZXQoJ3N0eWxlJywgJ210cicpO1xyXG59XHJcbmhpc3RvcnkucHVzaFN0YXRlKHt1cmw6d2luZG93LmxvY2F0aW9uLmhyZWZ9LCBudWxsLCAnPycgKyB3aW5kb3cudXJsUGFyYW1zLnRvU3RyaW5nKCkpO1xyXG5cclxuLy8gbG9hZCBzdHlsZXNoZWV0cyBvbiBkZW1hbmRcclxuJCgnaGVhZCcpLmFwcGVuZChcclxuICAgIC4uLlsnc2hhcmUnLCAnZGVzdGluYXRpb24nLCAncmFpbG1hcCddXHJcbiAgICAgICAgLm1hcCh0YWcgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gJCgnPGxpbms+Jywge1xyXG4gICAgICAgICAgICAgICAgcmVsOiAnc3R5bGVzaGVldCcsIFxyXG4gICAgICAgICAgICAgICAgaHJlZjogYHN0eWxlcy8ke3RhZ31fJHt3aW5kb3cudXJsUGFyYW1zLmdldCgnc3R5bGUnKX0uY3NzYCwgXHJcbiAgICAgICAgICAgICAgICBpZDogYGNzc18ke3RhZ31gXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuKTtcclxuXHJcbndpbmRvdy5teUxpbmUgPSBudWxsO1xyXG4kKGBbJHt3aW5kb3cudXJsUGFyYW1zLmdldCgnc3R5bGUnKX0tc3BlY2lmaWNdYCkuc2hvdygpO1xyXG4vLyBhdXRvSW5pdCgpO1xyXG5pbml0U2F2ZS5jb21tb24oKTtcclxuXHJcbmluaXRMaW5lKCk7XHJcbmluaXRQYW5lbHMoKTsiLCJpbXBvcnQgeyBnZXRQYXJhbXMsIGdldFRyYW5zVGV4dCwgdGVzdCwgZGVzY3JpYmVQYXJhbXMsIFJNR1BhcmFtIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBSTUdMaW5lIH0gZnJvbSAnLi4vTGluZS9MaW5lJztcclxuaW1wb3J0IHsgTURDRGlhbG9nIH0gZnJvbSAnQG1hdGVyaWFsL2RpYWxvZyc7XHJcbmltcG9ydCB7IE1EQ0xpc3QgfSBmcm9tICdAbWF0ZXJpYWwvbGlzdCc7XHJcbmltcG9ydCB7IE1EQ1JpcHBsZSB9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgdXJsUGFyYW1zPzogVVJMU2VhcmNoUGFyYW1zO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tbW9uKCkgeyAgICBcclxuICAgIC8vIG1kYyBpbnRhbmNlcyBcclxuICAgIGNvbnN0IFt0ZW1wbGF0ZURpYWxvZywgaW1wb3J0RGlhbG9nLCBleHBvcnREaWFsb2csIHByZXZpZXdEaWFsb2csIHN0eWxlRGlhbG9nLCBsYW5nRGlhbG9nXSA9IFxyXG4gICAgICAgIFsnI3RlbXBsYXRlX2RpYWcnLCAnI2ltcG9ydF9kaWFnJywgJyNleHBvcnRfZGlhZycsICcjcHJldmlld19kaWFnJywgJyNzdHlsZV9kaWFnJywgJyNsYW5nX2RpYWcnXVxyXG4gICAgICAgICAgICAubWFwKHNlbGVjdG9yID0+IE1EQ0RpYWxvZy5hdHRhY2hUbygkKHNlbGVjdG9yKVswXSkpO1xyXG4gICAgY29uc3QgW3NhdmVMaXN0MCwgc2F2ZUxpc3QxXSA9ICQoJyNwYW5lbF9zYXZlIC5tZGMtbGlzdCcpLm1hcCgoXyxlbCkgPT4gTURDTGlzdC5hdHRhY2hUbyhlbCkpLmdldCgpO1xyXG4gICAgJCgnI3BhbmVsX3NhdmUgLm1kYy1saXN0IGxpJykubWFwKChfLGVsKSA9PiBuZXcgTURDUmlwcGxlKGVsKSk7XHJcblxyXG4gICAgc2F2ZUxpc3QwLmxpc3RlbignTURDTGlzdDphY3Rpb24nLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC5kZXRhaWwuaW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICQoJyN1cGxvYWRfZmlsZScpLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgLy8gdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgICAgICAgICAvLyB2YXIgZGF0YSA9IG5ldyBCbG9iKFtsb2NhbFN0b3JhZ2Uucm1nUGFyYW1dLCB7dHlwZTogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCd9KTtcclxuICAgICAgICAgICAgICAgIC8vIHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTtcclxuICAgICAgICAgICAgICAgIC8vIGxpbmsuaHJlZiA9IHVybDtcclxuICAgICAgICAgICAgICAgIC8vIGxpbmsuZG93bmxvYWQgPSAncm1nX2NvbmZpZy5qc29uJztcclxuICAgICAgICAgICAgICAgIC8vIGxpbmsuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIC8vIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcclxuICAgICAgICAgICAgICAgIC8vIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmsgPSAkKCc8YT4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogJ2RhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJytidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChsb2NhbFN0b3JhZ2Uucm1nUGFyYW0pKSksIFxyXG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiAncm1nX3BhcmFtLmpzb24nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxpbmtbMF0uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBleHBvcnREaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI3BhbmVsX3NhdmUgLm1kYy1saXN0Om50aC1jaGlsZCgyKSBsaTpmaXJzdC1jaGlsZCBzcGFuOm50aC1jaGlsZCgyKSBzcGFuOmxhc3QtY2hpbGQnKVxyXG4gICAgICAgIC5hdHRyKCd0cmFucy10YWcnLCAkKGAjc3R5bGVfZGlhZyBbZGF0YS1tZGMtZGlhbG9nLWFjdGlvbj1cIiR7d2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJyl9XCJdIHNwYW5gKS5hdHRyKCd0cmFucy10YWcnKSlcclxuICAgICAgICAudGV4dCgkKGAjc3R5bGVfZGlhZyBbZGF0YS1tZGMtZGlhbG9nLWFjdGlvbj1cIiR7d2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJyl9XCJdIHNwYW5gKS50ZXh0KCkpO1xyXG5cclxuICAgICQoJyNwYW5lbF9zYXZlIC5tZGMtbGlzdDpudGgtY2hpbGQoMikgbGk6bnRoLWNoaWxkKDIpIHNwYW46bnRoLWNoaWxkKDIpIHNwYW46bGFzdC1jaGlsZCcpXHJcbiAgICAgICAgLnRleHQoJChgI2xhbmdfZGlhZyBbZGF0YS1tZGMtZGlhbG9nLWFjdGlvbj1cIiR7d2luZG93LnVybFBhcmFtcy5nZXQoJ2xhbmcnKX1cIl0gc3BhbmApLnRleHQoKSk7XHJcbiAgICAgICAgXHJcbiAgICBzYXZlTGlzdDEubGlzdGVuKCdNRENMaXN0OmFjdGlvbicsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC5kZXRhaWwuaW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgc3R5bGVEaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGxhbmdEaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5nZXRKU09OKCd0ZW1wbGF0ZXMvdGVtcGxhdGVfbGlzdC5qc29uJywgZGF0YSA9PiB7XHJcbiAgICAgICAgdmFyIGxhbmcgPSB3aW5kb3cudXJsUGFyYW1zLmdldCgnbGFuZycpO1xyXG4gICAgICAgIGRhdGEuZm9yRWFjaChkID0+IHtcclxuICAgICAgICAgICAgJCgnI3RlbXBsYXRlX2RpYWcgdWwnKS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAkKCc8bGk+Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcIm1kYy1saXN0LWl0ZW1cIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtbWRjLWRpYWxvZy1hY3Rpb24nOiBkLmZpbGVuYW1lXHJcbiAgICAgICAgICAgICAgICB9KS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnPHNwYW4+JywgeyBjbGFzczogXCJtZGMtbGlzdC1pdGVtX190ZXh0XCIgfSkudGV4dChnZXRUcmFuc1RleHQoZC5kZXNjLCBsYW5nKSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnI3RlbXBsYXRlX2RpYWcgbGk6Zmlyc3QtY2hpbGQnKS5hdHRyKCd0YWJpbmRleCcsIDApO1xyXG4gICAgICAgICQoJyN0aGVtZV9saW5lX19zZWxlY3Rpb24gbGknKS5tYXAoKF8sZWwpID0+IG5ldyBNRENSaXBwbGUoZWwpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlbXBsYXRlRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOmNsb3NlZCcsIChldmVudDogQ3VzdG9tRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmFjdGlvbiA9PSAnY2xvc2UnKSB7cmV0dXJuO31cclxuICAgICAgICBcclxuICAgICAgICAkLmdldEpTT04oYHRlbXBsYXRlcy8ke2V2ZW50LmRldGFpbC5hY3Rpb259Lmpzb25gLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJtZ1BhcmFtID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cG9ydERpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpjbG9zZWQnLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC5kZXRhaWwuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Nsb3NlJzpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdzdmcxJzpcclxuICAgICAgICAgICAgICAgICQoJyNwcmV2aWV3X2RpYWcnKS5hdHRyKCdmb3InLCAnZGVzdGluYXRpb24nKTtcclxuICAgICAgICAgICAgICAgIHByZXZpZXdEaWFsb2cub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N2ZzInOlxyXG4gICAgICAgICAgICAgICAgJCgnI3ByZXZpZXdfZGlhZycpLmF0dHIoJ2ZvcicsICdyYWlsbWFwJyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2aWV3RGlhbG9nLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQod2luZG93KS5vbigncmVzaXplJywgXyA9PiB7XHJcbiAgICAgICAgcmVzaXplU1ZHUHJldmlldygpO1xyXG4gICAgICAgIC8vICQoJyNwcmV2aWV3X2RpYWcgLm1kYy1kaWFsb2dfX3N1cmZhY2UnKS5hdHRyKCdzdHlsZScsIGBtYXgtd2lkdGg6JHskKHdpbmRvdykud2lkdGgoKS0zMn1weDtgKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzaXplU1ZHUHJldmlldyA9ICgpID0+IHtcclxuICAgICAgICB2YXIgc3ZnSWQgPSAkKCdwcmV2aWV3X2RpYWcnKS5hdHRyKCdmb3InKTtcclxuICAgICAgICB2YXIgW3RoaXNTVkdXaWR0aCwgdGhpc1NWR0hlaWdodF0gPSBbXHJcbiAgICAgICAgICAgIHN2Z0lkPT0nZGVzdGluYXRpb24nID8gZ2V0UGFyYW1zKCkuc3ZnX2Rlc3Rfd2lkdGggOiBnZXRQYXJhbXMoKS5zdmdfd2lkdGgsIFxyXG4gICAgICAgICAgICBnZXRQYXJhbXMoKS5zdmdfaGVpZ2h0XHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICB2YXIgTUFYX1dJRFRIID0gJCh3aW5kb3cpLndpZHRoKCkgLSAzMiAtIDUwO1xyXG4gICAgICAgIHZhciBNQVhfSEVJR0hUID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gNjAgLSA1MyAtIDYwO1xyXG4gICAgICAgIHZhciBzY2FsZUZhY3RvciA9IE1hdGgubWluKE1BWF9XSURUSC90aGlzU1ZHV2lkdGgsIE1BWF9IRUlHSFQvdGhpc1NWR0hlaWdodCk7XHJcblxyXG4gICAgICAgICQoJyNwcmV2aWV3X2RpYWcnKVxyXG4gICAgICAgICAgICAuZmluZCgnc3ZnJylcclxuICAgICAgICAgICAgLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXNTVkdXaWR0aCAqIHNjYWxlRmFjdG9yLCBcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpc1NWR0hlaWdodCAqIHNjYWxlRmFjdG9yXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjcHJldmlld19kaWFnJylcclxuICAgICAgICAgICAgLmZpbmQoJy5tZGMtZGlhbG9nX19zdXJmYWNlJylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0eWxlJywgYG1heC13aWR0aDoke01BWF9XSURUSCs1MH1weDtgKTtcclxuICAgIH1cclxuICAgIHByZXZpZXdEaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6b3BlbmVkJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHZhciBzdmdJZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdmb3InKTtcclxuICAgICAgICB2YXIgW3RoaXNTVkdXaWR0aCwgdGhpc1NWR0hlaWdodF0gPSBbXHJcbiAgICAgICAgICAgIHN2Z0lkPT0nZGVzdGluYXRpb24nID8gZ2V0UGFyYW1zKCkuc3ZnX2Rlc3Rfd2lkdGggOiBnZXRQYXJhbXMoKS5zdmdfd2lkdGgsIFxyXG4gICAgICAgICAgICBnZXRQYXJhbXMoKS5zdmdfaGVpZ2h0XHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICAkKCcjcHJldmlld19kaWFnIC5tZGMtZGlhbG9nX19zdXJmYWNlJykuYXR0cignc3R5bGUnLCBgbWF4LXdpZHRoOiR7JCh3aW5kb3cpLndpZHRoKCktMzJ9cHg7YCk7XHJcblxyXG4gICAgICAgIHZhciBNQVhfV0lEVEggPSAkKHdpbmRvdykud2lkdGgoKSAtIDMyIC0gNTA7XHJcbiAgICAgICAgdmFyIE1BWF9IRUlHSFQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSA2MCAtIDUzIC0gNjA7XHJcbiAgICAgICAgdmFyIHNjYWxlRmFjdG9yID0gTWF0aC5taW4oTUFYX1dJRFRIL3RoaXNTVkdXaWR0aCwgTUFYX0hFSUdIVC90aGlzU1ZHSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgJChldmVudC50YXJnZXQpLmZpbmQoJy5tZGMtZGlhbG9nX19jb250ZW50JylcclxuICAgICAgICAgICAgLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICQoJyMnKyQoZXZlbnQudGFyZ2V0KS5hdHRyKCdmb3InKSkuY2xvbmUoKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2FsbDppbml0aWFsOycsIFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6IGAwIDAgJHt0aGlzU1ZHV2lkdGh9ICR7dGhpc1NWR0hlaWdodH1gLCBcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpc1NWR1dpZHRoICogc2NhbGVGYWN0b3IsIFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpc1NWR0hlaWdodCAqIHNjYWxlRmFjdG9yXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgY3NzVHh0ID0gWydzaGFyZScsICQoZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5maW5kKCdzdmcnKVswXS5pZF1cclxuICAgICAgICAgICAgLm1hcCh0YWcgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oXHJcbiAgICAgICAgICAgICAgICAgICAgKCg8SFRNTExpbmtFbGVtZW50PiQoYGxpbmsjY3NzXyR7dGFnfWApWzBdKS5zaGVldCBhcyBDU1NTdHlsZVNoZWV0KS5jc3NSdWxlc1xyXG4gICAgICAgICAgICAgICAgKS5tYXAocnVsZSA9PiBydWxlLmNzc1RleHQpLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgJChldmVudC50YXJnZXQpLmZpbmQoJ3N2ZycpLnByZXBlbmQoLi4uY3NzVHh0Lm1hcCh0eHQgPT4gJCgnPHN0eWxlPicpLnRleHQodHh0KSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICQoZXZlbnQudGFyZ2V0KS5maW5kKCdzdmcgW3N0eWxlPVwiZGlzcGxheTogbm9uZTtcIl0nKS5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG4gICAgcHJldmlld0RpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpjbG9zZWQnLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5hY3Rpb24gPT09ICdjbG9zZScpIHtcclxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnJlbW92ZUF0dHIoJ2ZvcicpLmZpbmQoJy5tZGMtZGlhbG9nX19jb250ZW50JykuZW1wdHkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5hY3Rpb24gPT09ICdwbmcnKSB7XHJcbiAgICAgICAgICAgIHRlc3QoJChldmVudC50YXJnZXQpLnJlbW92ZUF0dHIoJ2ZvcicpLmZpbmQoJ3N2ZycpKTtcclxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmZpbmQoJy5tZGMtZGlhbG9nX19jb250ZW50JykuZW1wdHkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5hY3Rpb24gPT09ICdzdmcnKSB7XHJcbiAgICAgICAgICAgIC8vIFByZXBlbmQgY3NzIHN0eWxlc2hlZXQgdG8gc3ZnXHJcbiAgICAgICAgICAgIGxldCBzdmdDb250ZW50ID0gJChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmZpbmQoJy5tZGMtZGlhbG9nX19jb250ZW50IHN2ZycpO1xyXG4gICAgICAgICAgICAvLyBsZXQgY3NzVHh0ID0gWydzaGFyZScsIHN2Z0NvbnRlbnRbMF0uaWRdXHJcbiAgICAgICAgICAgIC8vICAgICAubWFwKHRhZyA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICgoPEhUTUxMaW5rRWxlbWVudD4kKGBsaW5rI2Nzc18ke3RhZ31gKVswXSkuc2hlZXQgYXMgQ1NTU3R5bGVTaGVldCkuY3NzUnVsZXNcclxuICAgICAgICAgICAgLy8gICAgICAgICApLm1hcChydWxlID0+IHJ1bGUuY3NzVGV4dCkuam9pbignICcpO1xyXG4gICAgICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHN2Z0NvbnRlbnQucHJlcGVuZChcclxuICAgICAgICAgICAgLy8gICAgIC4uLmNzc1R4dC5tYXAodHh0ID0+ICQoJzxzdHlsZT4nKS50ZXh0KHR4dCkpXHJcbiAgICAgICAgICAgIC8vICk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgbGluay5ocmVmID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN2Z0NvbnRlbnRbMF0ub3V0ZXJIVE1MKSkpO1xyXG4gICAgICAgICAgICBsaW5rLmRvd25sb2FkID0gJ3JtZ19leHBvcnQuc3ZnJztcclxuICAgICAgICAgICAgbGluay5jbGljaygpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5yZW1vdmVBdHRyKCdmb3InKS5maW5kKCcubWRjLWRpYWxvZ19fY29udGVudCcpLmVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IGltcG9ydGVkRmlsZTogUk1HUGFyYW07XHJcbiAgICAoJCgnI3VwbG9hZF9maWxlJykgYXMgSlF1ZXJ5PEhUTUxJbnB1dEVsZW1lbnQ+KVxyXG4gICAgICAgIC5vbignY2hhbmdlJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQuZmlsZXNbMF0pO1xyXG4gICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGltcG9ydGVkRmlsZSA9IEpTT04ucGFyc2UoZS50YXJnZXQucmVzdWx0IGFzIHVua25vd24gYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICQoJyNpbXBvcnRfZGlhZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5tZGMtZGlhbG9nX19jb250ZW50JylcclxuICAgICAgICAgICAgICAgICAgICAuaHRtbChkZXNjcmliZVBhcmFtcyhpbXBvcnRlZEZpbGUpKTtcclxuICAgICAgICAgICAgICAgIGltcG9ydERpYWxvZy5vcGVuKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGV2ZW50LnRhcmdldC5maWxlc1swXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBpbXBvcnREaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6Y2xvc2VkJywgKGV2ZW50OiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5kZXRhaWwuYWN0aW9uID09ICdjbG9zZScpIHtcclxuICAgICAgICAgICAgKCQoJyN1cGxvYWRfZmlsZScpWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFJNR0xpbmUuY2xlYXJTVkcoKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uucm1nUGFyYW0gPSBKU09OLnN0cmluZ2lmeShpbXBvcnRlZEZpbGUpO1xyXG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN0eWxlRGlhbG9nLmxpc3RlbignTURDRGlhbG9nOmNsb3NlZCcsIChldmVudDogQ3VzdG9tRXZlbnQpID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRldGFpbC5hY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSAnY2xvc2UnOiBcclxuICAgICAgICAgICAgY2FzZSB3aW5kb3cudXJsUGFyYW1zLmdldCgnc3R5bGUnKTpcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHdpbmRvdy51cmxQYXJhbXMuc2V0KCdzdHlsZScsIGV2ZW50LmRldGFpbC5hY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnPycgKyB3aW5kb3cudXJsUGFyYW1zLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGFuZ0RpYWxvZy5saXN0ZW4oJ01EQ0RpYWxvZzpjbG9zZWQnLCAoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5hY3Rpb24gPT0gJ2Nsb3NlJykge3JldHVybjt9XHJcbiAgICAgICAgdmFyIG5leHRMYW5nID0gZXZlbnQuZGV0YWlsLmFjdGlvbjtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uucm1nTGFuZyA9IG5leHRMYW5nO1xyXG4gICAgICAgIGlmIChuZXh0TGFuZyA9PSB3aW5kb3cudXJsUGFyYW1zLmdldCgnbGFuZycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cudXJsUGFyYW1zLnNldCgnbGFuZycsIG5leHRMYW5nKTtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnPycgKyB3aW5kb3cudXJsUGFyYW1zLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSIsImltcG9ydCAqIGFzIGluaXRMYXlvdXQgZnJvbSAnLi9sYXlvdXQnO1xyXG5pbXBvcnQgKiBhcyBpbml0RGVzaWduIGZyb20gJy4vZGVzaWduJztcclxuaW1wb3J0ICogYXMgaW5pdFN0YXRpb25zIGZyb20gJy4vc3RhdGlvbnMnO1xyXG5pbXBvcnQgKiBhcyBpbml0SW5mbyBmcm9tICcuL2luZm8nO1xyXG5pbXBvcnQgeyBNRENUYWJCYXIgfSBmcm9tICdAbWF0ZXJpYWwvdGFiLWJhcic7XHJcbmltcG9ydCB7IE1EQ1NsaWRlciB9IGZyb20gJ0BtYXRlcmlhbC9zbGlkZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgXHJcbmxldCBmaXJzdEluaXQgPSBbZmFsc2UsIHRydWUsIHRydWUsIHRydWUsIHRydWVdO1xyXG53aW5kb3cuc2xpZGVycyA9IFtdIGFzIE1EQ1NsaWRlcltdO1xyXG5cclxuTURDVGFiQmFyLmF0dGFjaFRvKCQoJyNwYW5lbHMgLm1kYy10YWItYmFyJylbMF0pLmxpc3RlbignTURDVGFiQmFyOmFjdGl2YXRlZCcsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAkKCcucGFuZWwtLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdwYW5lbC0tYWN0aXZlJyk7XHJcbiAgICAkKCcucGFuZWwnKS5lcShldmVudC5kZXRhaWwuaW5kZXgpLmFkZENsYXNzKCdwYW5lbC0tYWN0aXZlJyk7XHJcblxyXG4gICAgaWYgKGV2ZW50LmRldGFpbC5pbmRleCA9PSAxICYmIGZpcnN0SW5pdFsxXSkge1xyXG4gICAgICAgIGluaXRMYXlvdXQuY29tbW9uKCk7XHJcbiAgICAgICAgaWYgKHdpbmRvdy51cmxQYXJhbXMuZ2V0KCdzdHlsZScpID09PSAnZ3ptdHInKSB7XHJcbiAgICAgICAgICAgIGluaXRMYXlvdXQuZ3ptdHIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmlyc3RJbml0WzFdID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQuZGV0YWlsLmluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgd2luZG93LnNsaWRlcnMuZm9yRWFjaChzbGlkZXIgPT4gc2xpZGVyLmxheW91dCgpKTtcclxuICAgIH1cclxuICAgIGlmIChldmVudC5kZXRhaWwuaW5kZXggPT0gMiAmJiBmaXJzdEluaXRbMl0pIHtcclxuICAgICAgICBpbml0RGVzaWduLmNvbW1vbigpO1xyXG4gICAgICAgIHN3aXRjaCAod2luZG93LnVybFBhcmFtcy5nZXQoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgY2FzZSAnbXRyJzpcclxuICAgICAgICAgICAgICAgIGluaXREZXNpZ24ubXRyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ3ptdHInOlxyXG4gICAgICAgICAgICAgICAgaW5pdERlc2lnbi5nem10cigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpcnN0SW5pdFsyXSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGV2ZW50LmRldGFpbC5pbmRleCA9PSAzICYmIGZpcnN0SW5pdFszXSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0IGFnYWluJyk7XHJcbiAgICAgICAgaW5pdFN0YXRpb25zLmNvbW1vbigpO1xyXG4gICAgICAgIGZpcnN0SW5pdFszXSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGV2ZW50LmRldGFpbC5pbmRleCA9PSA0ICYmIGZpcnN0SW5pdFs0XSkge1xyXG4gICAgICAgIGluaXRJbmZvLmNvbW1vbigpO1xyXG4gICAgICAgIGZpcnN0SW5pdFs0XSA9IGZhbHNlO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCB7IGdldFBhcmFtcyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgUk1HTGluZUdaIH0gZnJvbSAnLi4vTGluZS9MaW5lR1onO1xyXG5pbXBvcnQgeyBNRENUZXh0RmllbGQgfSBmcm9tICdAbWF0ZXJpYWwvdGV4dGZpZWxkJztcclxuaW1wb3J0IHsgTURDU2xpZGVyIH0gZnJvbSAnQG1hdGVyaWFsL3NsaWRlcic7XHJcbmltcG9ydCB7IFJNR0xpbmUgfSBmcm9tICcuLi9MaW5lL0xpbmUnO1xyXG5pbXBvcnQgeyBNRENSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlJztcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIG15TGluZT86IFJNR0xpbmU7XHJcbiAgICAgICAgc2xpZGVycz86IE1EQ1NsaWRlcltdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tbW9uKCkge1xyXG4gICAgLy8gbWRjIGluc3RhbmNlc1xyXG4gICAgY29uc3QgW3N2Z0Rlc3RXaWR0aFRleHRGaWVsZCwgc3ZnV2lkdGhUZXh0RmllbGRdID0gXHJcbiAgICAgICAgWycjc3ZnX2Rlc3Rfd2lkdGgnLCAnI3N2Z193aWR0aCddLm1hcChzZWxlY3RvciA9PiBNRENUZXh0RmllbGQuYXR0YWNoVG8oJChzZWxlY3RvcilbMF0pKTtcclxuXHJcbiAgICBjb25zdCBbYnJhbmNoU3BhY2luZ1NsaWRlciwgeVBjU2xpZGVyLCBwYWRkaW5nU2xpZGVyXSA9IFxyXG4gICAgICAgIFsnI2JyYW5jaF9zcGFjaW5nJywgJyN5X3BjJywgJyNwYWRkaW5nJ10ubWFwKHNlbGVjdG9yID0+IE1EQ1NsaWRlci5hdHRhY2hUbygkKHNlbGVjdG9yKVswXSkpO1xyXG4gICAgd2luZG93LnNsaWRlcnMucHVzaChicmFuY2hTcGFjaW5nU2xpZGVyLCB5UGNTbGlkZXIsIHBhZGRpbmdTbGlkZXIpO1xyXG4gICAgJCgnI3BhbmVsX2xheW91dCAubWRjLWxpc3QgbGknKS5tYXAoKF8sZWwpID0+IG5ldyBNRENSaXBwbGUoZWwpKTtcclxuXHJcbiAgICAvLyBpbml0IHZhbHVlc1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKGdldFBhcmFtcygpKVxyXG4gICAgICAgIC50aGVuKHBhcmFtID0+IHtcclxuICAgICAgICAgICAgc3ZnRGVzdFdpZHRoVGV4dEZpZWxkLnZhbHVlID0gcGFyYW0uc3ZnX2Rlc3Rfd2lkdGg7XHJcbiAgICAgICAgICAgIHN2Z1dpZHRoVGV4dEZpZWxkLnZhbHVlID0gcGFyYW0uc3ZnX3dpZHRoO1xyXG4gICAgICAgICAgICB5UGNTbGlkZXIudmFsdWUgPSBwYXJhbS55X3BjO1xyXG4gICAgICAgICAgICBicmFuY2hTcGFjaW5nU2xpZGVyLnZhbHVlID0gcGFyYW0uYnJhbmNoX3NwYWNpbmc7XHJcbiAgICAgICAgICAgIHBhZGRpbmdTbGlkZXIudmFsdWUgPSBwYXJhbS5wYWRkaW5nO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICgkKHN2Z0Rlc3RXaWR0aFRleHRGaWVsZC5yb290XykuZmluZCgnaW5wdXQnKSBhcyBKUXVlcnk8SFRNTElucHV0RWxlbWVudD4pXHJcbiAgICAgICAgLm9uKCdpbnB1dCcsIGV2ZW50ID0+IHdpbmRvdy5teUxpbmUuc3ZnRGVzdFdpZHRoID0gTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSkpO1xyXG5cclxuICAgICgkKHN2Z1dpZHRoVGV4dEZpZWxkLnJvb3RfKS5maW5kKCdpbnB1dCcpIGFzIEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50PilcclxuICAgICAgICAub24oJ2lucHV0JywgZXZlbnQgPT4gd2luZG93Lm15TGluZS5zdmdXaWR0aCA9IE51bWJlcihldmVudC50YXJnZXQudmFsdWUpKTtcclxuXHJcbiAgICBicmFuY2hTcGFjaW5nU2xpZGVyLmxpc3RlbignTURDU2xpZGVyOmlucHV0JywgKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5teUxpbmUuYnJhbmNoU3BhY2luZyA9IE51bWJlcihicmFuY2hTcGFjaW5nU2xpZGVyLnZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHlQY1NsaWRlci5saXN0ZW4oJ01EQ1NsaWRlcjppbnB1dCcsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cubXlMaW5lLnlQYyA9IE51bWJlcih5UGNTbGlkZXIudmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcGFkZGluZ1NsaWRlci5saXN0ZW4oJ01EQ1NsaWRlcjppbnB1dCcsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cubXlMaW5lLnBhZGRpbmcgPSBOdW1iZXIocGFkZGluZ1NsaWRlci52YWx1ZSk7XHJcbiAgICB9KTsgICAgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnem10cigpIHtcclxuICAgIC8vIG1kYyBpbnN0YW5jZXNcclxuICAgIGNvbnN0IFtkaXJlY3Rpb25HWlhTbGlkZXIsIGRpcmVjdGlvbkdaWVNsaWRlcl0gPVxyXG4gICAgICAgIFsnI2RpcmVjdGlvbl9nel94JywgJyNkaXJlY3Rpb25fZ3pfeSddXHJcbiAgICAgICAgICAgIC5tYXAoc2VsZWN0b3IgPT4gTURDU2xpZGVyLmF0dGFjaFRvKCQoc2VsZWN0b3IpWzBdKSk7XHJcbiAgICB3aW5kb3cuc2xpZGVycy5wdXNoKGRpcmVjdGlvbkdaWFNsaWRlciwgZGlyZWN0aW9uR1pZU2xpZGVyKTtcclxuXHJcbiAgICAvLyBpbml0IHZhbHVlc1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKGdldFBhcmFtcygpKVxyXG4gICAgICAgIC50aGVuKHBhcmFtID0+IHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uR1pYU2xpZGVyLnZhbHVlID0gcGFyYW0uZGlyZWN0aW9uX2d6X3g7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbkdaWVNsaWRlci52YWx1ZSA9IHBhcmFtLmRpcmVjdGlvbl9nel95O1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICBkaXJlY3Rpb25HWlhTbGlkZXIubGlzdGVuKCdNRENTbGlkZXI6aW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgKDxSTUdMaW5lR1o+d2luZG93Lm15TGluZSkuZGlyZWN0aW9uR1pYID0gTnVtYmVyKGRpcmVjdGlvbkdaWFNsaWRlci52YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkaXJlY3Rpb25HWllTbGlkZXIubGlzdGVuKCdNRENTbGlkZXI6aW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgKDxSTUdMaW5lR1o+d2luZG93Lm15TGluZSkuZGlyZWN0aW9uR1pZID0gTnVtYmVyKGRpcmVjdGlvbkdaWVNsaWRlci52YWx1ZSk7XHJcbiAgICB9KTtcclxufSIsImV4cG9ydCBmdW5jdGlvbiBjb21tb24oKSB7XHJcbiAgICAkKCcjcGFuZWxfaW5mbyAubWRjLWNhcmRfX2FjdGlvbnMgI3JlcG9ydCcpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cub3BlbignaHR0cHM6Ly9naXRodWIuY29tL3dvbmdjaGl0by9SYWlsTWFwR2VuZXJhdG9yL2lzc3VlcycsICdfYmxhbmsnKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI3BhbmVsX2luZm8gLm1kYy1jYXJkX19hY3Rpb24taWNvbnMgW3RpdGxlPVwiU3RhclwiXScpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cub3BlbignaHR0cHM6Ly9naXRodWIuY29tL3dvbmdjaGl0by9SYWlsTWFwR2VuZXJhdG9yJywgJ19ibGFuaycpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcjcGFuZWxfaW5mbyAubWRjLWNhcmRfX2FjdGlvbi1pY29ucyBbdGl0bGU9XCJGb3JrXCJdJykub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL2dpdGh1Yi5jb20vd29uZ2NoaXRvL1JhaWxNYXBHZW5lcmF0b3IvZm9yaycsICdfYmxhbmsnKTtcclxuICAgIH0pO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==