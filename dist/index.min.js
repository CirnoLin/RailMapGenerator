/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"index": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"LineGZ":"LineGZ","LineSH":"LineSH"}[chunkId]||chunkId) + ".min.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@material/base/component.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/base/component.js ***!
  \**************************************************/
/*! exports provided: MDCComponent, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCComponent", function() { return MDCComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/base/foundation.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


var MDCComponent = /** @class */ (function () {
    function MDCComponent(root, foundation) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this.root_ = root;
        this.initialize.apply(this, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](args));
        // Note that we initialize foundation here and not within the constructor's default param so that
        // this.root_ is defined and can be used within the foundation class.
        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
        this.foundation_.init();
        this.initialSyncWithDOM();
    }
    MDCComponent.attachTo = function (root) {
        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
        // returns an instantiated component with its root set to that element. Also note that in the cases of
        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
        // from getDefaultFoundation().
        return new MDCComponent(root, new _foundation__WEBPACK_IMPORTED_MODULE_1__["MDCFoundation"]({}));
    };
    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
    MDCComponent.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        // Subclasses can override this to do any additional setup work that would be considered part of a
        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
        // initialized. Any additional arguments besides root and foundation will be passed in here.
    };
    MDCComponent.prototype.getDefaultFoundation = function () {
        // Subclasses must override this method to return a properly configured foundation class for the
        // component.
        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
            'foundation class');
    };
    MDCComponent.prototype.initialSyncWithDOM = function () {
        // Subclasses should override this method if they need to perform work to synchronize with a host DOM
        // object. An example of this would be a form control wrapper that needs to synchronize its internal state
        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    };
    MDCComponent.prototype.destroy = function () {
        // Subclasses may implement this method to release any resources / deregister any listeners they have
        // attached. An example of this might be deregistering a resize event from the window object.
        this.foundation_.destroy();
    };
    MDCComponent.prototype.listen = function (evtType, handler, options) {
        this.root_.addEventListener(evtType, handler, options);
    };
    MDCComponent.prototype.unlisten = function (evtType, handler, options) {
        this.root_.removeEventListener(evtType, handler, options);
    };
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
     */
    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
        if (shouldBubble === void 0) { shouldBubble = false; }
        var evt;
        if (typeof CustomEvent === 'function') {
            evt = new CustomEvent(evtType, {
                bubbles: shouldBubble,
                detail: evtData,
            });
        }
        else {
            evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
        }
        this.root_.dispatchEvent(evt);
    };
    return MDCComponent;
}());

// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (MDCComponent);
//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/@material/base/foundation.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/base/foundation.js ***!
  \***************************************************/
/*! exports provided: MDCFoundation, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCFoundation", function() { return MDCFoundation; });
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCFoundation = /** @class */ (function () {
    function MDCFoundation(adapter) {
        if (adapter === void 0) { adapter = {}; }
        this.adapter_ = adapter;
    }
    Object.defineProperty(MDCFoundation, "cssClasses", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports every
            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
        get: function () {
            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
            // validation.
            return {};
        },
        enumerable: true,
        configurable: true
    });
    MDCFoundation.prototype.init = function () {
        // Subclasses should override this method to perform initialization routines (registering events, etc.)
    };
    MDCFoundation.prototype.destroy = function () {
        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };
    return MDCFoundation;
}());

// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (MDCFoundation);
//# sourceMappingURL=foundation.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip-set/component.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/chips/chip-set/component.js ***!
  \************************************************************/
/*! exports provided: MDCChipSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCChipSet", function() { return MDCChipSet; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _chip_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chip/component */ "./node_modules/@material/chips/chip/component.js");
/* harmony import */ var _chip_foundation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chip/foundation */ "./node_modules/@material/chips/chip/foundation.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/chips/chip-set/foundation.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





var _a = _chip_foundation__WEBPACK_IMPORTED_MODULE_3__["MDCChipFoundation"].strings, INTERACTION_EVENT = _a.INTERACTION_EVENT, SELECTION_EVENT = _a.SELECTION_EVENT, REMOVAL_EVENT = _a.REMOVAL_EVENT, NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
var CHIP_SELECTOR = _foundation__WEBPACK_IMPORTED_MODULE_4__["MDCChipSetFoundation"].strings.CHIP_SELECTOR;
var idCounter = 0;
var MDCChipSet = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCChipSet, _super);
    function MDCChipSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipSet.attachTo = function (root) {
        return new MDCChipSet(root);
    };
    Object.defineProperty(MDCChipSet.prototype, "chips", {
        get: function () {
            return this.chips_.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChipSet.prototype, "selectedChipIds", {
        /**
         * @return An array of the IDs of all selected chips.
         */
        get: function () {
            return this.foundation_.getSelectedChipIds();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param chipFactory A function which creates a new MDCChip.
     */
    MDCChipSet.prototype.initialize = function (chipFactory) {
        if (chipFactory === void 0) { chipFactory = function (el) { return new _chip_component__WEBPACK_IMPORTED_MODULE_2__["MDCChip"](el); }; }
        this.chipFactory_ = chipFactory;
        this.chips_ = this.instantiateChips_(this.chipFactory_);
    };
    MDCChipSet.prototype.initialSyncWithDOM = function () {
        var _this = this;
        this.chips_.forEach(function (chip) {
            if (chip.id && chip.selected) {
                _this.foundation_.select(chip.id);
            }
        });
        this.handleChipInteraction_ = function (evt) { return _this.foundation_.handleChipInteraction(evt.detail.chipId); };
        this.handleChipSelection_ = function (evt) {
            _this.foundation_.handleChipSelection(evt.detail.chipId, evt.detail.selected, evt.detail.shouldIgnore);
        };
        this.handleChipRemoval_ = function (evt) { return _this.foundation_.handleChipRemoval(evt.detail.chipId); };
        this.handleChipNavigation_ = function (evt) { return _this.foundation_.handleChipNavigation(evt.detail.chipId, evt.detail.key, evt.detail.source); };
        this.listen(INTERACTION_EVENT, this.handleChipInteraction_);
        this.listen(SELECTION_EVENT, this.handleChipSelection_);
        this.listen(REMOVAL_EVENT, this.handleChipRemoval_);
        this.listen(NAVIGATION_EVENT, this.handleChipNavigation_);
    };
    MDCChipSet.prototype.destroy = function () {
        this.chips_.forEach(function (chip) {
            chip.destroy();
        });
        this.unlisten(INTERACTION_EVENT, this.handleChipInteraction_);
        this.unlisten(SELECTION_EVENT, this.handleChipSelection_);
        this.unlisten(REMOVAL_EVENT, this.handleChipRemoval_);
        this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation_);
        _super.prototype.destroy.call(this);
    };
    /**
     * Adds a new chip object to the chip set from the given chip element.
     */
    MDCChipSet.prototype.addChip = function (chipEl) {
        chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
        this.chips_.push(this.chipFactory_(chipEl));
    };
    MDCChipSet.prototype.getDefaultFoundation = function () {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            focusChipPrimaryActionAtIndex: function (index) {
                _this.chips_[index].focusPrimaryAction();
            },
            focusChipTrailingActionAtIndex: function (index) {
                _this.chips_[index].focusTrailingAction();
            },
            getChipListCount: function () { return _this.chips_.length; },
            getIndexOfChipById: function (chipId) {
                return _this.findChipIndex_(chipId);
            },
            hasClass: function (className) { return _this.root_.classList.contains(className); },
            isRTL: function () { return window.getComputedStyle(_this.root_).getPropertyValue('direction') === 'rtl'; },
            removeChipAtIndex: function (index) {
                if (index >= 0 && index < _this.chips_.length) {
                    _this.chips_[index].destroy();
                    _this.chips_[index].remove();
                    _this.chips_.splice(index, 1);
                }
            },
            removeFocusFromChipAtIndex: function (index) {
                _this.chips_[index].removeFocus();
            },
            selectChipAtIndex: function (index, selected, shouldNotifyClients) {
                if (index >= 0 && index < _this.chips_.length) {
                    _this.chips_[index].setSelectedFromChipSet(selected, shouldNotifyClients);
                }
            },
        };
        return new _foundation__WEBPACK_IMPORTED_MODULE_4__["MDCChipSetFoundation"](adapter);
    };
    /**
     * Instantiates chip components on all of the chip set's child chip elements.
     */
    MDCChipSet.prototype.instantiateChips_ = function (chipFactory) {
        var chipElements = [].slice.call(this.root_.querySelectorAll(CHIP_SELECTOR));
        return chipElements.map(function (el) {
            el.id = el.id || "mdc-chip-" + ++idCounter;
            return chipFactory(el);
        });
    };
    /**
     * Returns the index of the chip with the given id, or -1 if the chip does not exist.
     */
    MDCChipSet.prototype.findChipIndex_ = function (chipId) {
        for (var i = 0; i < this.chips_.length; i++) {
            if (this.chips_[i].id === chipId) {
                return i;
            }
        }
        return -1;
    };
    return MDCChipSet;
}(_material_base_component__WEBPACK_IMPORTED_MODULE_1__["MDCComponent"]));

//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip-set/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/chips/chip-set/constants.js ***!
  \************************************************************/
/*! exports provided: strings, cssClasses */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings = {
    CHIP_SELECTOR: '.mdc-chip',
};
var cssClasses = {
    CHOICE: 'mdc-chip-set--choice',
    FILTER: 'mdc-chip-set--filter',
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip-set/foundation.js":
/*!*************************************************************!*\
  !*** ./node_modules/@material/chips/chip-set/foundation.js ***!
  \*************************************************************/
/*! exports provided: MDCChipSetFoundation, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCChipSetFoundation", function() { return MDCChipSetFoundation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _chip_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chip/constants */ "./node_modules/@material/chips/chip/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/chips/chip-set/constants.js");
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */




var MDCChipSetFoundation = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCChipSetFoundation, _super);
    function MDCChipSetFoundation(adapter) {
        var _this = _super.call(this, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, MDCChipSetFoundation.defaultAdapter, adapter)) || this;
        /**
         * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.
         */
        _this.selectedChipIds_ = [];
        return _this;
    }
    Object.defineProperty(MDCChipSetFoundation, "strings", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_3__["strings"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation, "cssClasses", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_3__["cssClasses"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation, "defaultAdapter", {
        get: function () {
            return {
                focusChipPrimaryActionAtIndex: function () { return undefined; },
                focusChipTrailingActionAtIndex: function () { return undefined; },
                getChipListCount: function () { return -1; },
                getIndexOfChipById: function () { return -1; },
                hasClass: function () { return false; },
                isRTL: function () { return false; },
                removeChipAtIndex: function () { return undefined; },
                removeFocusFromChipAtIndex: function () { return undefined; },
                selectChipAtIndex: function () { return undefined; },
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an array of the IDs of all selected chips.
     */
    MDCChipSetFoundation.prototype.getSelectedChipIds = function () {
        return this.selectedChipIds_.slice();
    };
    /**
     * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.
     * Does not notify clients of the updated selection state.
     */
    MDCChipSetFoundation.prototype.select = function (chipId) {
        this.select_(chipId, false);
    };
    /**
     * Handles a chip interaction event
     */
    MDCChipSetFoundation.prototype.handleChipInteraction = function (chipId) {
        var index = this.adapter_.getIndexOfChipById(chipId);
        this.removeFocusFromChipsExcept_(index);
        if (this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_3__["cssClasses"].CHOICE) || this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_3__["cssClasses"].FILTER)) {
            this.toggleSelect_(chipId);
        }
    };
    /**
     * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.
     */
    MDCChipSetFoundation.prototype.handleChipSelection = function (chipId, selected, shouldIgnore) {
        // Early exit if we should ignore the event
        if (shouldIgnore) {
            return;
        }
        var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;
        if (selected && !chipIsSelected) {
            this.select(chipId);
        }
        else if (!selected && chipIsSelected) {
            this.deselect_(chipId);
        }
    };
    /**
     * Handles the event when a chip is removed.
     */
    MDCChipSetFoundation.prototype.handleChipRemoval = function (chipId) {
        var index = this.adapter_.getIndexOfChipById(chipId);
        this.deselectAndNotifyClients_(chipId);
        this.adapter_.removeChipAtIndex(index);
        var maxIndex = this.adapter_.getChipListCount() - 1;
        var nextIndex = Math.min(index, maxIndex);
        this.removeFocusFromChipsExcept_(nextIndex);
        // After removing a chip, we should focus the trailing action for the next chip.
        this.adapter_.focusChipTrailingActionAtIndex(nextIndex);
    };
    /**
     * Handles a chip navigation event.
     */
    MDCChipSetFoundation.prototype.handleChipNavigation = function (chipId, key, source) {
        var maxIndex = this.adapter_.getChipListCount() - 1;
        var index = this.adapter_.getIndexOfChipById(chipId);
        // Early exit if the index is out of range or the key is unusable
        if (index === -1 || !_chip_constants__WEBPACK_IMPORTED_MODULE_2__["navigationKeys"].has(key)) {
            return;
        }
        var isRTL = this.adapter_.isRTL();
        var shouldIncrement = key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_RIGHT_KEY && !isRTL
            || key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_LEFT_KEY && isRTL
            || key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_DOWN_KEY;
        var isHome = key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].HOME_KEY;
        var isEnd = key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].END_KEY;
        if (shouldIncrement) {
            index++;
        }
        else if (isHome) {
            index = 0;
        }
        else if (isEnd) {
            index = maxIndex;
        }
        else {
            index--;
        }
        // Early exit if the index is out of bounds
        if (index < 0 || index > maxIndex) {
            return;
        }
        this.removeFocusFromChipsExcept_(index);
        this.focusChipAction_(index, key, source);
    };
    MDCChipSetFoundation.prototype.focusChipAction_ = function (index, key, source) {
        var shouldJumpChips = _chip_constants__WEBPACK_IMPORTED_MODULE_2__["jumpChipKeys"].has(key);
        if (shouldJumpChips && source === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].PRIMARY) {
            return this.adapter_.focusChipPrimaryActionAtIndex(index);
        }
        if (shouldJumpChips && source === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].TRAILING) {
            return this.adapter_.focusChipTrailingActionAtIndex(index);
        }
        var dir = this.getDirection_(key);
        if (dir === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].LEFT) {
            return this.adapter_.focusChipTrailingActionAtIndex(index);
        }
        if (dir === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].RIGHT) {
            return this.adapter_.focusChipPrimaryActionAtIndex(index);
        }
    };
    MDCChipSetFoundation.prototype.getDirection_ = function (key) {
        var isRTL = this.adapter_.isRTL();
        if (key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_LEFT_KEY && !isRTL || key === _chip_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_RIGHT_KEY && isRTL) {
            return _chip_constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].LEFT;
        }
        return _chip_constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].RIGHT;
    };
    /**
     * Deselects the chip with the given id and optionally notifies clients.
     */
    MDCChipSetFoundation.prototype.deselect_ = function (chipId, shouldNotifyClients) {
        if (shouldNotifyClients === void 0) { shouldNotifyClients = false; }
        var index = this.selectedChipIds_.indexOf(chipId);
        if (index >= 0) {
            this.selectedChipIds_.splice(index, 1);
            var chipIndex = this.adapter_.getIndexOfChipById(chipId);
            this.adapter_.selectChipAtIndex(chipIndex, /** isSelected */ false, shouldNotifyClients);
        }
    };
    /**
     * Deselects the chip with the given id and notifies clients.
     */
    MDCChipSetFoundation.prototype.deselectAndNotifyClients_ = function (chipId) {
        this.deselect_(chipId, true);
    };
    /**
     * Toggles selection of the chip with the given id.
     */
    MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {
        if (this.selectedChipIds_.indexOf(chipId) >= 0) {
            this.deselectAndNotifyClients_(chipId);
        }
        else {
            this.selectAndNotifyClients_(chipId);
        }
    };
    MDCChipSetFoundation.prototype.removeFocusFromChipsExcept_ = function (index) {
        var chipCount = this.adapter_.getChipListCount();
        for (var i = 0; i < chipCount; i++) {
            if (i !== index) {
                this.adapter_.removeFocusFromChipAtIndex(i);
            }
        }
    };
    MDCChipSetFoundation.prototype.selectAndNotifyClients_ = function (chipId) {
        this.select_(chipId, true);
    };
    MDCChipSetFoundation.prototype.select_ = function (chipId, shouldNotifyClients) {
        if (this.selectedChipIds_.indexOf(chipId) >= 0) {
            return;
        }
        if (this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_3__["cssClasses"].CHOICE) && this.selectedChipIds_.length > 0) {
            var previouslySelectedChip = this.selectedChipIds_[0];
            var previouslySelectedIndex = this.adapter_.getIndexOfChipById(previouslySelectedChip);
            this.selectedChipIds_ = [];
            this.adapter_.selectChipAtIndex(previouslySelectedIndex, /** isSelected */ false, shouldNotifyClients);
        }
        this.selectedChipIds_.push(chipId);
        var index = this.adapter_.getIndexOfChipById(chipId);
        this.adapter_.selectChipAtIndex(index, /** isSelected */ true, shouldNotifyClients);
    };
    return MDCChipSetFoundation;
}(_material_base_foundation__WEBPACK_IMPORTED_MODULE_1__["MDCFoundation"]));

// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (MDCChipSetFoundation);
//# sourceMappingURL=foundation.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip-set/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@material/chips/chip-set/index.js ***!
  \********************************************************/
/*! exports provided: MDCChipSet, MDCChipSetFoundation, chipSetCssClasses, chipSetStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@material/chips/chip-set/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipSet", function() { return _component__WEBPACK_IMPORTED_MODULE_0__["MDCChipSet"]; });

/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/chips/chip-set/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipSetFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_1__["MDCChipSetFoundation"]; });

/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/chips/chip-set/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipSetCssClasses", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipSetStrings", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"]; });

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip/component.js":
/*!********************************************************!*\
  !*** ./node_modules/@material/chips/chip/component.js ***!
  \********************************************************/
/*! exports provided: MDCChip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCChip", function() { return MDCChip; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _material_ripple_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/ripple/component */ "./node_modules/@material/ripple/component.js");
/* harmony import */ var _material_ripple_foundation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/ripple/foundation */ "./node_modules/@material/ripple/foundation.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/chips/chip/constants.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/chips/chip/foundation.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






var INTERACTION_EVENTS = ['click', 'keydown'];
var MDCChip = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCChip, _super);
    function MDCChip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCChip.prototype, "selected", {
        /**
         * @return Whether the chip is selected.
         */
        get: function () {
            return this.foundation_.isSelected();
        },
        /**
         * Sets selected state on the chip.
         */
        set: function (selected) {
            this.foundation_.setSelected(selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChip.prototype, "shouldRemoveOnTrailingIconClick", {
        /**
         * @return Whether a trailing icon click should trigger exit/removal of the chip.
         */
        get: function () {
            return this.foundation_.getShouldRemoveOnTrailingIconClick();
        },
        /**
         * Sets whether a trailing icon click should trigger exit/removal of the chip.
         */
        set: function (shouldRemove) {
            this.foundation_.setShouldRemoveOnTrailingIconClick(shouldRemove);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChip.prototype, "ripple", {
        get: function () {
            return this.ripple_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChip.prototype, "id", {
        get: function () {
            return this.root_.id;
        },
        enumerable: true,
        configurable: true
    });
    MDCChip.attachTo = function (root) {
        return new MDCChip(root);
    };
    MDCChip.prototype.initialize = function (rippleFactory) {
        var _this = this;
        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new _material_ripple_component__WEBPACK_IMPORTED_MODULE_2__["MDCRipple"](el, foundation); }; }
        this.leadingIcon_ = this.root_.querySelector(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].LEADING_ICON_SELECTOR);
        this.trailingIcon_ = this.root_.querySelector(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].TRAILING_ICON_SELECTOR);
        this.checkmark_ = this.root_.querySelector(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].CHECKMARK_SELECTOR);
        this.primaryAction_ = this.root_.querySelector(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].PRIMARY_ACTION_SELECTOR);
        this.trailingAction_ = this.root_.querySelector(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].TRAILING_ACTION_SELECTOR);
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var rippleAdapter = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, _material_ripple_component__WEBPACK_IMPORTED_MODULE_2__["MDCRipple"].createAdapter(this), { computeBoundingRect: function () { return _this.foundation_.getDimensions(); } });
        this.ripple_ = rippleFactory(this.root_, new _material_ripple_foundation__WEBPACK_IMPORTED_MODULE_3__["MDCRippleFoundation"](rippleAdapter));
    };
    MDCChip.prototype.initialSyncWithDOM = function () {
        var _this = this;
        this.handleInteraction_ = function (evt) { return _this.foundation_.handleInteraction(evt); };
        this.handleTransitionEnd_ = function (evt) { return _this.foundation_.handleTransitionEnd(evt); };
        this.handleTrailingIconInteraction_ = function (evt) {
            return _this.foundation_.handleTrailingIconInteraction(evt);
        };
        this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };
        INTERACTION_EVENTS.forEach(function (evtType) {
            _this.listen(evtType, _this.handleInteraction_);
        });
        this.listen('transitionend', this.handleTransitionEnd_);
        this.listen('keydown', this.handleKeydown_);
        if (this.trailingIcon_) {
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.trailingIcon_.addEventListener(evtType, _this.handleTrailingIconInteraction_);
            });
        }
    };
    MDCChip.prototype.destroy = function () {
        var _this = this;
        this.ripple_.destroy();
        INTERACTION_EVENTS.forEach(function (evtType) {
            _this.unlisten(evtType, _this.handleInteraction_);
        });
        this.unlisten('transitionend', this.handleTransitionEnd_);
        this.unlisten('keydown', this.handleKeydown_);
        if (this.trailingIcon_) {
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.trailingIcon_.removeEventListener(evtType, _this.handleTrailingIconInteraction_);
            });
        }
        _super.prototype.destroy.call(this);
    };
    /**
     * Begins the exit animation which leads to removal of the chip.
     */
    MDCChip.prototype.beginExit = function () {
        this.foundation_.beginExit();
    };
    MDCChip.prototype.getDefaultFoundation = function () {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClass: function (className) { return _this.root_.classList.add(className); },
            addClassToLeadingIcon: function (className) {
                if (_this.leadingIcon_) {
                    _this.leadingIcon_.classList.add(className);
                }
            },
            eventTargetHasClass: function (target, className) { return target ? target.classList.contains(className) : false; },
            focusPrimaryAction: function () {
                if (_this.primaryAction_) {
                    _this.primaryAction_.focus();
                }
            },
            focusTrailingAction: function () {
                if (_this.trailingAction_) {
                    _this.trailingAction_.focus();
                }
            },
            getCheckmarkBoundingClientRect: function () { return _this.checkmark_ ? _this.checkmark_.getBoundingClientRect() : null; },
            getComputedStyleValue: function (propertyName) { return window.getComputedStyle(_this.root_).getPropertyValue(propertyName); },
            getRootBoundingClientRect: function () { return _this.root_.getBoundingClientRect(); },
            hasClass: function (className) { return _this.root_.classList.contains(className); },
            hasLeadingIcon: function () { return !!_this.leadingIcon_; },
            hasTrailingAction: function () { return !!_this.trailingAction_; },
            isRTL: function () { return window.getComputedStyle(_this.root_).getPropertyValue('direction') === 'rtl'; },
            notifyInteraction: function () { return _this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */); },
            notifyNavigation: function (key, source) { return _this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].NAVIGATION_EVENT, { chipId: _this.id, key: key, source: source }, true /* shouldBubble */); },
            notifyRemoval: function () {
                _this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].REMOVAL_EVENT, { chipId: _this.id, root: _this.root_ }, true /* shouldBubble */);
            },
            notifySelection: function (selected, shouldIgnore) { return _this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].SELECTION_EVENT, { chipId: _this.id, selected: selected, shouldIgnore: shouldIgnore }, true /* shouldBubble */); },
            notifyTrailingIconInteraction: function () { return _this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__["strings"].TRAILING_ICON_INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */); },
            removeClass: function (className) { return _this.root_.classList.remove(className); },
            removeClassFromLeadingIcon: function (className) {
                if (_this.leadingIcon_) {
                    _this.leadingIcon_.classList.remove(className);
                }
            },
            setPrimaryActionAttr: function (attr, value) {
                if (_this.primaryAction_) {
                    _this.primaryAction_.setAttribute(attr, value);
                }
            },
            setStyleProperty: function (propertyName, value) { return _this.root_.style.setProperty(propertyName, value); },
            setTrailingActionAttr: function (attr, value) {
                if (_this.trailingAction_) {
                    _this.trailingAction_.setAttribute(attr, value);
                }
            },
        };
        return new _foundation__WEBPACK_IMPORTED_MODULE_5__["MDCChipFoundation"](adapter);
    };
    MDCChip.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
        this.foundation_.setSelectedFromChipSet(selected, shouldNotifyClients);
    };
    MDCChip.prototype.focusPrimaryAction = function () {
        this.foundation_.focusPrimaryAction();
    };
    MDCChip.prototype.focusTrailingAction = function () {
        this.foundation_.focusTrailingAction();
    };
    MDCChip.prototype.removeFocus = function () {
        this.foundation_.removeFocus();
    };
    MDCChip.prototype.remove = function () {
        var parent = this.root_.parentNode;
        if (parent !== null) {
            parent.removeChild(this.root_);
        }
    };
    return MDCChip;
}(_material_base_component__WEBPACK_IMPORTED_MODULE_1__["MDCComponent"]));

//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/@material/chips/chip/constants.js ***!
  \********************************************************/
/*! exports provided: Direction, EventSource, strings, cssClasses, navigationKeys, jumpChipKeys */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Direction", function() { return Direction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventSource", function() { return EventSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "navigationKeys", function() { return navigationKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jumpChipKeys", function() { return jumpChipKeys; });
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var Direction;
(function (Direction) {
    Direction[Direction["RIGHT"] = 0] = "RIGHT";
    Direction[Direction["LEFT"] = 1] = "LEFT";
})(Direction || (Direction = {}));
var EventSource;
(function (EventSource) {
    EventSource[EventSource["PRIMARY"] = 0] = "PRIMARY";
    EventSource[EventSource["TRAILING"] = 1] = "TRAILING";
    EventSource[EventSource["NONE"] = 2] = "NONE";
})(EventSource || (EventSource = {}));
var strings = {
    ARIA_CHECKED: 'aria-checked',
    ARROW_DOWN_KEY: 'ArrowDown',
    ARROW_LEFT_KEY: 'ArrowLeft',
    ARROW_RIGHT_KEY: 'ArrowRight',
    ARROW_UP_KEY: 'ArrowUp',
    BACKSPACE_KEY: 'Backspace',
    CHECKMARK_SELECTOR: '.mdc-chip__checkmark',
    DELETE_KEY: 'Delete',
    END_KEY: 'End',
    ENTER_KEY: 'Enter',
    ENTRY_ANIMATION_NAME: 'mdc-chip-entry',
    HOME_KEY: 'Home',
    INTERACTION_EVENT: 'MDCChip:interaction',
    LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',
    NAVIGATION_EVENT: 'MDCChip:navigation',
    PRIMARY_ACTION_SELECTOR: '.mdc-chip__primary-action',
    REMOVAL_EVENT: 'MDCChip:removal',
    SELECTION_EVENT: 'MDCChip:selection',
    SPACEBAR_KEY: ' ',
    TAB_INDEX: 'tabindex',
    TRAILING_ACTION_SELECTOR: '.mdc-chip__trailing-action',
    TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',
    TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',
};
var cssClasses = {
    CHECKMARK: 'mdc-chip__checkmark',
    CHIP_EXIT: 'mdc-chip--exit',
    DELETABLE: 'mdc-chip--deletable',
    HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',
    LEADING_ICON: 'mdc-chip__icon--leading',
    PRIMARY_ACTION: 'mdc-chip__primary-action',
    SELECTED: 'mdc-chip--selected',
    TEXT: 'mdc-chip__text',
    TRAILING_ACTION: 'mdc-chip__trailing-action',
    TRAILING_ICON: 'mdc-chip__icon--trailing',
};
var navigationKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this by hand
navigationKeys.add(strings.ARROW_LEFT_KEY);
navigationKeys.add(strings.ARROW_RIGHT_KEY);
navigationKeys.add(strings.ARROW_DOWN_KEY);
navigationKeys.add(strings.ARROW_UP_KEY);
navigationKeys.add(strings.END_KEY);
navigationKeys.add(strings.HOME_KEY);
var jumpChipKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this by hand
jumpChipKeys.add(strings.ARROW_UP_KEY);
jumpChipKeys.add(strings.ARROW_DOWN_KEY);
jumpChipKeys.add(strings.HOME_KEY);
jumpChipKeys.add(strings.END_KEY);
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip/foundation.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material/chips/chip/foundation.js ***!
  \*********************************************************/
/*! exports provided: MDCChipFoundation, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCChipFoundation", function() { return MDCChipFoundation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/chips/chip/constants.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



var emptyClientRect = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};
var MDCChipFoundation = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCChipFoundation, _super);
    function MDCChipFoundation(adapter) {
        var _this = _super.call(this, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, MDCChipFoundation.defaultAdapter, adapter)) || this;
        /**
         * Whether a trailing icon click should immediately trigger exit/removal of the chip.
         */
        _this.shouldRemoveOnTrailingIconClick_ = true;
        return _this;
    }
    Object.defineProperty(MDCChipFoundation, "strings", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChipFoundation, "cssClasses", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCChipFoundation, "defaultAdapter", {
        get: function () {
            return {
                addClass: function () { return undefined; },
                addClassToLeadingIcon: function () { return undefined; },
                eventTargetHasClass: function () { return false; },
                focusPrimaryAction: function () { return undefined; },
                focusTrailingAction: function () { return undefined; },
                getCheckmarkBoundingClientRect: function () { return emptyClientRect; },
                getComputedStyleValue: function () { return ''; },
                getRootBoundingClientRect: function () { return emptyClientRect; },
                hasClass: function () { return false; },
                hasLeadingIcon: function () { return false; },
                hasTrailingAction: function () { return false; },
                isRTL: function () { return false; },
                notifyInteraction: function () { return undefined; },
                notifyNavigation: function () { return undefined; },
                notifyRemoval: function () { return undefined; },
                notifySelection: function () { return undefined; },
                notifyTrailingIconInteraction: function () { return undefined; },
                removeClass: function () { return undefined; },
                removeClassFromLeadingIcon: function () { return undefined; },
                setPrimaryActionAttr: function () { return undefined; },
                setStyleProperty: function () { return undefined; },
                setTrailingActionAttr: function () { return undefined; },
            };
        },
        enumerable: true,
        configurable: true
    });
    MDCChipFoundation.prototype.isSelected = function () {
        return this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED);
    };
    MDCChipFoundation.prototype.setSelected = function (selected) {
        this.setSelected_(selected);
        this.notifySelection_(selected);
    };
    MDCChipFoundation.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
        this.setSelected_(selected);
        if (shouldNotifyClients) {
            this.notifyIgnoredSelection_(selected);
        }
    };
    MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {
        return this.shouldRemoveOnTrailingIconClick_;
    };
    MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {
        this.shouldRemoveOnTrailingIconClick_ = shouldRemove;
    };
    MDCChipFoundation.prototype.getDimensions = function () {
        var _this = this;
        var getRootRect = function () { return _this.adapter_.getRootBoundingClientRect(); };
        var getCheckmarkRect = function () { return _this.adapter_.getCheckmarkBoundingClientRect(); };
        // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current
        // size of the checkmark.
        if (!this.adapter_.hasLeadingIcon()) {
            var checkmarkRect = getCheckmarkRect();
            if (checkmarkRect) {
                var rootRect = getRootRect();
                // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.
                // However, the checkbox is initially hidden by setting the width to 0.
                // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)
                // when adding it to the root client rect's width.
                return {
                    bottom: rootRect.bottom,
                    height: rootRect.height,
                    left: rootRect.left,
                    right: rootRect.right,
                    top: rootRect.top,
                    width: rootRect.width + checkmarkRect.height,
                };
            }
        }
        return getRootRect();
    };
    /**
     * Begins the exit animation which leads to removal of the chip.
     */
    MDCChipFoundation.prototype.beginExit = function () {
        this.adapter_.addClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].CHIP_EXIT);
    };
    /**
     * Handles an interaction event on the root element.
     */
    MDCChipFoundation.prototype.handleInteraction = function (evt) {
        if (this.shouldHandleInteraction_(evt)) {
            this.adapter_.notifyInteraction();
            this.focusPrimaryAction_();
        }
    };
    /**
     * Handles a transition end event on the root element.
     */
    MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {
        var _this = this;
        // Handle transition end event on the chip when it is about to be removed.
        var shouldHandle = this.adapter_.eventTargetHasClass(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].CHIP_EXIT);
        var widthIsAnimating = evt.propertyName === 'width';
        var opacityIsAnimating = evt.propertyName === 'opacity';
        if (shouldHandle && opacityIsAnimating) {
            // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5
            var chipWidth_1 = this.adapter_.getComputedStyleValue('width');
            // On the next frame (once we get the computed width), explicitly set the chip's width
            // to its current pixel width, so we aren't transitioning out of 'auto'.
            requestAnimationFrame(function () {
                _this.adapter_.setStyleProperty('width', chipWidth_1);
                // To mitigate jitter, start transitioning padding and margin before width.
                _this.adapter_.setStyleProperty('padding', '0');
                _this.adapter_.setStyleProperty('margin', '0');
                // On the next frame (once width is explicitly set), transition width to 0.
                requestAnimationFrame(function () {
                    _this.adapter_.setStyleProperty('width', '0');
                });
            });
            return;
        }
        if (shouldHandle && widthIsAnimating) {
            this.removeFocus_();
            this.adapter_.notifyRemoval();
        }
        // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.
        if (!opacityIsAnimating) {
            return;
        }
        var shouldHideLeadingIcon = this.adapter_.eventTargetHasClass(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].LEADING_ICON)
            && this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED);
        var shouldShowLeadingIcon = this.adapter_.eventTargetHasClass(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].CHECKMARK)
            && !this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED);
        if (shouldHideLeadingIcon) {
            return this.adapter_.addClassToLeadingIcon(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].HIDDEN_LEADING_ICON);
        }
        if (shouldShowLeadingIcon) {
            return this.adapter_.removeClassFromLeadingIcon(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].HIDDEN_LEADING_ICON);
        }
    };
    /**
     * Handles an interaction event on the trailing icon element. This is used to
     * prevent the ripple from activating on interaction with the trailing icon.
     */
    MDCChipFoundation.prototype.handleTrailingIconInteraction = function (evt) {
        if (this.shouldHandleInteraction_(evt)) {
            this.adapter_.notifyTrailingIconInteraction();
            this.removeChip_(evt);
        }
    };
    /**
     * Handles a keydown event from the root element.
     */
    MDCChipFoundation.prototype.handleKeydown = function (evt) {
        if (this.shouldRemoveChip_(evt)) {
            return this.removeChip_(evt);
        }
        var key = evt.key;
        // Early exit if the key is not usable
        if (!_constants__WEBPACK_IMPORTED_MODULE_2__["navigationKeys"].has(key)) {
            return;
        }
        // Prevent default behavior for movement keys which could include scrolling
        evt.preventDefault();
        this.focusNextAction_(evt);
    };
    MDCChipFoundation.prototype.removeFocus = function () {
        this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
        this.adapter_.setTrailingActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
    };
    MDCChipFoundation.prototype.focusPrimaryAction = function () {
        this.focusPrimaryAction_();
    };
    MDCChipFoundation.prototype.focusTrailingAction = function () {
        if (!this.adapter_.hasTrailingAction()) {
            return this.focusPrimaryAction_();
        }
        this.focusTrailingAction_();
    };
    MDCChipFoundation.prototype.focusNextAction_ = function (evt) {
        var key = evt.key;
        var hasTrailingAction = this.adapter_.hasTrailingAction();
        var dir = this.getDirection_(key);
        var source = this.getEvtSource_(evt);
        // Early exit if the key should jump keys or the chip only has one action (i.e. no trailing action)
        if (_constants__WEBPACK_IMPORTED_MODULE_2__["jumpChipKeys"].has(key) || !hasTrailingAction) {
            this.adapter_.notifyNavigation(key, source);
            return;
        }
        if (source === _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].PRIMARY && dir === _constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].RIGHT) {
            return this.focusTrailingAction_();
        }
        if (source === _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].TRAILING && dir === _constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].LEFT) {
            return this.focusPrimaryAction_();
        }
        this.adapter_.notifyNavigation(key, _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].NONE);
    };
    MDCChipFoundation.prototype.getEvtSource_ = function (evt) {
        if (this.adapter_.eventTargetHasClass(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].PRIMARY_ACTION)) {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].PRIMARY;
        }
        if (this.adapter_.eventTargetHasClass(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].TRAILING_ACTION)) {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].TRAILING;
        }
        return _constants__WEBPACK_IMPORTED_MODULE_2__["EventSource"].NONE;
    };
    MDCChipFoundation.prototype.getDirection_ = function (key) {
        var isRTL = this.adapter_.isRTL();
        if (key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_LEFT_KEY && !isRTL || key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARROW_RIGHT_KEY && isRTL) {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].LEFT;
        }
        return _constants__WEBPACK_IMPORTED_MODULE_2__["Direction"].RIGHT;
    };
    MDCChipFoundation.prototype.focusPrimaryAction_ = function () {
        this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '0');
        this.adapter_.focusPrimaryAction();
        this.adapter_.setTrailingActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
    };
    MDCChipFoundation.prototype.focusTrailingAction_ = function () {
        this.adapter_.setTrailingActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '0');
        this.adapter_.focusTrailingAction();
        this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
    };
    MDCChipFoundation.prototype.removeFocus_ = function () {
        this.adapter_.setTrailingActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
        this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].TAB_INDEX, '-1');
    };
    MDCChipFoundation.prototype.removeChip_ = function (evt) {
        evt.stopPropagation();
        if (this.shouldRemoveOnTrailingIconClick_) {
            this.beginExit();
        }
    };
    MDCChipFoundation.prototype.shouldHandleInteraction_ = function (evt) {
        if (evt.type === 'click') {
            return true;
        }
        var keyEvt = evt;
        return keyEvt.key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ENTER_KEY || keyEvt.key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].SPACEBAR_KEY;
    };
    MDCChipFoundation.prototype.shouldRemoveChip_ = function (evt) {
        var isDeletable = this.adapter_.hasClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].DELETABLE);
        return isDeletable && (evt.key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].BACKSPACE_KEY || evt.key === _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].DELETE_KEY);
    };
    MDCChipFoundation.prototype.setSelected_ = function (selected) {
        if (selected) {
            this.adapter_.addClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED);
            this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_CHECKED, 'true');
        }
        else {
            this.adapter_.removeClass(_constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED);
            this.adapter_.setPrimaryActionAttr(_constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_CHECKED, 'false');
        }
    };
    MDCChipFoundation.prototype.notifySelection_ = function (selected) {
        this.adapter_.notifySelection(selected, false);
    };
    MDCChipFoundation.prototype.notifyIgnoredSelection_ = function (selected) {
        this.adapter_.notifySelection(selected, true);
    };
    return MDCChipFoundation;
}(_material_base_foundation__WEBPACK_IMPORTED_MODULE_1__["MDCFoundation"]));

// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (MDCChipFoundation);
//# sourceMappingURL=foundation.js.map

/***/ }),

/***/ "./node_modules/@material/chips/chip/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/chips/chip/index.js ***!
  \****************************************************/
/*! exports provided: MDCChip, MDCChipFoundation, chipCssClasses, chipStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@material/chips/chip/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChip", function() { return _component__WEBPACK_IMPORTED_MODULE_0__["MDCChip"]; });

/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/chips/chip/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_1__["MDCChipFoundation"]; });

/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/chips/chip/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipCssClasses", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipStrings", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"]; });

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@material/chips/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@material/chips/index.js ***!
  \***********************************************/
/*! exports provided: MDCChip, MDCChipFoundation, chipCssClasses, chipStrings, MDCChipSet, MDCChipSetFoundation, chipSetCssClasses, chipSetStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _chip_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chip/index */ "./node_modules/@material/chips/chip/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChip", function() { return _chip_index__WEBPACK_IMPORTED_MODULE_0__["MDCChip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipFoundation", function() { return _chip_index__WEBPACK_IMPORTED_MODULE_0__["MDCChipFoundation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipCssClasses", function() { return _chip_index__WEBPACK_IMPORTED_MODULE_0__["chipCssClasses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipStrings", function() { return _chip_index__WEBPACK_IMPORTED_MODULE_0__["chipStrings"]; });

/* harmony import */ var _chip_set_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chip-set/index */ "./node_modules/@material/chips/chip-set/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipSet", function() { return _chip_set_index__WEBPACK_IMPORTED_MODULE_1__["MDCChipSet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCChipSetFoundation", function() { return _chip_set_index__WEBPACK_IMPORTED_MODULE_1__["MDCChipSetFoundation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipSetCssClasses", function() { return _chip_set_index__WEBPACK_IMPORTED_MODULE_1__["chipSetCssClasses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chipSetStrings", function() { return _chip_set_index__WEBPACK_IMPORTED_MODULE_1__["chipSetStrings"]; });

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@material/dom/events.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/dom/events.js ***!
  \**********************************************/
/*! exports provided: applyPassive */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPassive", function() { return applyPassive; });
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * Stores result from applyPassive to avoid redundant processing to detect
 * passive event listener support.
 */
var supportsPassive_;
/**
 * Determine whether the current browser supports passive event listeners, and
 * if so, use them.
 */
function applyPassive(globalObj, forceRefresh) {
    if (globalObj === void 0) { globalObj = window; }
    if (forceRefresh === void 0) { forceRefresh = false; }
    if (supportsPassive_ === undefined || forceRefresh) {
        var isSupported_1 = false;
        try {
            globalObj.document.addEventListener('test', function () { return undefined; }, {
                get passive() {
                    isSupported_1 = true;
                    return isSupported_1;
                },
            });
        }
        catch (e) {
        } // tslint:disable-line:no-empty cannot throw error due to tests. tslint also disables console.log.
        supportsPassive_ = isSupported_1;
    }
    return supportsPassive_ ? { passive: true } : false;
}
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/@material/dom/ponyfill.js":
/*!************************************************!*\
  !*** ./node_modules/@material/dom/ponyfill.js ***!
  \************************************************/
/*! exports provided: closest, matches */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matches", function() { return matches; });
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
 */
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    var el = element;
    while (el) {
        if (matches(el, selector)) {
            return el;
        }
        el = el.parentElement;
    }
    return null;
}
function matches(element, selector) {
    var nativeMatches = element.matches
        || element.webkitMatchesSelector
        || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
}
//# sourceMappingURL=ponyfill.js.map

/***/ }),

/***/ "./node_modules/@material/ripple/component.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/ripple/component.js ***!
  \****************************************************/
/*! exports provided: MDCRipple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCRipple", function() { return MDCRipple; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _material_dom_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/dom/events */ "./node_modules/@material/dom/events.js");
/* harmony import */ var _material_dom_ponyfill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/dom/ponyfill */ "./node_modules/@material/dom/ponyfill.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/ripple/foundation.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






var MDCRipple = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCRipple, _super);
    function MDCRipple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        return _this;
    }
    MDCRipple.attachTo = function (root, opts) {
        if (opts === void 0) { opts = { isUnbounded: undefined }; }
        var ripple = new MDCRipple(root);
        // Only override unbounded behavior if option is explicitly specified
        if (opts.isUnbounded !== undefined) {
            ripple.unbounded = opts.isUnbounded;
        }
        return ripple;
    };
    MDCRipple.createAdapter = function (instance) {
        return {
            addClass: function (className) { return instance.root_.classList.add(className); },
            browserSupportsCssVars: function () { return _util__WEBPACK_IMPORTED_MODULE_5__["supportsCssVariables"](window); },
            computeBoundingRect: function () { return instance.root_.getBoundingClientRect(); },
            containsEventTarget: function (target) { return instance.root_.contains(target); },
            deregisterDocumentInteractionHandler: function (evtType, handler) {
                return document.documentElement.removeEventListener(evtType, handler, Object(_material_dom_events__WEBPACK_IMPORTED_MODULE_2__["applyPassive"])());
            },
            deregisterInteractionHandler: function (evtType, handler) {
                return instance.root_.removeEventListener(evtType, handler, Object(_material_dom_events__WEBPACK_IMPORTED_MODULE_2__["applyPassive"])());
            },
            deregisterResizeHandler: function (handler) { return window.removeEventListener('resize', handler); },
            getWindowPageOffset: function () { return ({ x: window.pageXOffset, y: window.pageYOffset }); },
            isSurfaceActive: function () { return Object(_material_dom_ponyfill__WEBPACK_IMPORTED_MODULE_3__["matches"])(instance.root_, ':active'); },
            isSurfaceDisabled: function () { return Boolean(instance.disabled); },
            isUnbounded: function () { return Boolean(instance.unbounded); },
            registerDocumentInteractionHandler: function (evtType, handler) {
                return document.documentElement.addEventListener(evtType, handler, Object(_material_dom_events__WEBPACK_IMPORTED_MODULE_2__["applyPassive"])());
            },
            registerInteractionHandler: function (evtType, handler) {
                return instance.root_.addEventListener(evtType, handler, Object(_material_dom_events__WEBPACK_IMPORTED_MODULE_2__["applyPassive"])());
            },
            registerResizeHandler: function (handler) { return window.addEventListener('resize', handler); },
            removeClass: function (className) { return instance.root_.classList.remove(className); },
            updateCssVariable: function (varName, value) { return instance.root_.style.setProperty(varName, value); },
        };
    };
    Object.defineProperty(MDCRipple.prototype, "unbounded", {
        get: function () {
            return Boolean(this.unbounded_);
        },
        set: function (unbounded) {
            this.unbounded_ = Boolean(unbounded);
            this.setUnbounded_();
        },
        enumerable: true,
        configurable: true
    });
    MDCRipple.prototype.activate = function () {
        this.foundation_.activate();
    };
    MDCRipple.prototype.deactivate = function () {
        this.foundation_.deactivate();
    };
    MDCRipple.prototype.layout = function () {
        this.foundation_.layout();
    };
    MDCRipple.prototype.getDefaultFoundation = function () {
        return new _foundation__WEBPACK_IMPORTED_MODULE_4__["MDCRippleFoundation"](MDCRipple.createAdapter(this));
    };
    MDCRipple.prototype.initialSyncWithDOM = function () {
        var root = this.root_;
        this.unbounded = 'mdcRippleIsUnbounded' in root.dataset;
    };
    /**
     * Closure Compiler throws an access control error when directly accessing a
     * protected or private property inside a getter/setter, like unbounded above.
     * By accessing the protected property inside a method, we solve that problem.
     * That's why this function exists.
     */
    MDCRipple.prototype.setUnbounded_ = function () {
        this.foundation_.setUnbounded(Boolean(this.unbounded_));
    };
    return MDCRipple;
}(_material_base_component__WEBPACK_IMPORTED_MODULE_1__["MDCComponent"]));

//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/@material/ripple/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/ripple/constants.js ***!
  \****************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
};
var strings = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top',
};
var numbers = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300,
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@material/ripple/foundation.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material/ripple/foundation.js ***!
  \*****************************************************/
/*! exports provided: MDCRippleFoundation, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCRippleFoundation", function() { return MDCRippleFoundation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/ripple/constants.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */




// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = [
    'touchstart', 'pointerdown', 'mousedown', 'keydown',
];
// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = [
    'touchend', 'pointerup', 'mouseup', 'contextmenu',
];
// simultaneous nested activations
var activatedTargets = [];
var MDCRippleFoundation = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MDCRippleFoundation, _super);
    function MDCRippleFoundation(adapter) {
        var _this = _super.call(this, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, MDCRippleFoundation.defaultAdapter, adapter)) || this;
        _this.activationAnimationHasEnded_ = false;
        _this.activationTimer_ = 0;
        _this.fgDeactivationRemovalTimer_ = 0;
        _this.fgScale_ = '0';
        _this.frame_ = { width: 0, height: 0 };
        _this.initialSize_ = 0;
        _this.layoutFrame_ = 0;
        _this.maxRadius_ = 0;
        _this.unboundedCoords_ = { left: 0, top: 0 };
        _this.activationState_ = _this.defaultActivationState_();
        _this.activationTimerCallback_ = function () {
            _this.activationAnimationHasEnded_ = true;
            _this.runDeactivationUXLogicIfReady_();
        };
        _this.activateHandler_ = function (e) { return _this.activate_(e); };
        _this.deactivateHandler_ = function () { return _this.deactivate_(); };
        _this.focusHandler_ = function () { return _this.handleFocus(); };
        _this.blurHandler_ = function () { return _this.handleBlur(); };
        _this.resizeHandler_ = function () { return _this.layout(); };
        return _this;
    }
    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
        get: function () {
            return _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
        get: function () {
            return {
                addClass: function () { return undefined; },
                browserSupportsCssVars: function () { return true; },
                computeBoundingRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },
                containsEventTarget: function () { return true; },
                deregisterDocumentInteractionHandler: function () { return undefined; },
                deregisterInteractionHandler: function () { return undefined; },
                deregisterResizeHandler: function () { return undefined; },
                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
                isSurfaceActive: function () { return true; },
                isSurfaceDisabled: function () { return true; },
                isUnbounded: function () { return true; },
                registerDocumentInteractionHandler: function () { return undefined; },
                registerInteractionHandler: function () { return undefined; },
                registerResizeHandler: function () { return undefined; },
                removeClass: function () { return undefined; },
                updateCssVariable: function () { return undefined; },
            };
        },
        enumerable: true,
        configurable: true
    });
    MDCRippleFoundation.prototype.init = function () {
        var _this = this;
        var supportsPressRipple = this.supportsPressRipple_();
        this.registerRootHandlers_(supportsPressRipple);
        if (supportsPressRipple) {
            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter_.addClass(ROOT_1);
                if (_this.adapter_.isUnbounded()) {
                    _this.adapter_.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal_();
                }
            });
        }
    };
    MDCRippleFoundation.prototype.destroy = function () {
        var _this = this;
        if (this.supportsPressRipple_()) {
            if (this.activationTimer_) {
                clearTimeout(this.activationTimer_);
                this.activationTimer_ = 0;
                this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer_) {
                clearTimeout(this.fgDeactivationRemovalTimer_);
                this.fgDeactivationRemovalTimer_ = 0;
                this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
            }
            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter_.removeClass(ROOT_2);
                _this.adapter_.removeClass(UNBOUNDED_2);
                _this.removeCssVars_();
            });
        }
        this.deregisterRootHandlers_();
        this.deregisterDeactivationHandlers_();
    };
    /**
     * @param evt Optional event containing position information.
     */
    MDCRippleFoundation.prototype.activate = function (evt) {
        this.activate_(evt);
    };
    MDCRippleFoundation.prototype.deactivate = function () {
        this.deactivate_();
    };
    MDCRippleFoundation.prototype.layout = function () {
        var _this = this;
        if (this.layoutFrame_) {
            cancelAnimationFrame(this.layoutFrame_);
        }
        this.layoutFrame_ = requestAnimationFrame(function () {
            _this.layoutInternal_();
            _this.layoutFrame_ = 0;
        });
    };
    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
        if (unbounded) {
            this.adapter_.addClass(UNBOUNDED);
        }
        else {
            this.adapter_.removeClass(UNBOUNDED);
        }
    };
    MDCRippleFoundation.prototype.handleFocus = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    MDCRippleFoundation.prototype.handleBlur = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */
    MDCRippleFoundation.prototype.supportsPressRipple_ = function () {
        return this.adapter_.browserSupportsCssVars();
    };
    MDCRippleFoundation.prototype.defaultActivationState_ = function () {
        return {
            activationEvent: undefined,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false,
        };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */
    MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {
        var _this = this;
        if (supportsPressRipple) {
            ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.registerInteractionHandler(evtType, _this.activateHandler_);
            });
            if (this.adapter_.isUnbounded()) {
                this.adapter_.registerResizeHandler(this.resizeHandler_);
            }
        }
        this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
        this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
    };
    MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {
        var _this = this;
        if (evt.type === 'keydown') {
            this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
        }
        else {
            POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);
            });
        }
    };
    MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {
        var _this = this;
        ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
            _this.adapter_.deregisterInteractionHandler(evtType, _this.activateHandler_);
        });
        this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
        this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);
        if (this.adapter_.isUnbounded()) {
            this.adapter_.deregisterResizeHandler(this.resizeHandler_);
        }
    };
    MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {
        var _this = this;
        this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
        POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
            _this.adapter_.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);
        });
    };
    MDCRippleFoundation.prototype.removeCssVars_ = function () {
        var _this = this;
        var rippleStrings = MDCRippleFoundation.strings;
        var keys = Object.keys(rippleStrings);
        keys.forEach(function (key) {
            if (key.indexOf('VAR_') === 0) {
                _this.adapter_.updateCssVariable(rippleStrings[key], null);
            }
        });
    };
    MDCRippleFoundation.prototype.activate_ = function (evt) {
        var _this = this;
        if (this.adapter_.isSurfaceDisabled()) {
            return;
        }
        var activationState = this.activationState_;
        if (activationState.isActivated) {
            return;
        }
        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
        var previousActivationEvent = this.previousActivationEvent_;
        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
        if (isSameInteraction) {
            return;
        }
        activationState.isActivated = true;
        activationState.isProgrammatic = evt === undefined;
        activationState.activationEvent = evt;
        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
        var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) { return _this.adapter_.containsEventTarget(target); });
        if (hasActivatedChild) {
            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
            this.resetActivationState_();
            return;
        }
        if (evt !== undefined) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers_(evt);
        }
        activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);
        if (activationState.wasElementMadeActive) {
            this.animateActivation_();
        }
        requestAnimationFrame(function () {
            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
            activatedTargets = [];
            if (!activationState.wasElementMadeActive
                && evt !== undefined
                && (evt.key === ' ' || evt.keyCode === 32)) {
                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                // active states inconsistently when they're called within event handling code:
                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                // variable is set within a rAF callback for a submit button interaction (#2241).
                activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);
                if (activationState.wasElementMadeActive) {
                    _this.animateActivation_();
                }
            }
            if (!activationState.wasElementMadeActive) {
                // Reset activation state immediately if element was not made active.
                _this.activationState_ = _this.defaultActivationState_();
            }
        });
    };
    MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {
        return (evt !== undefined && evt.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;
    };
    MDCRippleFoundation.prototype.animateActivation_ = function () {
        var _this = this;
        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
        this.layoutInternal_();
        var translateStart = '';
        var translateEnd = '';
        if (!this.adapter_.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates_(), startPoint = _c.startPoint, endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
        }
        this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
        this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
        // Cancel any ongoing activation/deactivation animations
        clearTimeout(this.activationTimer_);
        clearTimeout(this.fgDeactivationRemovalTimer_);
        this.rmBoundedActivationClasses_();
        this.adapter_.removeClass(FG_DEACTIVATION);
        // Force layout in order to re-trigger the animation.
        this.adapter_.computeBoundingRect();
        this.adapter_.addClass(FG_ACTIVATION);
        this.activationTimer_ = setTimeout(function () { return _this.activationTimerCallback_(); }, DEACTIVATION_TIMEOUT_MS);
    };
    MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {
        var _a = this.activationState_, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
        var startPoint;
        if (wasActivatedByPointer) {
            startPoint = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getNormalizedEventCoords"])(activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
        }
        else {
            startPoint = {
                x: this.frame_.width / 2,
                y: this.frame_.height / 2,
            };
        }
        // Center the element around the start point.
        startPoint = {
            x: startPoint.x - (this.initialSize_ / 2),
            y: startPoint.y - (this.initialSize_ / 2),
        };
        var endPoint = {
            x: (this.frame_.width / 2) - (this.initialSize_ / 2),
            y: (this.frame_.height / 2) - (this.initialSize_ / 2),
        };
        return { startPoint: startPoint, endPoint: endPoint };
    };
    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {
        var _this = this;
        // This method is called both when a pointing device is released, and when the activation animation ends.
        // The deactivation animation should only run after both of those occur.
        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
        var _a = this.activationState_, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
        var activationHasEnded = hasDeactivationUXRun || !isActivated;
        if (activationHasEnded && this.activationAnimationHasEnded_) {
            this.rmBoundedActivationClasses_();
            this.adapter_.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer_ = setTimeout(function () {
                _this.adapter_.removeClass(FG_DEACTIVATION);
            }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].FG_DEACTIVATION_MS);
        }
    };
    MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {
        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
        this.adapter_.removeClass(FG_ACTIVATION);
        this.activationAnimationHasEnded_ = false;
        this.adapter_.computeBoundingRect();
    };
    MDCRippleFoundation.prototype.resetActivationState_ = function () {
        var _this = this;
        this.previousActivationEvent_ = this.activationState_.activationEvent;
        this.activationState_ = this.defaultActivationState_();
        // Touch devices may fire additional events for the same interaction within a short time.
        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
        setTimeout(function () { return _this.previousActivationEvent_ = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };
    MDCRippleFoundation.prototype.deactivate_ = function () {
        var _this = this;
        var activationState = this.activationState_;
        // This can happen in scenarios such as when you have a keyup event that blurs the element.
        if (!activationState.isActivated) {
            return;
        }
        var state = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, activationState);
        if (activationState.isProgrammatic) {
            requestAnimationFrame(function () { return _this.animateDeactivation_(state); });
            this.resetActivationState_();
        }
        else {
            this.deregisterDeactivationHandlers_();
            requestAnimationFrame(function () {
                _this.activationState_.hasDeactivationUXRun = true;
                _this.animateDeactivation_(state);
                _this.resetActivationState_();
            });
        }
    };
    MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {
        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
        if (wasActivatedByPointer || wasElementMadeActive) {
            this.runDeactivationUXLogicIfReady_();
        }
    };
    MDCRippleFoundation.prototype.layoutInternal_ = function () {
        var _this = this;
        this.frame_ = this.adapter_.computeBoundingRect();
        var maxDim = Math.max(this.frame_.height, this.frame_.width);
        // Surface diameter is treated differently for unbounded vs. bounded ripples.
        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
        // `overflow: hidden`.
        var getBoundedRadius = function () {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));
            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
        };
        this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();
        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
        // Unbounded ripple size should always be even number to equally center align.
        if (this.adapter_.isUnbounded() && initialSize % 2 !== 0) {
            this.initialSize_ = initialSize - 1;
        }
        else {
            this.initialSize_ = initialSize;
        }
        this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;
        this.updateLayoutCssVars_();
    };
    MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {
        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
        this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");
        this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);
        if (this.adapter_.isUnbounded()) {
            this.unboundedCoords_ = {
                left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),
                top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),
            };
            this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");
            this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");
        }
    };
    return MDCRippleFoundation;
}(_material_base_foundation__WEBPACK_IMPORTED_MODULE_1__["MDCFoundation"]));

// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
/* harmony default export */ __webpack_exports__["default"] = (MDCRippleFoundation);
//# sourceMappingURL=foundation.js.map

/***/ }),

/***/ "./node_modules/@material/ripple/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@material/ripple/util.js ***!
  \***********************************************/
/*! exports provided: supportsCssVariables, getNormalizedEventCoords */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsCssVariables", function() { return supportsCssVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedEventCoords", function() { return getNormalizedEventCoords; });
/**
 * Stores result from supportsCssVariables to avoid redundant processing to
 * detect CSS custom variable support.
 */
var supportsCssVariables_;
function detectEdgePseudoVarBug(windowObj) {
    // Detect versions of Edge with buggy var() support
    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
    var document = windowObj.document;
    var node = document.createElement('div');
    node.className = 'mdc-ripple-surface--test-edge-var-bug';
    // Append to head instead of body because this script might be invoked in the
    // head, in which case the body doesn't exist yet. The probe works either way.
    document.head.appendChild(node);
    // The bug exists if ::before style ends up propagating to the parent element.
    // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
    // but Firefox is known to support CSS custom properties correctly.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    var computedStyle = windowObj.getComputedStyle(node);
    var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
    return hasPseudoVarBug;
}
function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) { forceRefresh = false; }
    var CSS = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;
    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
        return supportsCssVariables_;
    }
    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
    if (!supportsFunctionPresent) {
        return false;
    }
    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
    // See: README section on Safari
    var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
        CSS.supports('color', '#00000000'));
    if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
        supportsCssVars = !detectEdgePseudoVarBug(windowObj);
    }
    else {
        supportsCssVars = false;
    }
    if (!forceRefresh) {
        supportsCssVariables_ = supportsCssVars;
    }
    return supportsCssVars;
}
function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
        return { x: 0, y: 0 };
    }
    var x = pageOffset.x, y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY;
    // Determine touch point relative to the ripple container.
    if (evt.type === 'touchstart') {
        var touchEvent = evt;
        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    }
    else {
        var mouseEvent = evt;
        normalizedX = mouseEvent.pageX - documentX;
        normalizedY = mouseEvent.pageY - documentY;
    }
    return { x: normalizedX, y: normalizedY };
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),

/***/ "./src/Line/Line.ts":
/*!**************************!*\
  !*** ./src/Line/Line.ts ***!
  \**************************/
/*! exports provided: RMGLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLine", function() { return RMGLine; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Station_Station__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Station/Station */ "./src/Station/Station.ts");



class RMGLine {
    constructor(param) {
        this._longInterval = 1;
        this.stations = {};
        this._svgHeight = param.svg_height;
        this._svgWidth = param.svg_width;
        this._svgDestWidth = param.svg_dest_width;
        this._showOuter = param['show_outer'];
        [this.themeCity, this.themeLine, this._themeColour, this._fgColour] = param.theme;
        this.yPc = param['y_pc'];
        this._padding = param['padding'];
        this._stripPc = param['strip_pc'];
        this._branchSpacing = param.branch_spacing;
        this._txtFlip = param['txt_flip'];
        this._lineNames = param['line_name'];
        for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
            this.stations[stnId] = this._initStnInstance(stnId, stnInfo);
        }
        this._currentStnId = param['current_stn_idx'];
        this._direction = param['direction'];
        this._platformNum = param['platform_num'];
        this._destLegacy = param['dest_legacy'];
        this._charForm = param.char_form;
        // Calculate other properties of stations
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
            stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
        }
    }
    _initStnInstance(stnId, stnInfo) {
        switch (stnInfo.change_type) {
            case 'int2':
            case 'osi21_ul':
            case 'osi21_pl':
            case 'osi21_ur':
            case 'osi21_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int2Station"](stnId, stnInfo);
            case 'int3_l':
            case 'osi31_ul':
            case 'osi31_pl':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3LStation"](stnId, stnInfo);
            case 'int3_r':
            case 'osi31_ur':
            case 'osi31_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3RStation"](stnId, stnInfo);
            case 'osi11_ul':
            case 'osi11_pl':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11LStation"](stnId, stnInfo);
            case 'osi11_ur':
            case 'osi11_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11RStation"](stnId, stnInfo);
            case 'osi12_ul':
            case 'osi12_pl':
            case 'osi13_ul':
            case 'osi13_pl':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12LStation"](stnId, stnInfo);
            case 'osi12_ur':
            case 'osi12_pr':
            case 'osi13_ur':
            case 'osi13_pr':
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12RStation"](stnId, stnInfo);
            case 'osi22_pl':
            case 'osi22_ul':
                if (stnInfo.parents[0] == 'linestart' || stnInfo.children[0] == 'lineend') {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22EndStation"](stnId, stnInfo);
                }
                else {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22LStation"](stnId, stnInfo);
                }
            case 'osi22_pr':
            case 'osi22_ur':
                if (stnInfo.parents[0] == 'linestart' || stnInfo.children[0] == 'lineend') {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22EndStation"](stnId, stnInfo);
                }
                else {
                    return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22RStation"](stnId, stnInfo);
                }
            default:
                return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["RMGStation"](stnId, stnInfo);
        }
    }
    /**
     * Width (in pixels) of `svg#destination`.
     */
    // get svgDestWidth() {return getParams().svg_dest_width;}
    set svgDestWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgDestWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_dest_width', val);
        this.drawSVGFrame();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
    }
    /**
     * Setter of width of `svg#railmap`.
     */
    set svgWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_width', val);
        this.drawSVGFrame();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.loadFonts();
        this.updateStnNameBg();
    }
    /**
     * Setter of vertical position of line (y).
     * @param val Percentage of vertical position, given fixed `svgHeight`
     */
    set yPc(val) {
        this._yPc = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('y_pc', val);
        let y = val * this._svgHeight / 100;
        $('g#main').attr('transform', `translate(0,${y})`);
    }
    set padding(val) {
        val = Number(val);
        this._padding = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('padding', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set branchSpacing(val) {
        this._branchSpacing = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('branch_spacing', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set txtFlip(val) {
        this._txtFlip = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('txt_flip', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
        }
        $('#stn_icons').empty();
        this.drawStns();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set themeColour(hexs) {
        this._themeColour = hexs[0];
        this._fgColour = hexs[1];
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.theme[2] = hexs[0];
        param.theme[3] = hexs[1];
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.fillThemeColour();
    }
    /**
     * Setter of train direction.
     */
    set direction(val) {
        this._direction = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    /**
     * Setter of platform number (can be string).
     */
    set platformNum(val) {
        this._platformNum = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('platform_num', val);
        $('.rmg-name__platformnum').text(val);
    }
    /**
     * Setter of character form.
     * @param val 'trad', 'cn', 'tw' or 'jp'
     */
    set charForm(val) {
        this._charForm = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('char_form', val);
        $('.rmg-name__char-trad, .rmg-name__char-cn, .rmg-name__char-tw, .rmg-name__char-jp')
            .removeClass('rmg-name__char-trad rmg-name__char-cn rmg-name__char-tw rmg-name__char-jp')
            .addClass(`rmg-name__char-${val}`);
    }
    /**
     * Setter of names of line.
     */
    set lineNames(val) {
        this._lineNames = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('line_name', val);
        this.drawDestInfo();
        this.loadFonts();
    }
    /**
     * Setter of legacy style of destination information panel.
     */
    set destLegacy(val) {
        this._destLegacy = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('dest_legacy', val);
        this.drawDestInfo();
        this.loadFonts();
    }
    /**
     * Setter of current station.
     */
    set currentStnId(val) {
        this._currentStnId = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('current_stn_idx', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
    }
    /**
     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.
     */
    _rightWideFactor(stnId) {
        var res = 0;
        let stnInstance = this.stations[stnId];
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3RStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11RStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12RStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22Station"]) {
            res += this._longInterval;
        }
        var stnClasses = ['Int3RStation', 'OSI11RStation', 'OSI12RStation', 'OSI22LStation', 'OSI22RStation'];
        if (stnClasses.includes(this.stations[stnId].constructor.name)) {
            res += this._longInterval;
        }
        if (this._stnOutdegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnIndegree(this.stations[stnId].children[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    /**
     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.
     */
    _leftWideFactor(stnId) {
        var res = 0;
        let stnInstance = this.stations[stnId];
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["Int3LStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI11LStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI12LStation"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_Station__WEBPACK_IMPORTED_MODULE_1__["OSI22Station"]) {
            res += this._longInterval;
        }
        if (this._stnIndegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnOutdegree(this.stations[stnId].parents[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    /**
     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).
     */
    _pathWeight(stnId1, stnId2) {
        if (!this.stations[stnId1].children.includes(stnId2)) {
            return -Infinity;
        }
        return 1 + this._rightWideFactor(stnId1) + this._leftWideFactor(stnId2);
    }
    /**
     * Critical path and corresponding length from a station to another.
     * @param from ID of station on the left
     * @param to ID of station on the left
     */
    _cp(from, to) {
        let self = this;
        if (from == to) {
            return { len: 0, nodes: [from] };
        }
        let allLengths = [];
        let criticalPaths = [];
        this.stations[from].children.forEach(child => {
            let cp = self._cp(child, to);
            if (cp.len < 0) {
                return;
            }
            allLengths.push(this._pathWeight(from, child) + cp.len);
            cp.nodes.unshift(from);
            criticalPaths.push(cp.nodes);
        });
        let maxLength = Math.max(...allLengths);
        return {
            'len': maxLength,
            'nodes': criticalPaths[allLengths.indexOf(maxLength)]
        };
    }
    /**
     * Getter of critical path (from left to right) and corresponding length of the entire line.
     */
    get criticalPath() {
        let allLengths = [];
        let criticalPaths = [];
        this.leftDests.forEach(ld => {
            this.rightDests.forEach(rd => {
                let cp = this._cp(ld, rd);
                allLengths.push(cp.len);
                criticalPaths.push(cp.nodes);
            });
        });
        let maxLen = Math.max(...allLengths);
        return {
            'len': maxLen,
            'nodes': criticalPaths[allLengths.indexOf(maxLen)]
        };
    }
    _topoOrder(from, tpo = []) {
        var self = this;
        tpo.push(from);
        this.stations[from].children.forEach(child => {
            if (this._stnIndegree(child) == 2 && this.stations[child].parents.indexOf(from) == 0) {
                // wait the other branch
                return;
            }
            tpo.concat(self._topoOrder(child, tpo));
        });
        return tpo;
    }
    get tpo() {
        let res = this._topoOrder('linestart');
        return res.slice(1, res.length - 1);
    }
    get stripY() { return this._stripPc * this._svgHeight / 100; }
    get turningRadius() { return this._branchSpacing / 2 * (Math.sqrt(2) / (Math.sqrt(2) - 1)); }
    get lineXs() {
        return [
            this._svgWidth * this._padding / 100,
            this._svgWidth * (1 - this._padding / 100)
        ];
    }
    get leftDests() { return this.stations.linestart.children; }
    get rightDests() { return this.stations.lineend.parents; }
    get lValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart')[0])));
    }
    get rValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart').reverse()[0])));
    }
    /**
     * Indegree of a station node.
     */
    _stnIndegree(stnId) { return this.stations[stnId].inDegree; }
    /**
     * Outdegree of a station node.
     */
    _stnOutdegree(stnId) { return this.stations[stnId].outDegree; }
    /**
     * Horizontal position (in shares) of station icon.
     */
    _stnXShare(stnId) {
        var self = this;
        var cp = this.criticalPath;
        if (cp.nodes.includes(stnId)) {
            return this._cp(cp.nodes[0], stnId).len;
        }
        var partSource = stnId;
        var partSink = stnId;
        var leftOpenJaw = false;
        var rightOpenJaw = false;
        while (true) {
            var parent = this.stations[partSource].parents[0];
            if (parent == 'linestart') {
                leftOpenJaw = true;
                break;
            }
            partSource = parent;
            if (this._stnOutdegree(partSource) > 1) {
                break;
            }
        }
        while (true) {
            var children = this.stations[partSink].children;
            if (children[0] != 'lineend') {
                partSink = children[0];
            }
            else {
                rightOpenJaw = true;
                break;
            }
            if (this._stnIndegree(partSink) > 1) {
                break;
            }
        }
        var lengthToSource = this._cp(partSource, stnId).len;
        var lengthToSink = this._cp(stnId, partSink).len;
        if (leftOpenJaw) {
            var actualPartLength = this._cp(cp.nodes[0], partSink).len;
            return self._stnXShare(partSink) - lengthToSink / (lengthToSource + lengthToSink) * actualPartLength;
        }
        else if (rightOpenJaw) {
            var actualPartLength = this._cp(partSource, cp.nodes.slice(-1)[0]).len;
        }
        else {
            var actualPartLength = this._cp(partSource, partSink).len;
        }
        return self._stnXShare(partSource) + lengthToSource / (lengthToSource + lengthToSink) * actualPartLength;
    }
    /**
     * Horizontal position (in pixels) of station icon.
     */
    _stnRealX(stnId) {
        let [lineStart, lineEnd] = this.lineXs;
        return lineStart + this._stnXShare(stnId) / this.criticalPath.len * (lineEnd - lineStart);
    }
    /**
     * Mirror `_stnYShareMTR`.
     */
    _stnYShare(stnId) {
        return this._stnYShareMTR(stnId);
    }
    /**
     * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).
     */
    _stnYShareMTR(stnId) {
        if (['linestart', 'lineend'].includes(stnId) || this._stnIndegree(stnId) > 1 || this._stnOutdegree(stnId) > 1) {
            return 0;
        }
        var stnPred = this.stations[stnId].parents[0];
        let self = this;
        if (stnPred) {
            // parent exist
            if (this._stnOutdegree(stnPred) == 1) {
                // no sibling, then y same as parent
                return self._stnYShareMTR(stnPred);
            }
            else {
                // sibling exists, then y depends on its idx of being children
                return (this.stations[stnPred].children.indexOf(stnId) == 0) ? 1 : -1;
            }
        }
        else {
            // no parent, must be linestart
            return 0;
        }
    }
    /**
     * Vertical position (in pixels) of station icon related to vertical position of line.
     */
    _stnRealY(stnId) {
        return -this._stnYShare(stnId) * this._branchSpacing;
    }
    /**
     * Return true if station 2 is a successor of station 1, false otherwise.
     */
    _isSuccessor(stnId1, stnId2) {
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx1 < idx2) {
                return true;
            }
        }
        return false;
    }
    /**
     * Return true if station 2 is a predecessor of station 1, false otherwise.
     */
    _isPredecessor(stnId1, stnId2) {
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx2 < idx1) {
                return true;
            }
        }
        return false;
    }
    /**
     * Return state of a station (-1: passed, 0: current, 1: future).
     */
    _stnState(stnId) {
        if (stnId == this._currentStnId) {
            return 0;
        }
        if (this._direction == 'r') {
            return this._isSuccessor(this._currentStnId, stnId) ? 1 : -1;
        }
        else {
            return this._isPredecessor(this._currentStnId, stnId) ? 1 : -1;
        }
    }
    /**
     * Station name position (`false`: above line, `true`: below line, given `txtFlip` is `false`).
     */
    _stnNamePos(stnId) {
        if (stnId === 'linestart') {
            return true;
        }
        let self = this;
        let cp = this.criticalPath.nodes;
        let pos = cp.indexOf(stnId) % 2; // -1, 0 or 1;
        if (pos === -1) {
            let parId = this.stations[stnId].parents[0];
            if (this._stnOutdegree(parId) === 2) {
                return self._stnNamePos(parId);
            }
            return !self._stnNamePos(parId);
        }
        return pos === 1;
    }
    /**
     * Set height and width for both `svg`s.
     */
    drawSVGFrame() {
        $('#railmap, #outer').attr({
            width: this._svgWidth,
            height: this._svgHeight
        });
        $('#destination, #dest_outer').attr({
            width: this._svgDestWidth,
            height: this._svgHeight
        });
    }
    /**
     * Show border of both `svg`s, but the stroke colour of the borders are currently set as `none`.
     */
    showFrameOuter() {
        // var outerColour = this._showOuter ? 'black' : 'none';
        // $('#outer, #dest_outer').attr('stroke', outerColour);
        if (this._showOuter) {
            $('#outer, #dest_outer').show();
        }
        else {
            $('#outer, #dest_outer').hide();
        }
    }
    /**
     * Draw all stations. (Previously drawn station icons are not removed. )
     */
    drawStns() {
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $('#stn_icons').append(stnInstance.html);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
    }
    /**
     * Update background of current station name. `y` and `height` are changed while station icon is re-drawn and `RMGStation.nameHTML` is loaded.
     */
    updateStnNameBg() {
        var stnNameDim = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTxtBoxDim"])($(`#stn_icons > #${this._currentStnId} > .Name`)[0], 'railmap');
        $('#current_bg').attr({
            x: stnNameDim.x - 3,
            width: stnNameDim.width + 6,
        });
    }
    get stnDX() { return this.turningRadius - this._branchSpacing / 2; }
    ;
    get stnDY() { return this._branchSpacing / 2; }
    ;
    get stnExtraH() {
        var [lineStart, lineEnd] = this.lineXs;
        return (lineEnd - lineStart) / this.criticalPath.len * this._longInterval;
    }
    get stnSpareH() {
        var [lineStart, lineEnd] = this.lineXs;
        var dh = ((lineEnd - lineStart) / this.criticalPath.len - 2 * this.stnDX) / 2;
        if (dh < 0) {
            console.warn(`SVG width too small! ${dh}`);
        }
        return dh;
    }
    get pathTurnENE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnNEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnESE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${this.stnDY}`; }
    ;
    get pathTurnSEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${this.stnDY}`; }
    ;
    /**
     * Generate `d` attribute of `<path>` element through all stations input.
     */
    _linePath(stnIds) {
        var [prevId, prevY, prevX] = [];
        var path = [];
        var { stnExtraH, stnSpareH, pathTurnESE, pathTurnSEE, pathTurnENE, pathTurnNEE, stnDX } = this;
        stnIds.forEach(stnId => {
            var [x, y] = ['_stnRealX', '_stnRealY'].map(fun => this[fun](stnId));
            if (!prevY && prevY !== 0) {
                [prevId, prevX, prevY] = [stnId, x, y];
                path.push(`M ${x},${y}`);
                return;
            }
            if (y > prevY) {
                path.push(y === 0 ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnESE, pathTurnSEE);
            }
            else if (y < prevY) {
                path.push(y === 0 ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnENE, pathTurnNEE);
            }
            path.push(`H ${x}`);
            [prevId, prevX, prevY] = [stnId, x, y];
        });
        // simplify path
        return path.join(' ').replace(/( H ([\d.]+))+/g, ' H $2');
    }
    drawLine() {
        this.branches.map(branch => {
            var lineMainStns = branch.filter(stnId => this.stations[stnId].state >= 0);
            var linePassStns = branch.filter(stnId => this.stations[stnId].state <= 0);
            if (lineMainStns.length === 1) {
                linePassStns = branch;
            }
            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {
                // if two set disjoint
                if (linePassStns[0] === branch[0]) {
                    // -1 -1 1 1
                    linePassStns.push(lineMainStns[0]);
                }
                else if (lineMainStns[0] === branch[0] && lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] && linePassStns.length) {
                    linePassStns = branch;
                    lineMainStns = [];
                }
                else {
                    // 1 1 -1 -1
                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);
                }
            }
            $('#line_main').append($('<path>', { d: this._linePath(lineMainStns) }));
            $('#line_pass').append($('<path>', { d: this._linePath(linePassStns) }));
        });
        $('#line_main').html($('#line_main').html());
        $('#line_pass').html($('#line_pass').html());
    }
    drawStrip() {
        // $('#strip, #dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`)
        $('#strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`);
        $('#dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgDestWidth}`);
    }
    fillThemeColour() {
        $('#line_main, #strip, #dest_strip').attr('stroke', this._themeColour);
        $('#dest_name > #platform > circle').attr('fill', this._themeColour);
    }
    drawDestInfo() {
        $('#dest_name > #platform > text').text(this._platformNum);
        let validDest = this[this._direction + 'ValidDests'];
        let txtAnchor = this._direction === 'l' ? 'start' : 'end';
        var [destNameZH, destNameEN] = [0, 1].map(idx => {
            return validDest.map(stnId => this.stations[stnId].name[idx].replace(/\\/g, ' ')).join('/');
        });
        if (this._destLegacy) {
            var [lineNameZH, lineNameEN] = this._lineNames;
            lineNameEN += ' ';
        }
        else {
            var lineNameZH = lineNameEN = '';
        }
        $('#dest_name > g:last-child text').eq(0).text(`${lineNameZH}往${destNameZH}`);
        $('#dest_name > g:last-child text').eq(1).text(`${lineNameEN}to ${destNameEN}`);
        var bcr = $('#dest_name > g:last-child')[0].getBoundingClientRect();
        var flagLength = 160 + 150 + bcr.width + 45 + 50;
        var isLeft = (this._direction == 'l') ? 1 : -1;
        var arrowX = (this._svgDestWidth - isLeft * flagLength) / 2;
        var arrowRotate = 90 * (1 - isLeft);
        var platformNumX = arrowX + isLeft * (160 + 50 + 75);
        var destNameX = platformNumX + isLeft * (75 + 45);
        $('#dest_name > use').attr('transform', `translate(${arrowX},130)rotate(${arrowRotate})`);
        $('#dest_name > #platform').attr('transform', `translate(${platformNumX},130)`);
        $('#dest_name > g:last-child').attr({
            transform: `translate(${destNameX},105)`,
            'text-anchor': txtAnchor
        });
    }
    loadFonts() {
        $('.rmg-name__zh').addClass(`rmg-name__char-${this._charForm}`);
    }
    updateStnName(stnId, names, stnNum) {
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].name = names;
        param.stn_list[stnId].num = stnNum;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId].name = names;
        // this.stations[stnId]._nameZH = nameZH;
        // this.stations[stnId]._nameEN = nameEN;
        this.stations[stnId].stnNum = stnNum;
        $(`#stn_icons #${stnId}`).remove();
        $('#stn_icons').append(this.stations[stnId].html);
        $('#stn_icons').html($('#stn_icons').html());
        if (this.leftDests.includes(stnId) && this._direction == 'l') {
            this.drawDestInfo();
        }
        else if (this.rightDests.includes(stnId) && this._direction == 'r') {
            this.drawDestInfo();
        }
        this.loadFonts();
        if (stnId == this._currentStnId) {
            this.updateStnNameBg();
        }
    }
    updateStnTransfer(stnId, type, info = null) {
        var prevClass = this.stations[stnId].constructor.name;
        // V2.6 data structure
        let changeType = type.split('_')[0];
        let tick_direc = (type === 'none' || type === 'int2') ? 'r' : type.split('_')[1].split('').slice().reverse()[0];
        let paid_area = (type.indexOf('osi') !== -1) ? type.split('_')[1][0] === 'p' : true;
        let osi_names = (type.indexOf('osi') !== -1) ? [info[1][0]] : [];
        let transferInfo = info.length === 2 ? [info[0], info[1].slice(1)] : info;
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].change_type = type;
        if (type == 'none') {
            param.stn_list[stnId].interchange = [[]];
            param.stn_list[stnId].transfer = {
                type: changeType,
                tick_direc: tick_direc,
                paid_area: paid_area,
                osi_names: [],
                info: [[]]
            };
        }
        else {
            // param.stn_list[stnId].transfer = info;
            param.stn_list[stnId].interchange = info;
            param.stn_list[stnId].transfer = {
                type: changeType,
                tick_direc: tick_direc,
                paid_area: paid_area,
                osi_names: osi_names,
                info: transferInfo
            };
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId] = this._initStnInstance(stnId, param.stn_list[stnId]);
        if (prevClass != this.stations[stnId].constructor.name) {
            // Not sure position, redraw all
            for (let [stnId, stnInstance] of Object.entries(this.stations)) {
                if (['linestart', 'lineend'].includes(stnId)) {
                    continue;
                }
                stnInstance.x = this._stnRealX(stnId);
                stnInstance.y = this._stnRealY(stnId);
                stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
                stnInstance.state = this._stnState(stnId);
            }
            RMGLine.clearSVG();
            this.drawStns();
            this.drawLine();
            this.drawStrip();
        }
        else {
            this.stations[stnId].x = this._stnRealX(stnId);
            this.stations[stnId].y = this._stnRealY(stnId);
            this.stations[stnId].namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
            this.stations[stnId].state = this._stnState(stnId);
            $(`#stn_icons #${stnId}`).remove();
            $('#stn_icons').append(this.stations[stnId].html);
            $('#stn_icons').html($('#stn_icons').html());
        }
        this.loadFonts();
        this.updateStnNameBg();
    }
    removeStn(stnId) {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        var parents = this.stations[stnId].parents;
        var children = this.stations[stnId].children;
        var isLastMainBranchStn = true;
        for (let id in this.stations) {
            if ([stnId, 'linestart', 'lineend'].includes(id)) {
                continue;
            }
            if (this._stnYShareMTR(id) == 0) {
                isLastMainBranchStn = false;
                break;
            }
        }
        if (parents.length == 2 && children.length == 2) {
            // To be rewritten, join two branches
            return false;
        }
        else if (isLastMainBranchStn) {
            // Last main line station
            return false;
        }
        else if (Object.keys(param.stn_list).length == 4) {
            // Last two stations
            return false;
        }
        else if (parents.length == 2 || children.length == 2) {
            parents.forEach(parId => {
                param.stn_list[parId].children = children;
                this.stations[parId].children = children;
            });
            children.forEach(childId => {
                param.stn_list[childId].parents = parents;
                this.stations[childId].parents = parents;
            });
            if (parents.length == 1) {
                param.stn_list[parents[0]].branch.right = this.stations[stnId].branch.right;
                this.stations[parents[0]].branch.right = this.stations[stnId].branch.right;
            }
            if (children.length == 1) {
                param.stn_list[children[0]].branch.left = this.stations[stnId].branch.left;
                this.stations[children[0]].branch.left = this.stations[stnId].branch.left;
            }
        }
        else if (this._stnOutdegree(parents[0]) == 2 && this._stnIndegree(children[0]) == 2) {
            // 1 par 1 child, last station on upper/lower branch
            // branch disappear
            var childIdxOfPar = this.stations[parents[0]].children.indexOf(stnId);
            var parIdxOfChild = this.stations[children[0]].parents.indexOf(stnId);
            param.stn_list[parents[0]].children.splice(childIdxOfPar, 1);
            this.stations[parents[0]].children.splice(childIdxOfPar, 1);
            param.stn_list[children[0]].parents.splice(parIdxOfChild, 1);
            this.stations[children[0]].parents.splice(parIdxOfChild, 1);
            param.stn_list[parents[0]].branch.right = [];
            this.stations[parents[0]].branch.right = [];
            param.stn_list[children[0]].branch.left = [];
            this.stations[children[0]].branch.left = [];
        }
        else {
            // 1 par 1 child
            parents.forEach(parId => {
                var idx = param.stn_list[parId].children.indexOf(stnId);
                if (children.length) {
                    param.stn_list[parId].children[idx] = children[0];
                    this.stations[parId].children[idx] = children[0];
                }
                else {
                    // Right dest
                    param.stn_list[parId].children.splice(idx, 1);
                    this.stations[parId].children.splice(idx, 1);
                }
                if (this.stations[parId].branch.right[1] === stnId) {
                    this.stations[parId].branch.right[1] = children[0];
                    param.stn_list[parId].branch.right[1] = children[0];
                }
            });
            children.forEach(childId => {
                var idx = param.stn_list[childId].parents.indexOf(stnId);
                if (parents.length) {
                    param.stn_list[childId].parents[idx] = parents[0];
                    this.stations[childId].parents[idx] = parents[0];
                }
                else {
                    // Left dest
                    param.stn_list[childId].parents.splice(idx, 1);
                    this.stations[childId].parents.splice(idx, 1);
                }
                if (this.stations[childId].branch.left[1] === stnId) {
                    this.stations[childId].branch.left[1] = parents[0];
                    param.stn_list[childId].branch.left[1] = parents[0];
                }
            });
        }
        delete param.stn_list[stnId];
        delete this.stations[stnId];
        var isCurrentStnChanged = false;
        if (this._currentStnId == stnId) {
            var newCurrentStnId = Object.keys(this.stations)[2];
            this._currentStnId = newCurrentStnId;
            param.current_stn_idx = newCurrentStnId;
            isCurrentStnChanged = true;
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        parents.concat(children).forEach(neId => {
            if (['linestart', 'lineend'].includes(neId)) {
                return;
            }
            this.stations[neId] = this._initStnInstance(neId, param.stn_list[neId]);
        });
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
        return true;
    }
    newStnPossibleLoc(prep, stnId) {
        var deg = (prep == 'before') ? this._stnIndegree(stnId) : this._stnOutdegree(stnId);
        switch (deg) {
            case 2:
                // 1 -> 2
                return [1, 1, 1, [], []];
            case 1:
                if (this._stnYShareMTR(stnId) == 0) {
                    // 1 -> 1
                    let state = this.newBranchPossibleEnd(prep, stnId);
                    state = (state.length) ? state : [];
                    return [1, 0, 0, state, state];
                    // [1,0,0,1,1];
                }
                else if (this._stnYShareMTR(stnId) < 0) {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                }
                else {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                }
        }
        return [0, 0, 0, [], []];
    }
    newBranchPossibleEnd(prep, stnId) {
        let res = [];
        if (prep == 'before') {
            while (this._stnIndegree(stnId) == 1) {
                stnId = this.stations[stnId].parents[0];
                res.unshift(stnId);
            }
            res.pop();
        }
        else {
            while (this._stnOutdegree(stnId) == 1) {
                stnId = this.stations[stnId].children[0];
                res.push(stnId);
            }
            res.shift();
        }
        return res;
    }
    addStn(prep, stnId, loc, end) {
        let newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        while (Object.keys(this.stations).includes(newId)) {
            newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        }
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        let newInfo = {};
        if (prep == 'before') {
            if (loc == 'centre') {
                newInfo.parents = this.stations[stnId].parents;
                if (this._stnIndegree(stnId) == 0 && this._stnYShareMTR(stnId) != 0) {
                    newInfo.children = this.leftDests;
                }
                else if (this._stnYShareMTR(stnId) != 0) {
                    // pivot on branch
                    newInfo.children = this.stations[this.stations[stnId].parents[0]].children;
                    newInfo.branch = {
                        left: [],
                        right: this.stations[newInfo.parents[0]].branch.right
                    };
                    this.stations[newInfo.parents[0]].branch.right = [];
                    param.stn_list[newInfo.parents[0]].branch.right = [];
                }
                else {
                    // pivot on main
                    newInfo.children = [stnId];
                    newInfo.branch = {
                        left: this.stations[stnId].branch.left,
                        right: []
                    };
                    this.stations[stnId].branch.left = [];
                    param.stn_list[stnId].branch.left = [];
                }
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[0]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(0, 1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[0] = newId;
                    param.stn_list[stnId].parents[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children[0] = newId;
                        param.stn_list[par].children[0] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[1]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[1] = newId;
                    param.stn_list[stnId].parents[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        let parChildLen = this.stations[par].children.length;
                        this.stations[par].children[parChildLen - 1] = newId;
                        param.stn_list[par].children[parChildLen - 1] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left = ['through', newId];
                param.stn_list[stnId].branch.left = ['through', newId];
                this.stations[end].branch.right = ['through', newId];
                param.stn_list[end].branch.right = ['through', newId];
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.unshift(newId);
                param.stn_list[end].children.unshift(newId);
                this.stations[stnId].parents.unshift(newId);
                param.stn_list[stnId].parents.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left = ['through', newId];
                param.stn_list[stnId].branch.left = ['through', newId];
                this.stations[end].branch.right = ['through', newId];
                param.stn_list[end].branch.right = ['through', newId];
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.push(newId);
                param.stn_list[end].children.push(newId);
                this.stations[stnId].parents.push(newId);
                param.stn_list[stnId].parents.push(newId);
            }
        }
        else {
            if (loc == 'centre') {
                newInfo.children = this.stations[stnId].children;
                if (this._stnOutdegree(stnId) == 0 && this._stnYShareMTR(stnId) != 0) {
                    newInfo.parents = this.rightDests;
                }
                else if (this._stnYShareMTR(stnId) != 0) {
                    // pivot on branch
                    newInfo.parents = this.stations[this.stations[stnId].children[0]].parents;
                    newInfo.branch = {
                        left: this.stations[newInfo.children[0]].branch.left,
                        right: []
                    };
                    this.stations[newInfo.children[0]].branch.left = [];
                    param.stn_list[newInfo.children[0]].branch.left = [];
                }
                else {
                    // pivot on main
                    newInfo.parents = [stnId];
                    newInfo.branch = {
                        left: [],
                        right: this.stations[stnId].branch.right
                    };
                    this.stations[stnId].branch.right = [];
                    param.stn_list[stnId].branch.right = [];
                }
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[0]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(0, 1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[0] = newId;
                    param.stn_list[stnId].children[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents[0] = newId;
                        param.stn_list[child].parents[0] = newId;
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[1]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[1] = newId;
                    param.stn_list[stnId].children[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        if (this._stnIndegree(child) === 1) {
                            this.stations[child].parents[0] = newId;
                            param.stn_list[child].parents[0] = newId;
                        }
                        else {
                            this.stations[child].parents[1] = newId;
                            param.stn_list[child].parents[1] = newId;
                        }
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.unshift(newId);
                param.stn_list[end].parents.unshift(newId);
                this.stations[stnId].children.unshift(newId);
                param.stn_list[stnId].children.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.push(newId);
                param.stn_list[end].parents.push(newId);
                this.stations[stnId].children.push(newId);
                param.stn_list[stnId].children.push(newId);
            }
        }
        newInfo.name = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getNameFromId"])(newId);
        newInfo.change_type = 'none';
        newInfo.num = '00';
        newInfo.interchange = [[]];
        newInfo.transfer = {
            info: [[]],
            type: 'none',
            osi_names: [],
            paid_area: true,
            tick_direc: 'r'
        };
        param.stn_list[newId] = newInfo;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[newId] = this._initStnInstance(newId, newInfo);
        this.stations[stnId] = this._initStnInstance(stnId, Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId]);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
            stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        this.loadFonts();
        this.updateStnNameBg();
        return [newId, newInfo];
    }
    reverseStns() {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (stnId === 'linestart') {
                param.stn_list['lineend'].parents = stnInstance.children.reverse();
                param.stn_list['lineend'].branch = {
                    left: stnInstance.branch.right,
                    right: []
                };
            }
            else if (stnId === 'lineend') {
                param.stn_list['linestart'].children = stnInstance.parents.reverse();
                param.stn_list['linestart'].branch = {
                    left: [],
                    right: stnInstance.branch.left
                };
            }
            else {
                var tmpArr = stnInstance.children.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].children = stnInstance.parents.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].parents = tmpArr;
                param.stn_list[stnId].branch.left = stnInstance.branch.right;
                param.stn_list[stnId].branch.right = stnInstance.branch.left;
            }
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        location.reload(true);
    }
    updateBranchType(stnId, direction, type) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][0] === type) {
            return;
        }
        this.stations[stnId].branch[direc][0] = type;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].branch[direc][0] = type;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    updateBranchFirst(stnId, direction, first) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][1] === first) {
            return false;
        }
        let branchEndId = first;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            let branchFirstIdx = this.stations[stnId].children.indexOf(first);
            this.stations[stnId].branch.right[1] = param.stn_list[stnId].branch.right[1] = first;
            this.stations[branchEndId].branch.left[1] = param.stn_list[branchEndId].branch.left[1] = this.stations[branchEndId].parents[branchFirstIdx];
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            let branchFirstIdx = this.stations[stnId].parents.indexOf(first);
            this.stations[stnId].branch.left[1] = param.stn_list[stnId].branch.left[1] = first;
            this.stations[branchEndId].branch.right[1] = param.stn_list[branchEndId].branch.right[1] = this.stations[branchEndId].children[branchFirstIdx];
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
        return true;
    }
    updateBranchPos(stnId, direction, pos) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (direc === 'right') {
            if (this.stations[stnId].children.indexOf(this.stations[stnId].branch.right[1]) === pos) {
                return;
            }
        }
        else {
            if (this.stations[stnId].parents.indexOf(this.stations[stnId].branch.left[1]) === pos) {
                return;
            }
        }
        let branchEndId = this.stations[stnId].branch[direc][1];
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            this.stations[stnId].children.reverse();
            param.stn_list[stnId].children.reverse();
            this.stations[branchEndId].parents.reverse();
            param.stn_list[branchEndId].parents.reverse();
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            this.stations[stnId].parents.reverse();
            param.stn_list[stnId].parents.reverse();
            this.stations[branchEndId].children.reverse();
            param.stn_list[branchEndId].children.reverse();
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        this.loadFonts();
    }
    static clearSVG() {
        $('#stn_icons, #line_main, #line_pass').empty();
    }
    static initSVG(line) {
        line.drawSVGFrame();
        line.showFrameOuter();
        line.drawStns();
        line.fillThemeColour();
        line.drawLine();
        line.drawStrip();
        line.drawDestInfo();
        line.loadFonts();
        line.updateStnNameBg();
    }
    /**
     * Getter of all branches (支線段) of the line. The first branch must be the main line.
     */
    get branches() {
        var stack = ['linestart'];
        var branches = [[]];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount][0] || null;
            var curBranch = [curId];
            if (prevId) {
                curBranch.unshift(prevId);
            }
            while (true) {
                if (curId == 'lineend') {
                    break;
                }
                if (curId != 'linestart' && prevId == this.stations[curId].branch.left[1]) {
                    // branch ends
                    break;
                }
                else {
                    prevId = curId;
                    var children = this.stations[prevId].children;
                    switch (children.length) {
                        case 1:
                            curId = children[0];
                            break;
                        case 2:
                            branches.push([prevId]);
                            if (prevId == 'linestart') {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            else {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            // var branchNextId = getParams().stn_list[prevId].branch.right[1];
                            stack.push(branchNextId);
                            curId = children.filter(stnId => stnId != branchNextId)[0];
                            break;
                    }
                    curBranch.push(curId);
                }
            }
            branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches.map(branch => {
            return branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));
        });
    }
    /**
     * Getter of routes (行車交路) of the line. The first route must be the main line.
     */
    get routes() {
        var stack = ['linestart'];
        var branches = [['linestart']];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount].slice().reverse()[0] || null;
            if (prevId && curId !== 'linestart') {
                branches[branchCount].push(curId);
            }
            else {
                branches[branchCount] = [curId];
            }
            while (curId !== 'lineend') {
                prevId = curId;
                var children = this.stations[prevId].children;
                switch (children.length) {
                    case 1:
                        curId = children[0];
                        break;
                    case 2:
                        var branchNextId = this.stations[prevId].branch.right[1];
                        // if (branchCount === 0) {
                        if (this.stations[prevId].branch.right[0] === 'through') {
                            branches.push(branches[branchCount].slice());
                            stack.push(branchNextId);
                        }
                        else {
                            if (branchCount === 0) {
                                branches.push([prevId]);
                                stack.push(branchNextId);
                            }
                            // branches.push([prevId]);
                        }
                        // stack.push(branchNextId);
                        // }
                        curId = children.filter(stnId => stnId != branchNextId)[0];
                        break;
                }
                branches[branchCount].push(curId);
                if (prevId === this.stations[curId].branch.left[1] && this.stations[curId].branch.left[0] === 'nonthrough') {
                    break;
                }
            }
            // branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches;
    }
}


/***/ }),

/***/ "./src/Line/init.ts":
/*!**************************!*\
  !*** ./src/Line/init.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line */ "./src/Line/Line.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const getLineClass = (style) => __awaiter(void 0, void 0, void 0, function* () {
    switch (style) {
        case 'mtr':
            return Promise.resolve(_Line__WEBPACK_IMPORTED_MODULE_2__["RMGLine"]);
        // lazy loading
        case 'gzmtr':
            return __webpack_require__.e(/*! import() | LineGZ */ "LineGZ").then(__webpack_require__.bind(null, /*! ./LineGZ */ "./src/Line/LineGZ.ts"))
                .then(({ RMGLineGZ }) => RMGLineGZ);
        case 'shmetro':
            return __webpack_require__.e(/*! import() | LineSH */ "LineSH").then(__webpack_require__.bind(null, /*! ./LineSH */ "./src/Line/LineSH.ts"))
                .then(({ RMGLineSH }) => RMGLineSH);
        // any other styles
    }
});
/* harmony default export */ __webpack_exports__["default"] = (function () {
    const loadLine = (param) => __awaiter(this, void 0, void 0, function* () {
        let lineClass = yield getLineClass(window.urlParams.get('style'));
        window.myLine = yield new lineClass(param);
        lineClass.initSVG(window.myLine);
    });
    if (localStorage.rmgParam != null) {
        try {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        }
        catch (err) {
            let initErrDiag = _material_dialog__WEBPACK_IMPORTED_MODULE_1__["MDCDialog"].attachTo($('#init_err_diag')[0]);
            $('#init_err_diag')
                .find('#err_stack')
                .html(err + '<br>' + err.stack.replace(/\n/g, '<br>'));
            initErrDiag.open();
            console.error(err);
        }
    }
    else {
        $.getJSON(`templates/blank.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        });
    }
});


/***/ }),

/***/ "./src/PageInitialiser/design.ts":
/*!***************************************!*\
  !*** ./src/PageInitialiser/design.ts ***!
  \***************************************/
/*! exports provided: common, mtr, gzmtr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mtr", function() { return mtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzmtr", function() { return gzmtr; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/list */ "@material/list");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_list__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/select */ "@material/select");
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_select__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material/switch */ "@material/switch");
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_switch__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material/ripple */ "@material/ripple");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ripple__WEBPACK_IMPORTED_MODULE_6__);







function common() {
    // mdc instances
    const designList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list')[0]);
    const [themeDialog, lineNameDialog] = ['#design_theme_diag', '#line_name_diag'].map(selector => _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($(selector)[0]));
    const [themeCitySelect, themeLineSelect] = ['#theme_city', '#theme_line'].map(selector => new _material_select__WEBPACK_IMPORTED_MODULE_3__["MDCSelect"]($(selector)[0]));
    // const themeCitySelect = new MDCSelect($('#theme_city')[0]);
    // const themeLineSelect = new MDCSelect($('#theme_line')[0]);
    const [lineNameZHTextField, lineNameENTextField] = ['#name_zh', '#name_en'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($('#line_name_diag').find(selector)[0]));
    const platformNumTextField = _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($('#platform_num')[0]);
    $('#panel_design .mdc-list li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_6__["MDCRipple"](el));
    // helper functions
    const getDirectionText = (direc) => {
        return $('#design_list')
            .find(`li#direc p#${direc}`)
            .text();
    };
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        $('#design_list')
            .find('li#name .mdc-list-item__secondary-text')
            .text(param.line_name.join());
        lineNameZHTextField.value = param.line_name[0];
        lineNameENTextField.value = param.line_name[1];
        $('#design_list')
            .find('li#direc .mdc-list-item__secondary-text')
            .text(getDirectionText(param.direction));
        platformNumTextField.value = param.platform_num;
    });
    $.getJSON('data/city_list.json', (data) => {
        let lang = window.urlParams.get('lang');
        data.forEach(c => {
            $('#theme_city__selection').append($('<li>', {
                class: 'mdc-list-item',
                'data-value': c.id
            }).text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["countryCode2Emoji"])(c.country) + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(c.name, lang)));
        });
        $('#theme_city__selection li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_6__["MDCRipple"](el));
        var [themeCity] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().theme;
        var cityIdx = $(`#theme_city__selection > [data-value="${themeCity}"]`).index();
        themeCitySelect.selectedIndex = cityIdx;
    });
    // add event listeners
    designList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                themeDialog.open();
                break;
            case 1:
                lineNameDialog.open();
                break;
            case 2:
                if (Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().direction == 'r') {
                    console.log('right to left');
                    window.myLine.direction = 'l';
                    $('#design_list').find('li#direc .mdc-list-item__secondary-text').text(getDirectionText('l'));
                }
                else {
                    console.log('left to right');
                    window.myLine.direction = 'r';
                    $('#design_list').find('li#direc .mdc-list-item__secondary-text').text(getDirectionText('r'));
                }
                break;
            case 4:
                window.myLine.reverseStns();
                break;
        }
    });
    themeDialog.listen('MDCDialog:opened', () => {
        [themeCitySelect, themeLineSelect].map(select => select.layout());
    });
    themeCitySelect.listen("MDCSelect:change", (event) => {
        let city = event.detail.value;
        $('#theme_line__selection').empty();
        $.getJSON(`data/${city}.json`, (data) => {
            var lang = window.urlParams.get('lang');
            data.forEach(l => {
                $('#theme_line__selection').append($('<li>', {
                    class: 'mdc-list-item',
                    'data-value': l.id
                }).append($('<span>').css({
                    background: l.colour,
                    color: l.fg || '#fff'
                }).text('\u00a0' + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(l.name, lang) + '\u00a0')));
            });
            $('#theme_line__selection li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_6__["MDCRipple"](el));
            var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
            param.theme[0] = city;
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
            var lineIdx = $(`#theme_line__selection > [data-value="${param.theme[1]}"]`).index();
            themeLineSelect.selectedIndex = lineIdx == -1 ? 0 : lineIdx;
        });
    });
    themeLineSelect.listen("MDCSelect:change", (event) => {
        let lineIdx = event.detail.index;
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.theme[1] = event.detail.value;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        window.myLine.themeLine = event.detail.value;
        window.myLine.themeColour = ['background-color', 'color']
            .map(prop => $('#theme_line__selection span').eq(lineIdx).css(prop))
            .map(_utils__WEBPACK_IMPORTED_MODULE_0__["rgb2Hex"]);
        $('#design_list')
            .find('li#theme .mdc-list-item__secondary-text')
            .html($('#theme_city__selection li').eq(themeCitySelect.selectedIndex).text() +
            ' ' +
            $('#theme_line__selection li').eq(lineIdx).html().trim());
    });
    lineNameDialog.listen('MDCDialog:opened', event => {
        [lineNameZHTextField, lineNameENTextField].map(textfield => textfield.layout());
    });
    $('#line_name_diag')
        .find('.mdc-text-field')
        .on('input', () => {
        let lineNames = [lineNameZHTextField, lineNameENTextField].map(textfield => textfield.value);
        window.myLine.lineNames = lineNames;
        $('#design_list')
            .find('li#name .mdc-list-item__secondary-text')
            .text(lineNames.join());
    });
    $(platformNumTextField.root_).find('input')
        .on('input', event => window.myLine.platformNum = event.target.value);
}
function mtr() {
    // mdc instances
    const designListMTRList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list_mtr')[0]);
    const charDialog = _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($('#design_char_diag')[0]);
    const legacySwitch = new _material_switch__WEBPACK_IMPORTED_MODULE_5__["MDCSwitch"]($('#legacy')[0]);
    // helper functions
    const getCharText = (char) => {
        return $('#design_char_diag')
            .find('li')
            .filter((_, el) => el.dataset.mdcDialogAction === char)
            .find('span')
            .text();
    };
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        // $('#design_list_mtr')
        //     .find('li#char .mdc-list-item__secondary-text')
        //     .text(getCharText(param.char_form));
        $('#design_char_diag')[0].dispatchEvent(new CustomEvent('MDCDialog:closed', { detail: { action: param.char_form } }));
        // charDialog.close(param.char_form);
        legacySwitch.checked = param.dest_legacy;
    });
    // add event listeners
    designListMTRList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                window.myLine.txtFlip = !Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().txt_flip;
                break;
            case 1:
                charDialog.open();
                break;
        }
    });
    charDialog.listen('MDCDialog:closed', (event) => {
        let char = event.detail.action;
        if (char == 'close') {
            return;
        }
        window.myLine.charForm = char;
        $('#design_list_mtr')
            .find('li#char .mdc-list-item__secondary-text')
            .text(getCharText(char));
    });
    $(legacySwitch.root_).find('input')
        .on('change', event => window.myLine.destLegacy = event.target.checked);
}
function gzmtr() {
    // mdc instances
    const designListGZMTRList = _material_list__WEBPACK_IMPORTED_MODULE_1__["MDCList"].attachTo($('#design_list_gzmtr')[0]);
    const panelTypeDialog = _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($('#panel_type_diag')[0]);
    const [psdNumTextField, lineNumTextField] = ['#psd_num', '#line_num'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_4__["MDCTextField"].attachTo($(selector)[0]));
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        psdNumTextField.value = param.psd_num;
        lineNumTextField.value = param.line_num;
    });
    // add event listeners
    designListGZMTRList.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 1:
                panelTypeDialog.open();
                break;
        }
    });
    $(lineNumTextField.root_).find('input')
        .on('input', event => window.myLine.lineNum = event.target.value);
    $(psdNumTextField.root_).find('input')
        .on('input', event => window.myLine.psdNum = event.target.value);
    panelTypeDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action === 'close') {
            return;
        }
        window.myLine.infoPanelType = event.detail.action;
    });
}


/***/ }),

/***/ "./src/PageInitialiser/info.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/info.ts ***!
  \*************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
function common() {
    $('#panel_info .mdc-card__actions #report').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator/issues', '_blank');
    });
    $('#panel_info .mdc-card__action-icons [title="Star"]').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator', '_blank');
    });
    $('#panel_info .mdc-card__action-icons [title="Fork"]').on('click', () => {
        window.open('https://github.com/wongchito/RailMapGenerator/fork', '_blank');
    });
}


/***/ }),

/***/ "./src/PageInitialiser/init.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/init.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ "./src/PageInitialiser/layout.ts");
/* harmony import */ var _design__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./design */ "./src/PageInitialiser/design.ts");
/* harmony import */ var _stations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stations */ "./src/PageInitialiser/stations.ts");
/* harmony import */ var _info__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./info */ "./src/PageInitialiser/info.ts");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/tab-bar */ "@material/tab-bar");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_tab_bar__WEBPACK_IMPORTED_MODULE_4__);





/* harmony default export */ __webpack_exports__["default"] = (function () {
    let firstInit = [false, true, true, true, true];
    window.sliders = [];
    _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__["MDCTabBar"].attachTo($('#panels .mdc-tab-bar')[0]).listen('MDCTabBar:activated', (event) => {
        $('.panel--active').removeClass('panel--active');
        $('.panel').eq(event.detail.index).addClass('panel--active');
        if (event.detail.index == 1 && firstInit[1]) {
            _layout__WEBPACK_IMPORTED_MODULE_0__["common"]();
            if (window.urlParams.get('style') === 'gzmtr') {
                _layout__WEBPACK_IMPORTED_MODULE_0__["gzmtr"]();
            }
            firstInit[1] = false;
        }
        if (event.detail.index === 1) {
            window.sliders.forEach(slider => slider.layout());
        }
        if (event.detail.index == 2 && firstInit[2]) {
            _design__WEBPACK_IMPORTED_MODULE_1__["common"]();
            switch (window.urlParams.get('style')) {
                case 'mtr':
                    _design__WEBPACK_IMPORTED_MODULE_1__["mtr"]();
                    break;
                case 'gzmtr':
                    _design__WEBPACK_IMPORTED_MODULE_1__["gzmtr"]();
                    break;
            }
            firstInit[2] = false;
        }
        if (event.detail.index == 3 && firstInit[3]) {
            console.log('init again');
            _stations__WEBPACK_IMPORTED_MODULE_2__["common"]();
            firstInit[3] = false;
        }
        if (event.detail.index == 4 && firstInit[4]) {
            _info__WEBPACK_IMPORTED_MODULE_3__["common"]();
            firstInit[4] = false;
        }
    });
});


/***/ }),

/***/ "./src/PageInitialiser/layout.ts":
/*!***************************************!*\
  !*** ./src/PageInitialiser/layout.ts ***!
  \***************************************/
/*! exports provided: common, gzmtr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzmtr", function() { return gzmtr; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_slider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/slider */ "@material/slider");
/* harmony import */ var _material_slider__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_slider__WEBPACK_IMPORTED_MODULE_2__);



function common() {
    // mdc instances
    const [svgDestWidthTextField, svgWidthTextField] = ['#svg_dest_width', '#svg_width'].map(selector => _material_textfield__WEBPACK_IMPORTED_MODULE_1__["MDCTextField"].attachTo($(selector)[0]));
    const [branchSpacingSlider, yPcSlider, paddingSlider] = ['#branch_spacing', '#y_pc', '#padding'].map(selector => _material_slider__WEBPACK_IMPORTED_MODULE_2__["MDCSlider"].attachTo($(selector)[0]));
    window.sliders.push(branchSpacingSlider, yPcSlider, paddingSlider);
    // $('#panel_layout .mdc-list li').map((_,el) => new MDCRipple(el));
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        svgDestWidthTextField.value = param.svg_dest_width.toString();
        svgWidthTextField.value = param.svg_width.toString();
        yPcSlider.value = param.y_pc;
        branchSpacingSlider.value = param.branch_spacing;
        paddingSlider.value = param.padding;
    });
    // add event listeners
    $(svgDestWidthTextField.root_).find('input')
        .on('input', event => window.myLine.svgDestWidth = Number(event.target.value));
    $(svgWidthTextField.root_).find('input')
        .on('input', event => window.myLine.svgWidth = Number(event.target.value));
    branchSpacingSlider.listen('MDCSlider:input', () => {
        window.myLine.branchSpacing = Number(branchSpacingSlider.value);
    });
    yPcSlider.listen('MDCSlider:input', () => {
        window.myLine.yPc = Number(yPcSlider.value);
    });
    paddingSlider.listen('MDCSlider:input', () => {
        window.myLine.padding = Number(paddingSlider.value);
    });
}
function gzmtr() {
    // mdc instances
    const [directionGZXSlider, directionGZYSlider] = ['#direction_gz_x', '#direction_gz_y']
        .map(selector => _material_slider__WEBPACK_IMPORTED_MODULE_2__["MDCSlider"].attachTo($(selector)[0]));
    window.sliders.push(directionGZXSlider, directionGZYSlider);
    // init values
    Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])())
        .then(param => {
        directionGZXSlider.value = param.direction_gz_x;
        directionGZYSlider.value = param.direction_gz_y;
    });
    // add event listeners
    directionGZXSlider.listen('MDCSlider:input', () => {
        window.myLine.directionGZX = Number(directionGZXSlider.value);
    });
    directionGZYSlider.listen('MDCSlider:input', () => {
        window.myLine.directionGZY = Number(directionGZYSlider.value);
    });
}


/***/ }),

/***/ "./src/PageInitialiser/save.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/save.ts ***!
  \*************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Line_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Line/Line */ "./src/Line/Line.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/list */ "@material/list");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_list__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/ripple */ "@material/ripple");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_ripple__WEBPACK_IMPORTED_MODULE_4__);





function common() {
    // mdc intances 
    const [templateDialog, importDialog, exportDialog, previewDialog, styleDialog, langDialog] = ['#template_diag', '#import_diag', '#export_diag', '#preview_diag', '#style_diag', '#lang_diag']
        .map(selector => _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($(selector)[0]));
    const [saveList0, saveList1] = $('#panel_save .mdc-list').map((_, el) => _material_list__WEBPACK_IMPORTED_MODULE_3__["MDCList"].attachTo(el)).get();
    $('#panel_save .mdc-list li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_4__["MDCRipple"](el));
    saveList0.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                templateDialog.open();
                break;
            case 1:
                $('#upload_file').click();
                break;
            case 2:
                // var link = document.createElement('a');
                // var data = new Blob([localStorage.rmgParam], {type: 'application/json;charset=utf-8'});
                // var url = window.URL.createObjectURL(data);
                // link.href = url;
                // link.download = 'rmg_config.json';
                // link.click();
                // URL.revokeObjectURL(url);
                // break;
                var link = $('<a>', {
                    href: 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(localStorage.rmgParam))),
                    download: 'rmg_param.json'
                });
                link[0].click();
                break;
            case 3:
                exportDialog.open();
                break;
        }
    });
    $('#panel_save .mdc-list:nth-child(2) li:first-child span:nth-child(2) span:last-child')
        .attr('trans-tag', $(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).attr('trans-tag'))
        .text($(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).text());
    $('#panel_save .mdc-list:nth-child(2) li:nth-child(2) span:nth-child(2) span:last-child')
        .text($(`#lang_diag [data-mdc-dialog-action="${window.urlParams.get('lang')}"] span`).text());
    saveList1.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                styleDialog.open();
                break;
            case 1:
                langDialog.open();
                break;
        }
    });
    $.getJSON('templates/template_list.json', data => {
        var lang = window.urlParams.get('lang');
        data.forEach(d => {
            $('#template_diag ul').append($('<li>', {
                class: "mdc-list-item",
                'data-mdc-dialog-action': d.filename
            }).append($('<span>', { class: "mdc-list-item__text" }).text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(d.desc, lang))));
        });
        $('#template_diag li:first-child').attr('tabindex', 0);
        $('#theme_line__selection li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_4__["MDCRipple"](el));
    });
    templateDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        $.getJSON(`templates/${event.detail.action}.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            location.reload(true);
        });
    });
    exportDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
                break;
            case 'svg1':
                $('#preview_diag').attr('for', 'destination');
                previewDialog.open();
                break;
            case 'svg2':
                $('#preview_diag').attr('for', 'railmap');
                previewDialog.open();
                break;
        }
    });
    $(window).on('resize', _ => {
        resizeSVGPreview();
        // $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width()-32}px;`);
    });
    const resizeSVGPreview = () => {
        var svgId = $('preview_diag').attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $('#preview_diag')
            .find('svg')
            .attr({
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        });
        $('#preview_diag')
            .find('.mdc-dialog__surface')
            .attr('style', `max-width:${MAX_WIDTH + 50}px;`);
    };
    previewDialog.listen('MDCDialog:opened', event => {
        var svgId = $(event.target).attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width() - 32}px;`);
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $(event.target).find('.mdc-dialog__content')
            .append($('#' + $(event.target).attr('for')).clone().attr({
            style: 'all:initial;',
            viewBox: `0 0 ${thisSVGWidth} ${thisSVGHeight}`,
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        }));
        let cssTxt = ['share', $(event.target).find('svg')[0].id]
            .map(tag => {
            return Array.from($(`link#css_${tag}`)[0].sheet.cssRules).map(rule => rule.cssText).join(' ');
        });
        $(event.target).find('svg').prepend(...cssTxt.map(txt => $('<style>').text(txt)));
        $(event.target).find('svg [style="display: none;"]').remove();
    });
    previewDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action === 'close') {
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'png') {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["test"])($(event.target).removeAttr('for').find('svg'));
            $(event.target).find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'svg') {
            // Prepend css stylesheet to svg
            let svgContent = $(event.target).find('.mdc-dialog__content svg');
            // let cssTxt = ['share', svgContent[0].id]
            //     .map(tag => {
            //         return Array.from(
            //             ((<HTMLLinkElement>$(`link#css_${tag}`)[0]).sheet as CSSStyleSheet).cssRules
            //         ).map(rule => rule.cssText).join(' ');
            //     });
            // svgContent.prepend(
            //     ...cssTxt.map(txt => $('<style>').text(txt))
            // );
            var link = document.createElement('a');
            link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgContent[0].outerHTML)));
            link.download = 'rmg_export.svg';
            link.click();
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
        }
    });
    let importedFile;
    $('#upload_file')
        .on('change', event => {
        console.log(event.target.files[0]);
        let reader = new FileReader();
        reader.onload = function (e) {
            console.log(e.target);
            importedFile = JSON.parse(e.target.result);
            $('#import_diag')
                .find('.mdc-dialog__content')
                .html(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["describeParams"])(importedFile));
            importDialog.open();
        };
        reader.readAsText(event.target.files[0]);
    });
    importDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            $('#upload_file')[0].value = '';
            return;
        }
        _Line_Line__WEBPACK_IMPORTED_MODULE_1__["RMGLine"].clearSVG();
        localStorage.rmgParam = JSON.stringify(importedFile);
        location.reload(true);
    });
    styleDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
            case window.urlParams.get('style'):
                return;
            default:
                window.urlParams.set('style', event.detail.action);
                window.location.href = '?' + window.urlParams.toString();
        }
    });
    langDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var nextLang = event.detail.action;
        localStorage.rmgLang = nextLang;
        if (nextLang == window.urlParams.get('lang')) {
            return;
        }
        else {
            window.urlParams.set('lang', nextLang);
            window.location.href = '?' + window.urlParams.toString();
        }
    });
}


/***/ }),

/***/ "./src/PageInitialiser/stations.ts":
/*!*****************************************!*\
  !*** ./src/PageInitialiser/stations.ts ***!
  \*****************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/select */ "@material/select");
/* harmony import */ var _material_select__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_select__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/textfield */ "@material/textfield");
/* harmony import */ var _material_textfield__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_textfield__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/tab-bar */ "@material/tab-bar");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_tab_bar__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_chips__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material/chips */ "./node_modules/@material/chips/index.js");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material/ripple */ "@material/ripple");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ripple__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material/switch */ "@material/switch");
/* harmony import */ var _material_switch__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_material_switch__WEBPACK_IMPORTED_MODULE_7__);









const getStationCard = (id, names, num) => {
    return $('<div>', {
        id: id,
        class: 'mdc-card mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-2-phone station-card'
    })
        .append($('<div>', { class: 'mdc-card__primary-action' })
        .append($('<div>', { class: 'mdc-card__media mdc-card__media--16-9' }))
        .append($('<div>', { class: 'mdc-card__media-content station-card__content' })
        .html(names.join('<br>'))
        .prepend($('<span>')
        .css('display', window.urlParams.get('style') === 'gzmtr' ? 'inline' : 'none')
        .text(num + '\u00a0'))))
        .append($('<div>', { class: 'mdc-card__actions' })
        .append($('<div>', { class: 'mdc-card__action-icons' })
        .append($('<button>', {
        title: 'Set As Current',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('my_location'))
        .append($('<button>', {
        title: 'Interchange',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('edit'))
        .append($('<button>', {
        title: 'Remove',
        class: 'material-icons mdc-icon-button mdc-card__action mdc-card__action--icon'
    })
        .text('delete_forever'))));
};
const getIntBoxChip = (intInfo) => {
    let chipEl = $('<div>', { class: 'mdc-chip', role: 'row' })
        .css({
        'background-color': intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].colour],
        color: intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].fg]
    })
        .data('theme', {
        city: intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].city],
        line: intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].line]
    })
        .append($('<div>', { class: 'mdc-chip__ripple' }))
        .append($('<span>', { role: 'gridcell' })
        .append($('<span>', { role: 'button', tabindex: 0, class: 'mdc-chip__text' })
        .html(intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameZH] + '<br>' + intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameEN])))
        .append($('<span>', { role: 'gridcell' })
        .append($('<i>', { class: 'material-icons mdc-chip__icon mdc-chip__icon--trailing', tabindex: -1, role: 'button' })
        .text('cancel')));
    return chipEl[0];
};
const getIntInfoFromChip = (chip) => {
    return [
        $(chip).data('theme').city,
        $(chip).data('theme').line,
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["rgb2Hex"])($(chip).css('background-color')),
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["rgb2Hex"])($(chip).css('color')),
        $(chip).find('.mdc-chip__text').html().split('<br>')[0],
        $(chip).find('.mdc-chip__text').html().split('<br>')[1]
    ];
};
const getStnIntFromChipSets = (sets) => {
    let info = sets.map(set => {
        return $(set).find('.mdc-chip').get().map(el => getIntInfoFromChip(el));
    });
    let ns = info
        .map(int => int.length);
    if (ns[1] === 0) {
        info = [info[0]];
    }
    let changeType;
    if (ns[0] === 3 && ns[1] === 0) {
        changeType = 'int3'; // was int4
    }
    else if (ns[0] === 2 && ns[1] === 1) {
        changeType = 'osi31';
    }
    else if (ns[0] === 2 && ns[1] === 0) {
        changeType = 'int3';
    }
    else if (ns[0] === 1 && ns[1] === 2) {
        changeType = 'osi22';
    }
    else if (ns[0] === 1 && ns[1] === 1) {
        changeType = 'osi21';
    }
    else if (ns[0] === 1 && ns[1] === 0) {
        changeType = 'int2';
    }
    else if (ns[0] === 0 && ns[1] === 3) {
        changeType = 'osi13';
    }
    else if (ns[0] === 0 && ns[1] === 2) {
        changeType = 'osi12';
    }
    else if (ns[0] === 0 && ns[1] === 1) {
        changeType = 'osi11';
    }
    else if (ns[0] === 0 && ns[1] === 0) {
        changeType = 'none';
    }
    else {
        // sum(ns) > 3
        changeType = 'int3';
    }
    console.log(changeType);
    return { info, changeType };
};
const updateStnTransfer = (sets, tick, paid) => {
    let { changeType, info } = getStnIntFromChipSets(sets);
    let intInfo = info;
    let stnId = $('#stn_edit_diag').attr('for');
    if (changeType.indexOf('osi') !== -1) {
        let osiNames = $('button#osi_name .mdc-button__label').html().split('<br>');
        intInfo[1].unshift(osiNames);
    }
    let tickDirec;
    if (tick.selectedChipIds.length) {
        tickDirec = tick.selectedChipIds[0];
    }
    else {
        tickDirec = 'r';
    }
    let paidArea = paid.checked;
    if (changeType.indexOf('osi') !== -1) {
        changeType += '_' + (paidArea ? 'p' : 'u') + tickDirec;
    }
    else if (changeType.indexOf('int3') !== -1) {
        changeType += '_' + tickDirec;
    }
    window.myLine.updateStnTransfer(stnId, changeType, intInfo);
};
function common() {
    // Duplicate element
    var intNameEl = $('#stn_edit_diag .mdc-layout-grid__inner #int_name_zh,#int_name_en').slice(0, 2).clone();
    intNameEl.find('.mdc-text-field').removeAttr('data-mdc-auto-init-state'); // to be removed
    $('div#int_line').slice(1, 3).after(intNameEl);
    // mdc instances
    const [stnAddDialog, stnModifyDialog, stnEditDialog, stnIntBoxDialog, stnOSINameDialog, stnDeleteDialog, stnDeleteErrDialog] = ['#stn_add_diag', '#stn_modify_diag', '#stn_edit_diag', '#stn_intbox_diag', '#stn_osiname_diag', '#stn_delete_diag', '#stn_delete_err']
        .map(selector => new _material_dialog__WEBPACK_IMPORTED_MODULE_1__["MDCDialog"]($(selector)[0]));
    const [stnAddPrepSelect, stnAddPivotSelect, stnAddLocSelect, stnAddEndSelect] = ['#prep', '#pivot', '#loc', '#end'].map(selector => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($('#stn_add_diag').find(selector)[0]));
    const stnModifyNameFields = ['#name_zh', '#name_en'].map(selector => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_modify_diag').find(selector)[0]));
    const stnModifyNumField = new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_modify_diag #stn_num')[0]);
    const intChipAddButtonEls = $('#stn_edit_diag .mdc-icon-button').get();
    const intChipSetEls = $('#stn_edit_diag .mdc-chip-set.int-chip-set').get();
    const intChipSets = intChipSetEls.map(el => new _material_chips__WEBPACK_IMPORTED_MODULE_5__["MDCChipSet"](el));
    const osiNameButtonRipple = new _material_ripple__WEBPACK_IMPORTED_MODULE_6__["MDCRipple"]($('#stn_edit_diag #osi_name')[0]);
    const intCitySelect = new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($('#int_city')[0]);
    const intLineSelect = new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($('#int_line')[0]);
    const intBoxNameFields = ['zh', 'en'].map(lang => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_intbox_diag').find('#name_' + lang)[0]));
    const tickDirecChipSet = new _material_chips__WEBPACK_IMPORTED_MODULE_5__["MDCChipSet"]($('#tick_direc')[0]);
    // const tickDirecChips = $('#tick_direc .mdc-chip').map((_,el) => new MDCChip(el)).get();
    const paidAreaSwitch = new _material_switch__WEBPACK_IMPORTED_MODULE_7__["MDCSwitch"]($('#paid_area')[0]);
    const stnTransferTabBar = new _material_tab_bar__WEBPACK_IMPORTED_MODULE_4__["MDCTabBar"]($('#stn_edit_diag .mdc-tab-bar')[0]);
    const stnOSINameFields = ['zh', 'en'].map(lang => new _material_textfield__WEBPACK_IMPORTED_MODULE_3__["MDCTextField"]($('#stn_osiname_diag').find(`#osi_name_${lang}`)[0]));
    // const [tickDirecToggle, paidAreaToggle] = 
    //     ['#tick_direc', '#paid_area'].map(selector => new MDCIconButtonToggle($('#stn_edit_diag').find(selector)[0]));
    const [throughSelects, firstSelects, posSelects] = ['through', 'first', 'pos']
        .map(selector => ['left', 'right'].map(direc => new _material_select__WEBPACK_IMPORTED_MODULE_2__["MDCSelect"]($(`#${direc}_${selector}`)[0])));
    var stnList = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list;
    window.myLine.tpo.forEach(stnId => {
        $('#panel_stations .mdc-layout-grid__inner:first').append(getStationCard(stnId, stnList[stnId].name, stnList[stnId].num));
        $('#pivot__selection').append($('<li>', { 'data-value': stnId }).addClass('mdc-list-item').text(stnList[stnId].name.join()));
    });
    $('#panel_stations .mdc-card__primary-action').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        if (stnId == 'add_stn') {
            return;
        }
        $('#stn_modify_diag').attr('for', stnId);
        stnModifyDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Add"]').on('click', event => {
        stnAddDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Set As Current"]').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        window.myLine.currentStnId = stnId;
    });
    $('#panel_stations .mdc-card__action-icons > [title="Interchange"]').on('click', event => {
        $('#stn_edit_diag').attr('for', event.target.closest('.mdc-card').id);
        stnEditDialog.open();
    });
    $('#panel_stations .mdc-card__action-icons > [title="Remove"]').on('click', event => {
        var stnId = event.target.closest('.mdc-card').id;
        $('#stn_delete_diag').attr('for', stnId);
        stnDeleteDialog.open();
    });
    // Addition
    stnAddDialog.listen('MDCDialog:opening', () => {
        stnAddPivotSelect.selectedIndex = 0;
    });
    stnAddDialog.listen('MDCDialog:opened', () => {
        [stnAddPrepSelect, stnAddPivotSelect, stnAddLocSelect].forEach(select => select.layout());
    });
    stnAddDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var prep = stnAddPrepSelect.value;
        var stnId = stnAddPivotSelect.value;
        var loc = stnAddLocSelect.value;
        var end = stnAddEndSelect.value;
        var [newId, newInfo] = window.myLine.addStn(prep, stnId, loc, end);
        console.log(prep, stnId, loc, end);
        // _genStnList();
        var prevId = window.myLine.tpo[window.myLine.tpo.indexOf(newId) - 1] || 'add_stn';
        $(`#panel_stations .mdc-layout-grid__inner:first #${prevId}`).after(getStationCard(newId, newInfo.name, newInfo.num));
        // Add event listeners
        $(`#panel_stations #${newId} .mdc-card__primary-action`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            if (stnId == 'add_stn') {
                return;
            }
            $('#stn_modify_diag').attr('for', stnId);
            stnModifyDialog.open();
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Set As Current"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            window.myLine.currentStnId = stnId;
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Interchange"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            $('#stn_edit_diag').attr('for', stnId);
            stnEditDialog.open();
        });
        $(`#panel_stations #${newId} .mdc-card__action-icons > [title="Remove"]`).on('click', event => {
            var stnId = event.target.closest('.mdc-card').id;
            $('#stn_delete_diag').attr('for', stnId);
            stnDeleteDialog.open();
        });
        var listElem = $('<li>', {
            'data-value': newId, 'class': 'mdc-list-item'
        }).text(newInfo.name.join(' - '));
        if (prevId == 'add_stn') {
            $('#pivot__selection').prepend(listElem);
        }
        else {
            $(`#pivot__selection [data-value="${prevId}"`).after(listElem);
        }
        // Trigger station name modification
        $('#stn_modify_diag').attr('for', newId);
        stnModifyDialog.open();
    });
    stnAddPrepSelect.listen('MDCSelect:change', event => {
        $('#stn_add_diag #pivot')[0].dispatchEvent(new Event('MDCSelect:change'));
    });
    stnAddPivotSelect.listen('MDCSelect:change', event => {
        var prep = stnAddPrepSelect.value;
        var stnId = stnAddPivotSelect.value;
        var stnList = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list;
        for (let [idx, state] of window.myLine.newStnPossibleLoc(prep, stnId).entries()) {
            if (state === 1 || state.length) {
                $('#loc__selection li').eq(idx).show();
                if (idx >= 3) {
                    // newupper or newlower
                    $('#end__selection').empty();
                    state.forEach(stnId => {
                        $('#end__selection').append($('<li>', { class: 'mdc-list-item', 'data-value': stnId }).text(stnList[stnId].name.join(' - ')));
                    });
                }
            }
            else {
                $('#loc__selection li').eq(idx).hide();
            }
        }
        // stnAddLocSelect.value = $('#loc__selection li:not([style="display: none;"]):first').attr('data-value');
        stnAddLocSelect.value = Array
            .from(document.querySelectorAll('#loc__selection li'))
            .filter(el => el.style.display !== 'none')[0]
            .dataset.value;
    });
    stnAddLocSelect.listen('MDCSelect:change', (event) => {
        if (['newupper', 'newlower'].includes(event.detail.value)) {
            // $('#stn_add_diag #new_branch').show();
            $('#stn_add_diag [new-branch]').show();
            stnAddEndSelect.selectedIndex = 0;
        }
        else {
            // $('#stn_add_diag #new_branch').hide();
            $('#stn_add_diag [new-branch]').hide();
        }
    });
    // Modification (Name)
    stnModifyDialog.listen('MDCDialog:opening', event => {
        var stnId = $(event.target).attr('for');
        Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list)
            .then(stnList => {
            stnModifyNameFields.forEach((textfield, i) => textfield.value = stnList[stnId].name[i]);
            stnModifyNumField.value = stnList[stnId].num;
        });
    });
    stnModifyDialog.listen('MDCDialog:opened', () => {
        stnModifyNameFields.map(textfield => textfield.layout());
        stnModifyNumField.layout();
    });
    $('#stn_modify_diag').find('#name_zh, #name_en, #stn_num').on('input', () => {
        let names = stnModifyNameFields.map(textfield => textfield.value);
        var stnNum = stnModifyNumField.value;
        var stnId = $('#stn_modify_diag').attr('for');
        window.myLine.updateStnName(stnId, names, stnNum);
        $(`#panel_stations .mdc-layout-grid__inner:first #${stnId} .mdc-card__media-content`)
            .html(names.join('<br>'))
            .prepend($('<span>', { style: (window.urlParams.get('style') == 'gzmtr' ? '' : 'display:none;') }).text(stnNum + ' '));
        $(`li[data-value="${stnId}`).text(names.join());
    });
    // Modification (Interchange)
    const focusInterchange = () => {
        stnOSINameFields.forEach(textfield => textfield.layout());
    };
    const focusBranch = () => {
        [...throughSelects, ...firstSelects, ...posSelects]
            .map(select => select.layout());
    };
    const initInterchange = (stnInfo) => {
        $(intChipSetEls).empty();
        stnInfo.transfer.info.forEach((infos, i) => {
            infos.forEach((info, j) => {
                let chipEl = getIntBoxChip(info);
                intChipSetEls[i].appendChild(chipEl);
                intChipSets[i].addChip(chipEl);
            });
        });
        // // hide trailing icon if 1 chip only
        // intChipSetEls.forEach(el => {
        //     if ($(el).find('.mdc-chip').length === 1) {
        //         $(el).find('.mdc-chip__icon--trailing').parent().hide();
        //     }
        // });
        if (stnInfo.transfer.osi_names.length) {
            $('button#osi_name .mdc-button__label').html(stnInfo.transfer.osi_names[0].join('<br>'));
        }
        else {
            $('button#osi_name .mdc-button__label').html('車站名<br>Stn Name');
        }
        paidAreaSwitch.checked = stnInfo.transfer.paid_area;
        tickDirecChipSet.chips.filter(chip => chip.id === stnInfo.transfer.tick_direc)[0].selected = true;
    };
    const initBranch = (stnInfo) => {
        // through type
        ['left', 'right'].forEach((direc) => {
            let throughType = stnInfo.branch[direc][0];
            if (throughType) {
                throughSelects[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direc]].value = throughType;
                $(`#${direc}_through__selection [data-value="na"]`).hide();
                $(`#${direc}_through__selection [data-value="through"]`).show();
                $(`#${direc}_through__selection [data-value="nonthrough"]`).show();
                $(`[${direc}-first-group], [${direc}-pos-group]`).show();
            }
            else {
                throughSelects[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direc]].value = 'na';
                $(`#${direc}_through__selection [data-value="na"]`).show();
                $(`#${direc}_through__selection [data-value="through"]`).hide();
                $(`#${direc}_through__selection [data-value="nonthrough"]`).hide();
                $(`[${direc}-first-group], [${direc}-pos-group]`).hide();
            }
        });
        // first station
        $('#left_first__selection, #right_first__selection').empty();
        Promise.resolve(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list)
            .then(stnList => {
            [0, 1].forEach(i => {
                stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][i]]
                    .forEach(ne => {
                    $(`#${_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][i]}_first__selection`)
                        .append($('<li>', { class: 'mdc-list-item', 'data-value': ne })
                        .text(stnList[ne].name.join()));
                });
            });
        })
            .then(() => {
            throughSelects.forEach((select, idx) => {
                firstSelects[idx].selectedIndex =
                    select.value !== 'na' ?
                        stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][idx]].indexOf(stnInfo.branch[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][idx]][1]) :
                        0;
            });
        });
        // swap position
        posSelects.forEach((select, i) => {
            select.selectedIndex = stnInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["NeighbourPl"][i]].indexOf(stnInfo.branch[_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][i]][1]);
        });
    };
    stnTransferTabBar.listen('MDCTabBar:activated', (event) => {
        switch (event.detail.index) {
            case 0:
                $('#panel_interchange').show();
                $('#panel_branch').hide();
                focusInterchange();
                break;
            case 1:
                $('#panel_interchange').hide();
                $('#panel_branch').show();
                focusBranch();
        }
    });
    $.getJSON('data/city_list.json', data => {
        var lang = window.urlParams.get('lang');
        data.forEach(c => {
            $('#int_city__selection.mdc-list').each((_, el) => {
                $(el).append($('<li>', { class: 'mdc-list-item', 'data-value': c.id })
                    .text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["countryCode2Emoji"])(c.country) + Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(c.name, lang)));
            });
        });
    });
    stnEditDialog.listen('MDCDialog:opening', event => {
        let stnId = $(event.target).attr('for');
        let stnInfo = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId];
        initInterchange(stnInfo);
        initBranch(stnInfo);
    });
    stnEditDialog.listen('MDCDialog:opened', event => {
        focusInterchange();
        focusBranch();
    });
    intChipAddButtonEls.forEach((button, i) => {
        $(button).on('click', event => {
            let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
            let info = [param.theme[0], null, null, '#000', '線', 'Line'];
            let chipEl = getIntBoxChip(info);
            intChipSetEls[i].appendChild(chipEl);
            intChipSets[i].addChip(chipEl);
            updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
        });
    });
    intChipSets.forEach((chipset, i) => {
        chipset.listen('MDCChip:interaction', (event) => {
            // setIdx (0: int, 1: osi)
            $('#stn_intbox_diag').data('intId', { setIdx: i, chipId: event.detail.chipId });
            stnIntBoxDialog.open();
        });
    });
    intChipSets.forEach((chipset, i) => {
        chipset.listen('MDCChip:removal', () => {
            updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
            // // hide trailing icon if 1 chip left
            // if ($(intChipSetEls[i]).find('.mdc-chip').length === 1) {
            //     $(intChipSetEls[i]).find('.mdc-chip__icon--trailing').parent().hide();
            // }
        });
    });
    $('button#osi_name').on('click', event => {
        stnOSINameDialog.open();
    });
    stnIntBoxDialog.listen('MDCDialog:opening', (event) => {
        let { setIdx, chipId } = $(event.target).data('intId');
        let { city, line } = $(intChipSetEls[setIdx]).find('#' + chipId).data('theme');
        intCitySelect.value = city;
        let intNames = $(intChipSetEls[setIdx])
            .find('#' + chipId)
            .find('.mdc-chip__text')
            .html().split('<br>');
        intBoxNameFields.forEach((textfield, i) => textfield.value = intNames[i]);
    });
    stnIntBoxDialog.listen('MDCDialog:opened', (event) => {
        intBoxNameFields.map(textfield => textfield.layout());
    });
    intCitySelect.listen('MDCSelect:change', (event) => {
        if (event.detail.index === -1) {
            return;
        }
        let { setIdx, chipId } = $('#stn_intbox_diag').data('intId');
        $.getJSON(`data/${event.detail.value}.json`, data => {
            var lang = window.urlParams.get('lang');
            $('#int_line__selection.mdc-list').empty();
            data.forEach(l => {
                $('#int_line__selection.mdc-list').append(`<li class="mdc-list-item" data-value="${l.id}">
                    <span style="background:${l.colour};color:${l.fg || '#fff'};">&nbsp;${Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(l.name, lang)}&nbsp;</span>
                    </li>`);
            });
            // select default intLine value
            let { line } = $(intChipSetEls[setIdx]).find('#' + chipId).data('theme');
            let lineIdx = $('#int_line__selection.mdc-list').find(`[data-value="${line}"]`).index();
            intLineSelect.selectedIndex = lineIdx === -1 ? 0 : lineIdx;
        });
        // update data value of chip element
        $(intChipSetEls[setIdx]).find('#' + chipId).data('theme').city = event.detail.value;
    });
    intLineSelect.listen('MDCSelect:change', (event) => {
        let { value, index } = event.detail;
        let { setIdx, chipId } = $('#stn_intbox_diag').data('intId');
        // update data value of chip element
        $(intChipSetEls[setIdx]).find('#' + chipId).data('theme').line = value;
        // update colour of chip
        $(intChipSetEls[setIdx]).find('#' + chipId).css({
            'background-color': $('#int_line__selection span').eq(index).css('background-color'),
            color: $('#int_line__selection span').eq(index).css('color')
        });
    });
    intBoxNameFields.forEach(textfield => {
        $(textfield.root_).find('input')
            .on('input', () => {
            let { setIdx, chipId } = $('#stn_intbox_diag').data('intId');
            $(intChipSetEls[setIdx])
                .find('#' + chipId)
                .find('.mdc-chip__text')
                .html(intBoxNameFields[0].value + '<br>' + intBoxNameFields[1].value);
        });
    });
    stnIntBoxDialog.listen('MDCDialog:closed', () => {
        updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
    });
    stnOSINameDialog.listen('MDCDialog:opening', () => {
        $('button#osi_name .mdc-button__label')
            .html()
            .split('<br>')
            .forEach((txt, i) => stnOSINameFields[i].value = txt);
    });
    stnOSINameDialog.listen('MDCDialog:opened', () => {
        stnOSINameFields.map(textfield => textfield.layout());
    });
    $('#osi_name_zh, #osi_name_en')
        .find('input')
        .each((_, el) => {
        $(el).on('input', () => {
            $('button#osi_name .mdc-button__label')
                .html(stnOSINameFields.map(textfield => textfield.value).join('<br>'));
        });
    });
    stnOSINameDialog.listen('MDCDialog:closed', () => {
        updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
    });
    tickDirecChipSet.listen('MDCChip:selection', (event) => {
        if (tickDirecChipSet.selectedChipIds.length === 0) {
            return;
        }
        updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
    });
    $(paidAreaSwitch.root_).find('input')
        .on('change', () => {
        updateStnTransfer(intChipSetEls, tickDirecChipSet, paidAreaSwitch);
    });
    // Modification (Branch)
    throughSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if (event.detail.value === 'na') {
                return;
            }
            let stnId = $('#stn_edit_diag').attr('for');
            window.myLine.updateBranchType(stnId, idx, event.detail.value);
        });
    });
    firstSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if ($(`#${_utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][idx]}_first__selection`).children().length === 1) {
                return;
            }
            let stnId = $('#stn_edit_diag').attr('for');
            if (window.myLine.updateBranchFirst(stnId, idx, event.detail.value)) {
                posSelects[idx].selectedIndex = posSelects[idx].selectedIndex === 0 ? 1 : 0;
            }
        });
    });
    posSelects.forEach((select, idx) => {
        select.listen('MDCSelect:change', (event) => {
            if (throughSelects[idx].value === 'na') {
                return;
            }
            let stnId = $('#stn_edit_diag').attr('for');
            window.myLine.updateBranchPos(stnId, idx, event.detail.index);
        });
    });
    // Deletion
    stnDeleteDialog.listen('MDCDialog:opening', event => {
        var stnId = $(event.target).attr('for');
        $('#stn_delete_diag #err_stn').text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId].name.join(' - '));
    });
    stnDeleteDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var stnId = $(event.target).attr('for');
        // Remove from data and svg
        if (window.myLine.removeStn(stnId)) {
            // Remove station from selection
            $(`#panel_stations .mdc-layout-grid__inner #${stnId}`).remove();
            $(`#pivot__selection [data-value="${stnId}"]`).remove();
        }
        else {
            stnDeleteErrDialog.open();
        }
    });
}


/***/ }),

/***/ "./src/Station/Station.ts":
/*!********************************!*\
  !*** ./src/Station/Station.ts ***!
  \********************************/
/*! exports provided: RMGStation, Int2Station, Int3LStation, Int3RStation, OSI11LStation, OSI11RStation, OSI12LStation, OSI12RStation, OSI22Station, OSI22LStation, OSI22RStation, OSI22EndStation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStation", function() { return RMGStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int2Station", function() { return Int2Station; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3LStation", function() { return Int3LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3RStation", function() { return Int3RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11LStation", function() { return OSI11LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11RStation", function() { return OSI11RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12LStation", function() { return OSI12LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12RStation", function() { return OSI12RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22Station", function() { return OSI22Station; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22LStation", function() { return OSI22LStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22RStation", function() { return OSI22RStation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22EndStation", function() { return OSI22EndStation; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");


class RMGStation {
    constructor(id, data) {
        this.STN_NAME_Y = -10.5;
        this.STN_NAME_BASE_HEIGHT = 30.390625;
        this.STN_NAME_LINE_GAP = 14;
        this.STN_NAME_BG_ADJUST = 0.5;
        this.id = id;
        this.parents = data.parents;
        this.children = data.children;
        this.name = data.name;
        this.branch = data.branch;
    }
    get inDegree() { return this.parents.length; }
    get outDegree() { return this.children.length; }
    get nameClass() {
        switch (this.state) {
            case -1:
                return 'Pass';
            case 0:
                return 'Current';
            default:
                return 'Future';
        }
    }
    get _nameTxtAnchor() { return 'middle'; }
    get _nameDX() { return 0; }
    get _nameDY() { return 0; }
    get nameHTML() {
        var nameENs = this.name[1].split('\\');
        if (this.namePos) {
            var dy = this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BG_ADJUST;
        }
        else {
            var dy = -this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BASE_HEIGHT - (nameENs.length - 1) * 10;
        }
        // dy -= this.STN_NAME_BG_ADJUST;
        if (this.state === 0) {
            $('#current_bg').attr({
                y: this.y + dy + this.STN_NAME_Y - 1.5 + this._nameDY,
                height: this.STN_NAME_BASE_HEIGHT + (nameENs.length - 1) * 10 + 2 + 1.5
            });
        }
        var nameENp = nameENs.shift();
        var nameENElem = $('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__mtr--station'
        }).text(nameENp);
        while (nameENp = nameENs.shift()) {
            nameENElem.append($('<tspan>', { x: 0, dy: 10, 'alignment-baseline': 'middle' }).text(nameENp));
        }
        return $('<g>', {
            transform: `translate(${this.x + this._nameDX},${this.y + dy + this._nameDY})`,
            'text-anchor': this._nameTxtAnchor,
            'class': `Name ${this.nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--station').text(this.name[0])).append(nameENElem);
    }
    get iconClass() { return this.state == -1 ? 'rmg-stn__mtr--pass' : 'rmg-stn__mtr--future'; }
    get iconHTML() {
        return $('<use>', {
            'xlink:href': '#stn_hk',
            x: this.x, y: this.y,
            class: this.iconClass
        });
    }
    get ungrpHTML() {
        return [this.iconHTML, this.nameHTML];
    }
    get html() {
        return $('<g>', { id: this.id }).append(...this.ungrpHTML);
    }
}
class Int2Station extends RMGStation {
    constructor(id, data) {
        super(id, data);
        this._intInfo = data.transfer.info[0][0];
        // this._intInfo = data.interchange[0][0];
    }
    get _dy() { return 0; }
    get intTickHTML() {
        var tickRotation = (this.namePos) ? 180 : 0;
        var tickColour = this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y + this._dy})rotate(${tickRotation})`,
            class: 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get _nameClass() {
        return (this.state == -1) ? 'Pass' : 'Future';
    }
    get intNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameZH], this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameEN]], 10, 7);
        var dy = (!this.namePos) ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML];
    }
}
class Int3Station extends RMGStation {
    // _int3Type;
    constructor(id, data) {
        super(id, data);
        this._intCity = [];
        this._intLine = [];
        this._intColour = [];
        this._intNameZH = [];
        this._intNameEN = [];
        this._intInfos = data.transfer.info[0];
        // data.transfer.info[0].forEach(intInfo => {
        //     this._intCity.push(intInfo[0]);
        //     this._intLine.push(intInfo[1]);
        //     this._intColour.push(intInfo[2]);
        //     this._intNameZH.push(intInfo[4]);
        //     this._intNameEN.push(intInfo[5]);
        // });
        // this._int3Type = data.change_type.substring(5);
    }
    get iconHTML() {
        let iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#int3_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: this.iconClass
        });
    }
    get _tickRotation() { return 0; }
    get _dy() { return 0; }
    get _dx() { return 0; }
    get _tickFlip() { return 1; }
    get intTickHTML() {
        let elems = [];
        this._intInfos
            .map(info => info[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].colour])
            .forEach((c, i) => {
            if (i >= 2) {
                return;
            }
            let tickColour = (this.state === -1) ? '#aaa' : c;
            let dy = (!this.namePos) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            elems.push($('<use>', {
                'xlink:href': '#inttick_hk',
                stroke: tickColour,
                transform: `translate(${this.x + this._dx},${this.y + dy})rotate(${this._tickRotation})`,
                class: 'rmg-line rmg-line__mtr rmg-line__change'
            }));
        });
        return elems;
    }
    get _txtAnchor() { return 'middle'; }
    get _intNameDX() { return 0; }
    get _nameClass() { return (this.state == -1) ? 'Pass' : 'Future'; }
    get intNameHTML() {
        // var str = '';
        let elems = [];
        let nameClass = this._nameClass;
        this._intInfos
            .map(info => [info[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameZH], info[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameEN]])
            .forEach((names, i) => {
            if (i >= 2) {
                return;
            }
            let [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])(names, 10, 7);
            var dy = (!this.namePos) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            dy += 5.953125 - (19.65625 + 13 * (nameZHLn - 1) + 7 * (nameENLn - 1)) / 2;
            elems.push($('<g>', {
                'text-anchor': this._txtAnchor,
                transform: `translate(${this.x + this._intNameDX},${this.y + dy})`,
                class: 'Name ' + nameClass
            }).html(nameHTML[0]));
        });
        return elems;
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML];
    }
}
class Int3LStation extends Int3Station {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class Int3RStation extends Int3Station {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI11Station extends Int2Station {
    constructor(id, data) {
        // data.int2 = data.osi11;
        data.transfer.info[0].push(data.transfer.info[1][0]);
        // data.interchange[0].push(data.interchange[1][1]);
        super(id, data);
        this._osiNames = data.transfer.osi_names[0];
        this._osiType = data.transfer.paid_area ? 'p' : 'u'; // u(npaid) or p(aid);
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi11_hk',
            'transform': `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (!this.namePos) ? 26 : -26; }
    get _txtAnchor() { return 'middle'; }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            'transform': `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            'class': 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML, this.osiNameHTML];
    }
}
class OSI11LStation extends OSI11Station {
    // OSI name on left
    get _txtAnchor() { return 'end'; }
    get _osiNameDX() { return -13; }
}
class OSI11RStation extends OSI11Station {
    // OSI name on right
    get _txtAnchor() { return 'start'; }
    get _osiNameDX() { return 13; }
}
class OSI12Station extends Int3Station {
    constructor(id, data) {
        // data.int3 = data.osi12;
        data.transfer.info[0].unshift(...data.transfer.info[1].slice(0, 2));
        // data.interchange[0].unshift(...data.interchange[1].slice(1,3));
        super(id, data);
        this._osiNames = data.transfer.osi_names[0];
        this._osiType = data.transfer.paid_area ? 'p' : 'u';
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi12_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (!this.namePos) ? (26 - 18) : -8; }
    get _osiDY() { return (!this.namePos) ? (26 + 18 + 10) + 8.34375 : -(26 + 18 + 10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return 'middle'; }
    get _osiDX() { return 0; }
    get osiNameHTML() {
        var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            'transform': `translate(${this.x + this._dx + this._osiDX},${this.y + this._osiDY})`,
            'class': `Name ${nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1].split('\\')[0]).append($('<tspan>', { x: 0, dy: 10 }).text(this._osiNames[1].split('\\')[1] || '')));
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML, this.osiNameHTML];
    }
}
class OSI12LStation extends OSI12Station {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class OSI12RStation extends OSI12Station {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI22Station extends OSI12Station {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        this._origIntInfo = data.transfer.info[0][2];
    }
    get _nameTxtAnchor() { return this._osiTxtAnchor; }
    get _nameDY() {
        return this.namePos ? 11.515625 : -11.515625;
    }
    get origIntTickHTML() {
        var tickRotation = this.namePos ? 0 : 180;
        var tickColour = this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameZH], this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_0__["IntInfoTag"].nameEN]], 10, 7);
        var dy = this.namePos ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            transform: `translate(${this.x - this._nameDX},${this.y + dy})`,
            class: `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy - (this.namePos ? 18 + 9 : -27) + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            transform: `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            class: 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            x: 0, dy: 12, class: 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}
class OSI22LStation extends OSI22Station {
    get _nameDX() { return 3; }
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
    get _osiNameDX() { return 13; }
    get _osiTxtAnchor() { return 'start'; }
}
class OSI22RStation extends OSI22Station {
    get _nameDX() { return -3; }
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
    get _osiNameDX() { return -13; }
    get _osiTxtAnchor() { return 'end'; }
}
class OSI22EndStation extends OSI12Station {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        [this._origIntCity, this._origIntLine, this._origIntColour, this._origIntFg, this._origIntNameZH, this._origIntNameEN] = data.transfer.info[0][2];
    }
    get origIntTickHTML() {
        var tickRotation = this.namePos ? 180 : 0;
        var tickColour = this._origIntColour;
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["joinIntName"])([this._origIntNameZH, this._origIntNameEN], 10, 7);
        var dy = !this.namePos ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get iconHTML() {
        var iconYFlip = this.namePos ? 1 : -1;
        var iconXFlip = (this.children[0] == 'lineend') ? 1 : -1;
        var iconRotation = (this.children[0] == 'lineend') ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi22end_hk',
            'transform': `translate(${this.x},${this.y})scale(${iconXFlip},${iconYFlip})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _tickRotation() { return (this.children[0] == 'lineend') ? -90 : 90; }
    get _tickFlip() { return -1; }
    get _dx() { return (this.children[0] == 'lineend') ? 41 : -41; }
    get _dy() { return !this.namePos ? -18 : 18; }
    get _intNameDX() { return (this.children[0] == 'lineend') ? 24 + 41 : -(24 + 41); }
    get _txtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDY() { return !this.namePos ? (10) + 8.34375 : -(10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDX() { return (this.children[0] == 'lineend') ? -9 : 9; }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PageInitialiser/save */ "./src/PageInitialiser/save.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Line_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line/init */ "./src/Line/init.ts");
/* harmony import */ var _PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PageInitialiser/init */ "./src/PageInitialiser/init.ts");




var requestLang = window.urlParams.get('lang') || localStorage.rmgLang || navigator.language.split('-').slice(0, 2).join('-');
switch (requestLang.toLowerCase()) {
    case 'zh-cn':
    case 'zh-hans':
        window.urlParams.set('lang', 'zh-Hans');
        break;
    case 'zh':
    case 'zh-hk':
    case 'zh-tw':
        window.urlParams.set('lang', 'zh-HK');
        break;
    default: window.urlParams.set('lang', 'en');
}
switch (window.urlParams.get('style')) {
    case 'mtr':
    case 'gzmtr':
    case 'shmetro':
        break;
    default: window.urlParams.set('style', 'mtr');
}
history.pushState({ url: window.location.href }, null, '?' + window.urlParams.toString());
// load stylesheets on demand
jquery__WEBPACK_IMPORTED_MODULE_1__('head').append(...['share', 'destination', 'railmap']
    .map(tag => {
    return jquery__WEBPACK_IMPORTED_MODULE_1__('<link>', {
        rel: 'stylesheet',
        href: `styles/${tag}_${window.urlParams.get('style')}.css`,
        id: `css_${tag}`
    });
}));
window.myLine = null;
jquery__WEBPACK_IMPORTED_MODULE_1__(`[${window.urlParams.get('style')}-specific]`).show();
// autoInit();
_PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__["common"]();
Object(_Line_init__WEBPACK_IMPORTED_MODULE_2__["default"])();
Object(_PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__["default"])();


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/*! exports provided: DirectionLong, NeighbourPl, IntInfoTag, putParams, getParams, setParams, test, getTxtBoxDim, joinIntName, getIntBoxGZ, getRandomId, getNameFromId, describeParams, countryCode2Emoji, rgb2Hex, updateParam, getTransText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionLong", function() { return DirectionLong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeighbourPl", function() { return NeighbourPl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntInfoTag", function() { return IntInfoTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "putParams", function() { return putParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return getParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setParams", function() { return setParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "test", function() { return test; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTxtBoxDim", function() { return getTxtBoxDim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinIntName", function() { return joinIntName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntBoxGZ", function() { return getIntBoxGZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomId", function() { return getRandomId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNameFromId", function() { return getNameFromId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeParams", function() { return describeParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countryCode2Emoji", function() { return countryCode2Emoji; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2Hex", function() { return rgb2Hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateParam", function() { return updateParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransText", function() { return getTransText; });
var DirectionLong;
(function (DirectionLong) {
    DirectionLong[DirectionLong["left"] = 0] = "left";
    DirectionLong[DirectionLong["right"] = 1] = "right";
})(DirectionLong || (DirectionLong = {}));
;
var NeighbourPl;
(function (NeighbourPl) {
    NeighbourPl[NeighbourPl["parents"] = 0] = "parents";
    NeighbourPl[NeighbourPl["children"] = 1] = "children";
})(NeighbourPl || (NeighbourPl = {}));
;
var IntInfoTag;
(function (IntInfoTag) {
    IntInfoTag[IntInfoTag["city"] = 0] = "city";
    IntInfoTag[IntInfoTag["line"] = 1] = "line";
    IntInfoTag[IntInfoTag["colour"] = 2] = "colour";
    IntInfoTag[IntInfoTag["fg"] = 3] = "fg";
    IntInfoTag[IntInfoTag["nameZH"] = 4] = "nameZH";
    IntInfoTag[IntInfoTag["nameEN"] = 5] = "nameEN";
})(IntInfoTag || (IntInfoTag = {}));
;
function putParams(instance) {
    localStorage.setItem('rmgParam', JSON.stringify(instance));
}
function getParams() {
    return JSON.parse(localStorage.rmgParam);
}
function setParams(key, data) {
    let param = getParams();
    param[key] = data;
    putParams(param);
}
function test(svgEl) {
    var [svgW, svgH] = svgEl.attr('viewBox').split(' ').slice(2);
    var canvas = $('canvas')[0];
    $('canvas').attr({
        width: svgW * 2.5, height: svgH * 2.5
    });
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // bypass Chrome min font size (to be improved)
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--station, .rmg-name__en.rmg-name__mtr--station, .rmg-name__zh.IntName').each((_, el) => {
        $(el).attr('font-size', '10px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int').each((_, el) => {
        $(el).attr('font-size', '8px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int-small, .rmg-name__en.IntName').each((_, el) => {
        $(el).attr('font-size', '7px');
    });
    svgEl.find('text:not([font-size]), tspan:not([font-size])').each((_, el) => {
        $(el).attr('font-size', window.getComputedStyle(el).fontSize);
    });
    svgEl.find('text, tspan').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'font-family': elStyle.getPropertyValue('font-family'),
            'fill': elStyle.getPropertyValue('fill'),
            'alignment-baseline': elStyle.getPropertyValue('alignment-baseline'),
            'dominant-baseline': elStyle.getPropertyValue('dominant-baseline'),
            'text-anchor': elStyle.getPropertyValue('text-anchor')
        }).removeAttr('class');
    });
    svgEl.find('#strip, #dest_strip').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'stroke-width': elStyle.getPropertyValue('stroke-width')
        });
    });
    var img = new Image();
    img.onload = function () {
        ctx.drawImage(img, 0, 0, svgW * 2.5, svgH * 2.5);
        saveAs($('canvas')[0].toDataURL('image/png'), 'rmg_export');
    };
    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl[0].outerHTML)));
}
function saveAs(uri, filename) {
    var link = document.createElement('a');
    if (typeof link.download === 'string') {
        link.href = uri;
        link.download = filename;
        //Firefox requires the link to be in the body
        document.body.appendChild(link);
        //simulate click
        link.click();
        //remove the link when done
        document.body.removeChild(link);
    }
    else {
        window.open(uri);
    }
}
function getTxtBoxDim(elem, svg) {
    let svgNode = $('#' + svg)[0];
    let bcr = elem.getBoundingClientRect();
    let pt = svgNode.createSVGPoint();
    let ctm = svgNode.getScreenCTM();
    pt.x = bcr.left;
    pt.y = bcr.top;
    let pos = pt.matrixTransform(ctm.inverse());
    return { x: pos.x, y: pos.y, width: bcr.width, height: bcr.height };
}
function joinIntName(names, dy1, dy2) {
    var [nameZH, nameEN] = names.map(txt => txt.split(/\\/g));
    var res = $('<text>').addClass('rmg-name__zh IntName').text(nameZH[0]);
    for (let i = 1; i < nameZH.length; i++) {
        res = res.append($('<tspan>', { 'x': 0, 'dy': dy1, 'dominant-baseline': 'central' }).text(nameZH[i]));
    }
    var btwGap = (nameZH.length == 1) ? 9 : 9;
    res = res.append($('<tspan>', {
        'x': 0, 'dy': btwGap, 'class': 'rmg-name__en IntName'
    }).text(nameEN[0]));
    for (let i = 1; i < nameEN.length; i++) {
        res = res.append($('<tspan>', {
            'x': 0, 'dy': dy2, 'class': 'rmg-name__en IntName'
        }).text(nameEN[i]));
    }
    return [res, nameZH.length, nameEN.length];
}
function getIntBoxGZ(intInfo, state) {
    let bg = intInfo[IntInfoTag.colour];
    let fg = intInfo[IntInfoTag.fg];
    let names = [
        intInfo[IntInfoTag.nameZH],
        intInfo[IntInfoTag.nameEN]
    ];
    let nameZHs = names[0].match(/[\d]+|[\D]+/g) || [''];
    let intNameSplitOk = false;
    if (nameZHs.length == 2) {
        if (!isNaN(Number(nameZHs[0])) && isNaN(Number(nameZHs[1]))) {
            intNameSplitOk = true;
        }
    }
    let boxEl = $('<g>')
        .append($('<use>', {
        'xlink:href': '#intbox_gz',
        fill: state === -1 ? '#aaa' : bg
    }))
        .append($('<text>', { y: 8.5, class: 'rmg-name__zh rmg-name__gzmtr--int' })
        .append($('<tspan>', { 'font-size': '16px', 'dominant-baseline': 'central' }).text(intNameSplitOk ? nameZHs[0] : ''))
        .append($('<tspan>', { dy: -1, 'dominant-baseline': 'central' }).text(intNameSplitOk ? nameZHs[1] : nameZHs.join(''))))
        .append($('<text>', {
        y: 19.5,
        class: 'rmg-name__en'
    })
        .addClass(names[1].length > 10 ? 'rmg-name__gzmtr--int-small' : 'rmg-name__gzmtr--int')
        .text(names[1]));
    if (fg === '#fff' || state === -1) {
        $(boxEl).find('text').addClass('rmg-name__gzmtr--white-fg');
    }
    return boxEl;
}
function getRandomId() {
    return Math.floor(Math.random() * Math.pow(36, 4)).toString(36).padStart(4, '0');
}
function getNameFromId(stnId) {
    let numsZH = [
        '癸', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬',
        '日', '月', '金', '木', '水', '火', '土',
        '竹', '戈', '十', '大', '中', '一', '弓',
        '人', '心', '手', '口',
        '尸', '廿', '山', '女', '田', '難', '卜', '重'
    ];
    let numsEN = [
        'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
        'Alfa', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf',
        'Hotel', 'India', 'Juliett', 'Kilo', 'Lima', 'Mike', 'November',
        'Oscar', 'Papa', 'Quebec', 'Romeo',
        'Sierra', 'Tango', 'Uniform', 'Victor', 'Whiskey', 'X-ray', 'Yankee', 'Zulu'
    ];
    return [
        stnId.split('').map(char => numsZH[parseInt(char, 36)]).join(''),
        stnId.split('').map(char => numsEN[parseInt(char, 36)]).join(' ')
    ];
}
function describeParams(param) {
    return `Number of stations: ${Object.keys(param.stn_list).length - 2}
            ${Object.entries(param.stn_list).map(x => ['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')).join('<br>').trim().replace(/\\/, ' ')}`;
}
function countryCode2Emoji(code) {
    var chars = code.toUpperCase().split('');
    if (code.length == 2) {
        return chars.map(char => String.fromCodePoint((char.codePointAt(0) + 127397))).join('');
    }
    else {
        return '\u{1f3f4}' + chars.map(char => String.fromCodePoint((char.codePointAt(0) + 917536))).join('') + '\u{e007f}';
    }
}
function rgb2Hex(rgb) {
    let hex = rgb.match(/[\d]+/g)
        .map(dec => Number(dec).toString(16).padStart(2, '0'))
        .join('');
    switch (hex) {
        case '000000': return '#000';
        case 'ffffff': return '#fff';
        default: return '#' + hex;
    }
}
function updateParam() {
    var param = getParams();
    // Version 0.10
    if (!('line_name' in param)) {
        param.line_name = ['路線名', 'Name of Line'];
    }
    if (!('dest_legacy' in param)) {
        param.dest_legacy = false;
    }
    // Version 0.11
    if (!('char_form' in param)) {
        param.char_form = (region => {
            switch (region) {
                case 'KR': return 'trad';
                case 'TC': return 'tw';
                case 'SC': return 'cn';
                case 'JP': return 'jp';
            }
        })(param.fontZH[0].split(' ').reverse()[0]);
    }
    delete param.fontZH;
    delete param.fontEN;
    delete param.weightZH;
    delete param.weightEN;
    // Version 0.12
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        // if (['linestart', 'lineend'].includes(stnId)) {continue;}
        // if ('transfer' in stnInfo) {
        //     delete param.stn_list[stnId].interchange;
        //     switch (stnInfo.change_type) {
        //         case 'int2':
        //             param.stn_list[stnId].interchange = [[stnInfo.transfer[1]]];
        //             break;
        //         case 'int3_l':
        //         case 'int3_r':
        //             param.stn_list[stnId].interchange = [stnInfo.transfer.slice(1,3)];
        //             break;
        //         case 'osi11_pl':
        //         case 'osi11_pr':
        //         case 'osi11_ul':
        //         case 'osi11_ur':
        //             param.stn_list[stnId].interchange = [[], stnInfo.transfer.slice(0,2)];
        //             break;
        //         case 'osi12_pl':
        //         case 'osi12_pr':
        //         case 'osi12_ul':
        //         case 'osi12_ur':
        //             param.stn_list[stnId].interchange = [[], stnInfo.transfer];
        //             break;
        //     }
        // }
        // delete param.stn_list[stnId].transfer;
        if (!('branch' in stnInfo)) {
            param.stn_list[stnId].branch = { left: [], right: [] };
            if (stnInfo.children.length == 2) {
                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];
            }
            else {
                param.stn_list[stnId].branch.right = [];
            }
            if (stnInfo.parents.length == 2) {
                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];
            }
            else {
                param.stn_list[stnId].branch.left = [];
            }
        }
    }
    // Version 1.2
    if (!('psd_num' in param)) {
        param.psd_num = 1;
    }
    if (!('line_num' in param)) {
        param.line_num = 1;
    }
    delete param.style;
    if (param.theme.length == 3) {
        param.theme.push('#fff');
    }
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (['linestart', 'lineend'].includes(stnId)) {
            continue;
        }
        if (!('num' in stnInfo)) {
            param.stn_list[stnId].num = '00';
        }
    }
    // Version 1.3
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if ('interchange' in stnInfo) {
            stnInfo.interchange.map(arr => {
                arr.map(intInfo => {
                    if (intInfo.length == 5) {
                        intInfo.splice(3, 0, '#fff');
                    }
                });
            });
        }
    }
    // Version 1.4
    if (!('info_panel_type' in param)) {
        param.info_panel_type = 'panasonic';
    }
    // Version 1.5
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (stnInfo.change_type === 'osi22_end_p') {
            param.stn_list[stnId].change_type = 'osi22_pr';
        }
        if (stnInfo.change_type === 'osi22_end_u') {
            param.stn_list[stnId].change_type = 'osi22_ur';
        }
    }
    // Version 2.1
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('interchange' in stnInfo)) {
            param.stn_list[stnId].interchange = [[]];
        }
    }
    // Version 2.2
    if (param.info_panel_type === 'gz_1') {
        param.info_panel_type = 'gz28';
    }
    // Version 2.3
    if (param.info_panel_type === 'panasonic') {
        param.info_panel_type = 'gz28';
    }
    if (param.info_panel_type === 'gz_2') {
        param.info_panel_type = 'gzgf';
    }
    if (param.info_panel_type === 'gz_3') {
        param.info_panel_type = 'gz3';
    }
    if (!('direction_gz_x' in param)) {
        param.direction_gz_x = 50;
    }
    if (!('direction_gz_y' in param)) {
        param.direction_gz_y = 70;
    }
    // Version 2.6
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('transfer' in param)) {
            param.stn_list[stnId].transfer = {
                type: stnInfo.change_type.split('_')[0],
                tick_direc: (stnInfo.change_type === 'none' || stnInfo.change_type === 'int2') ? 'r' : stnInfo.change_type.split('_')[1].split('').slice().reverse()[0],
                paid_area: (stnInfo.change_type.indexOf('osi') !== -1) ? stnInfo.change_type.split('_')[1][0] === 'p' : true,
                osi_names: (stnInfo.change_type.indexOf('osi') !== -1) ? [stnInfo.interchange[1][0]] : [],
                info: (stnInfo.interchange.length === 2) ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)] : stnInfo.interchange
            };
        }
    }
    putParams(param);
}
const langFallback = (lang) => {
    switch (lang) {
        case 'en': return ['en'];
        case 'zh-Hans': return ['zh-Hans', 'zh', 'en'];
        case 'zh-HK': return ['zh-HK', 'zh-Hant', 'zh', 'en'];
        default: return [lang, 'en'];
    }
};
const getTransText = (obj, lang) => {
    return obj[langFallback(lang).find(l => obj[l])];
};


/***/ }),

/***/ "@material/dialog":
/*!*****************************!*\
  !*** external "mdc.dialog" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.dialog;

/***/ }),

/***/ "@material/list":
/*!***************************!*\
  !*** external "mdc.list" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.list;

/***/ }),

/***/ "@material/ripple":
/*!*****************************!*\
  !*** external "mdc.ripple" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.ripple;

/***/ }),

/***/ "@material/select":
/*!*****************************!*\
  !*** external "mdc.select" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.select;

/***/ }),

/***/ "@material/slider":
/*!*****************************!*\
  !*** external "mdc.slider" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.slider;

/***/ }),

/***/ "@material/switch":
/*!************************************!*\
  !*** external "mdc.switchControl" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.switchControl;

/***/ }),

/***/ "@material/tab-bar":
/*!*****************************!*\
  !*** external "mdc.tabBar" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.tabBar;

/***/ }),

/***/ "@material/textfield":
/*!********************************!*\
  !*** external "mdc.textField" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.textField;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,