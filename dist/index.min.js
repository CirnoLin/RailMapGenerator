!function(t){function e(e){for(var n,s,a=e[0],r=e[1],o=0,h=[];o<a.length;o++)s=a[o],Object.prototype.hasOwnProperty.call(i,s)&&i[s]&&h.push(i[s][0]),i[s]=0;for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n]);for(l&&l(e);h.length;)h.shift()()}var n={},i={2:0};function s(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.e=function(t){var e=[],n=i[t];if(0!==n)if(n)e.push(n[2]);else{var a=new Promise((function(e,s){n=i[t]=[e,s]}));e.push(n[2]=a);var r,o=document.createElement("script");o.charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.src=function(t){return s.p+""+({0:"LineGZ",1:"LineSH"}[t]||t)+".min.js"}(t);var l=new Error;r=function(e){o.onerror=o.onload=null,clearTimeout(h);var n=i[t];if(0!==n){if(n){var s=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+t+" failed.\n("+s+": "+a+")",l.name="ChunkLoadError",l.type=s,l.request=a,n[1](l)}i[t]=void 0}};var h=setTimeout((function(){r({type:"timeout",target:o})}),12e4);o.onerror=o.onload=r,document.head.appendChild(o)}return Promise.all(e)},s.m=t,s.c=n,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="./dist/",s.oe=function(t){throw console.error(t),t};var a=window.webpackJsonp=window.webpackJsonp||[],r=a.push.bind(a);a.push=e,a=a.slice();for(var o=0;o<a.length;o++)e(a[o]);var l=r;s(s.s=14)}([function(t,e,n){"use strict";var i,s;function a(t){localStorage.setItem("rmgParam",JSON.stringify(t))}function r(){return JSON.parse(localStorage.rmgParam)}function o(t,e){let n=r();n[t]=e,a(n)}function l(t){var[e,n]=t.attr("viewBox").split(" ").slice(2),i=$("canvas")[0];$("canvas").attr({width:2.5*e,height:2.5*n});var s=i.getContext("2d");s.clearRect(0,0,i.width,i.height),t.find(".rmg-name__en.rmg-name__gzmtr--station, .rmg-name__en.rmg-name__mtr--station, .rmg-name__zh.IntName").each((t,e)=>{$(e).attr("font-size","10px")}),t.find(".rmg-name__en.rmg-name__gzmtr--int").each((t,e)=>{$(e).attr("font-size","8px")}),t.find(".rmg-name__en.rmg-name__gzmtr--int-small, .rmg-name__en.IntName").each((t,e)=>{$(e).attr("font-size","7px")}),t.find("text:not([font-size]), tspan:not([font-size])").each((t,e)=>{$(e).attr("font-size",window.getComputedStyle(e).fontSize)}),t.find("text, tspan").each((t,e)=>{var n=window.getComputedStyle(e);$(e).attr({"font-family":n.getPropertyValue("font-family"),fill:n.getPropertyValue("fill"),"alignment-baseline":n.getPropertyValue("alignment-baseline"),"text-anchor":n.getPropertyValue("text-anchor")}).removeAttr("class")}),t.find("#strip, #dest_strip").each((t,e)=>{var n=window.getComputedStyle(e);$(e).attr({"stroke-width":n.getPropertyValue("stroke-width")})});var a=new Image;a.onload=function(){var t,i,r;s.drawImage(a,0,0,2.5*e,2.5*n),t=$("canvas")[0].toDataURL("image/png"),i="rmg_export","string"==typeof(r=document.createElement("a")).download?(r.href=t,r.download=i,document.body.appendChild(r),r.click(),document.body.removeChild(r)):window.open(t)},a.src="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(t[0].outerHTML)))}function h(t,e){let n=$("#"+e)[0],i=t.getBoundingClientRect(),s=n.createSVGPoint(),a=n.getScreenCTM();s.x=i.left,s.y=i.top;let r=s.matrixTransform(a.inverse());return{x:r.x,y:r.y,width:i.width,height:i.height}}function c(t,e,n){var[i,s]=t.map(t=>t.split(/\\/g)),a=$("<text>").addClass("rmg-name__zh IntName").text(i[0]);for(let t=1;t<i.length;t++)a=a.append($("<tspan>",{x:0,dy:e}).text(i[t]));var r=1==i.length?9:n;a=a.append($("<tspan>",{x:0,dy:r,class:"rmg-name__en IntName"}).text(s[0]));for(let t=1;t<s.length;t++)a=a.append($("<tspan>",{x:0,dy:n,class:"rmg-name__en IntName"}).text(s[t]));return[a,i.length,s.length]}function d(){return Math.floor(Math.random()*Math.pow(36,4)).toString(36).padStart(4,"0")}function _(t){return`Number of stations: ${Object.keys(t.stn_list).length-2}\n            ${Object.entries(t.stn_list).map(t=>["linestart","lineend"].includes(t[0])?"":t[1].name.join(" - ")).join("<br>").trim().replace(/\\/," ")}`}function u(t){var e=t.toUpperCase().split("");return 2==t.length?e.map(t=>String.fromCodePoint(t.codePointAt(0)+127397)).join(""):"🏴"+e.map(t=>String.fromCodePoint(t.codePointAt(0)+917536)).join("")+"󠁿"}function g(t){let e=t.match(/[\d]+/g).map(t=>Number(t).toString(16).padStart(2,"0")).join("");switch(e){case"000000":return"#000";case"ffffff":return"#fff";default:return"#"+e}}function m(){var t=r();"line_name"in t||(t.line_name=["路線名","Name of Line"]),"dest_legacy"in t||(t.dest_legacy=!1),"char_form"in t||(t.char_form=(t=>{switch(t){case"KR":return"trad";case"TC":return"tw";case"SC":return"cn";case"JP":return"jp"}})(t.fontZH[0].split(" ").reverse()[0])),delete t.fontZH,delete t.fontEN,delete t.weightZH,delete t.weightEN;for(let[e,n]of Object.entries(t.stn_list)){if("transfer"in n)switch(delete t.stn_list[e].interchange,n.change_type){case"int2":t.stn_list[e].interchange=[[n.transfer[1]]];break;case"int3_l":case"int3_r":t.stn_list[e].interchange=[n.transfer.slice(1,3)];break;case"osi11_pl":case"osi11_pr":case"osi11_ul":case"osi11_ur":t.stn_list[e].interchange=[[],n.transfer.slice(0,2)];break;case"osi12_pl":case"osi12_pr":case"osi12_ul":case"osi12_ur":t.stn_list[e].interchange=[[],n.transfer]}delete t.stn_list[e].transfer,"branch"in n||(t.stn_list[e].branch={left:[],right:[]},2==n.children.length?t.stn_list[e].branch.right=["through",n.children[1]]:t.stn_list[e].branch.right=[],2==n.parents.length?t.stn_list[e].branch.left=["through",n.parents[1]]:t.stn_list[e].branch.left=[])}"psd_num"in t||(t.psd_num=1),"line_num"in t||(t.line_num=1),delete t.style,3==t.theme.length&&t.theme.push("#fff");for(let[e,n]of Object.entries(t.stn_list))["linestart","lineend"].includes(e)||"num"in n||(t.stn_list[e].num="00");for(let[e,n]of Object.entries(t.stn_list))"interchange"in n&&n.interchange.map(t=>{t.map(t=>{5==t.length&&t.splice(3,0,"#fff")})});"info_panel_type"in t||(t.info_panel_type="panasonic");for(let[e,n]of Object.entries(t.stn_list))"osi22_end_p"===n.change_type&&(t.stn_list[e].change_type="osi22_pr"),"osi22_end_u"===n.change_type&&(t.stn_list[e].change_type="osi22_ur");for(let[e,n]of Object.entries(t.stn_list))"interchange"in n||(t.stn_list[e].interchange=[[]]);"gz_1"===t.info_panel_type&&(t.info_panel_type="gz28"),"panasonic"===t.info_panel_type&&(t.info_panel_type="gz28"),"gz_2"===t.info_panel_type&&(t.info_panel_type="gzgf"),"gz_3"===t.info_panel_type&&(t.info_panel_type="gz3"),"direction_gz_x"in t||(t.direction_gz_x=50),"direction_gz_y"in t||(t.direction_gz_y=70),a(t)}n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return s})),n.d(e,"j",(function(){return a})),n.d(e,"e",(function(){return r})),n.d(e,"l",(function(){return o})),n.d(e,"m",(function(){return l})),n.d(e,"h",(function(){return h})),n.d(e,"i",(function(){return c})),n.d(e,"f",(function(){return d})),n.d(e,"d",(function(){return _})),n.d(e,"c",(function(){return u})),n.d(e,"k",(function(){return g})),n.d(e,"n",(function(){return m})),n.d(e,"g",(function(){return p})),function(t){t[t.left=0]="left",t[t.right=1]="right"}(i||(i={})),function(t){t[t.parents=0]="parents",t[t.children=1]="children"}(s||(s={}));const p=(t,e)=>t[(t=>{switch(t){case"en":return["en"];case"zh-Hans":return["zh-Hans","zh","en"];case"zh-HK":return["zh-HK","zh-Hant","zh","en"];default:return[t,"en"]}})(e).find(e=>t[e])]},function(t,e,n){"use strict";n.d(e,"d",(function(){return i})),n.d(e,"l",(function(){return a})),n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return l})),n.d(e,"c",(function(){return h})),n.d(e,"e",(function(){return d})),n.d(e,"f",(function(){return _})),n.d(e,"g",(function(){return g})),n.d(e,"h",(function(){return m})),n.d(e,"j",(function(){return f})),n.d(e,"k",(function(){return w})),n.d(e,"i",(function(){return v}));var i,s=n(0);!function(t){t[t.city=0]="city",t[t.line=1]="line",t[t.colour=2]="colour",t[t.fg=3]="fg",t[t.nameZH=4]="nameZH",t[t.nameEN=5]="nameEN"}(i||(i={}));class a{constructor(t,e){this.STN_NAME_Y=-10.5,this.STN_NAME_BASE_HEIGHT=30.390625,this.STN_NAME_LINE_GAP=14,this.STN_NAME_BG_ADJUST=.5,this.id=t,this.parents=e.parents,this.children=e.children,this.name=e.name,this.branch=e.branch}get inDegree(){return this.parents.length}get outDegree(){return this.children.length}get nameClass(){switch(this.state){case-1:return"Pass";case 0:return"Current";default:return"Future"}}get _nameTxtAnchor(){return"middle"}get _nameDX(){return 0}get _nameDY(){return 0}get nameHTML(){var t=this.name[1].split("\\");if(1==this.namePos)var e=this.STN_NAME_LINE_GAP-this.STN_NAME_Y-this.STN_NAME_BG_ADJUST;else e=-this.STN_NAME_LINE_GAP-this.STN_NAME_Y-this.STN_NAME_BASE_HEIGHT-10*(t.length-1);0===this.state&&$("#current_bg").attr({y:this.y+e+this.STN_NAME_Y-1.5+this._nameDY,height:this.STN_NAME_BASE_HEIGHT+10*(t.length-1)+2+1.5});for(var n=t.shift(),i=$("<text>",{dy:15,class:"rmg-name__en rmg-name__mtr--station"}).text(n);n=t.shift();)i.append($("<tspan>",{x:0,dy:10,"alignment-baseline":"middle"}).text(n));return $("<g>",{transform:`translate(${this.x+this._nameDX},${this.y+e+this._nameDY})`,"text-anchor":this._nameTxtAnchor,class:`Name ${this.nameClass}`}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--station").text(this.name[0])).append(i)}get iconClass(){return-1==this.state?"rmg-stn__mtr--pass":"rmg-stn__mtr--future"}get iconHTML(){return $("<use>",{"xlink:href":"#stn_hk",x:this.x,y:this.y,class:this.iconClass})}get ungrpHTML(){return[this.iconHTML,this.nameHTML]}get html(){return $("<g>",{id:this.id}).append(...this.ungrpHTML)}}class r extends a{constructor(t,e){super(t,e),this._intInfo=e.interchange[0][0]}get _dy(){return 0}get intTickHTML(){var t=1==this.namePos?180:0,e=this._intInfo[i.colour],n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y+this._dy})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get _nameClass(){return-1==this.state?"Pass":"Future"}get intNameHTML(){var[t,e,n]=Object(s.i)([this._intInfo[i.nameZH],this._intInfo[i.nameEN]],15,7),a=0==this.namePos?30.953125:-37.703125-13*(e-1)-7*(n-1);return a+=this._dy,$("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+a})`,class:`Name ${this._nameClass}`}).html(t[0])}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML]}}class o extends a{constructor(t,e){super(t,e),this._intCity=[],this._intLine=[],this._intColour=[],this._intNameZH=[],this._intNameEN=[],this._intInfos=e.interchange[0],e.interchange[0].forEach(t=>{this._intCity.push(t[0]),this._intLine.push(t[1]),this._intColour.push(t[2]),this._intNameZH.push(t[4]),this._intNameEN.push(t[5])})}get iconHTML(){let t=1!=this.namePos?0:180;return $("<use>",{"xlink:href":"#int3_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:this.iconClass})}get _tickRotation(){return 0}get _dy(){return 0}get _dx(){return 0}get _tickFlip(){return 1}get intTickHTML(){let t=[];return this._intInfos.map(t=>t[i.colour]).forEach((e,n)=>{if(n>=2)return;let i=-1===this.state?"#aaa":e,s=1!==this.namePos?18*(n+1):-18*(2-n);s+=this._dy,s*=this._tickFlip,t.push($("<use>",{"xlink:href":"#inttick_hk",stroke:i,transform:`translate(${this.x+this._dx},${this.y+s})rotate(${this._tickRotation})`,class:"rmg-line rmg-line__mtr rmg-line__change"}))}),t}get _txtAnchor(){return"middle"}get _intNameDX(){return 0}get _nameClass(){return-1==this.state?"Pass":"Future"}get intNameHTML(){let t=[],e=this._nameClass;return this._intInfos.map(t=>[t[i.nameZH],t[i.nameEN]]).forEach((n,i)=>{if(i>=2)return;let[a,r,o]=Object(s.i)(n,15,7);var l=0===this.namePos?18*(i+1):-18*(2-i);l+=this._dy,l*=this._tickFlip,l+=5.953125-(19.65625+13*(r-1)+7*(o-1))/2,t.push($("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x+this._intNameDX},${this.y+l})`,class:"Name "+e}).html(a[0]))}),t}get ungrpHTML(){return[...this.intTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML]}}class l extends o{get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}}class h extends o{get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}}class c extends r{constructor(t,e){e.interchange[0].push(e.interchange[1][1]),super(t,e),this._osiNames=e.interchange[1][0],this._osiType=e.change_type.substring(6,7)}get osiClass(){return"u"==this._osiType?"rmg-stn__mtr--unpaid-osi":"rmg-stn__mtr--paid-osi"}get iconHTML(){var t=1!=this.namePos?0:180;return $("<use>",{"xlink:href":"#osi11_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _dy(){return 0==this.namePos?26:-26}get _txtAnchor(){return"middle"}get _osiNameDX(){return 0}get osiNameHTML(){var t=this._dy+8.34375-12.515625;return $("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x+this._osiNameDX},${this.y+t})`,class:"Name "+this._nameClass}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1]))}get ungrpHTML(){return[this.intTickHTML,this.iconHTML,this.nameHTML,this.intNameHTML,this.osiNameHTML]}}class d extends c{get _txtAnchor(){return"end"}get _osiNameDX(){return-13}}class _ extends c{get _txtAnchor(){return"start"}get _osiNameDX(){return 13}}class u extends o{constructor(t,e){e.interchange[0].unshift(...e.interchange[1].slice(1,3)),super(t,e),this._osiNames=e.interchange[1][0],this._osiType=e.change_type.split("_").reverse()[0][0]}get osiClass(){return"u"==this._osiType?"rmg-stn__mtr--unpaid-osi":"rmg-stn__mtr--paid-osi"}get iconHTML(){var t=1!=this.namePos?0:180;return $("<use>",{"xlink:href":"#osi12_hk",transform:`translate(${this.x},${this.y})rotate(${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _dy(){return 0==this.namePos?8:-8}get _osiDY(){return 0==this.namePos?62.34375:-70.6875}get _osiTxtAnchor(){return"middle"}get _osiDX(){return 0}get osiNameHTML(){var t=-1==this.state?"Pass":"Future";return $("<g>",{"text-anchor":this._osiTxtAnchor,transform:`translate(${this.x+this._dx+this._osiDX},${this.y+this._osiDY})`,class:`Name ${t}`}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1].split("\\")[0]).append($("<tspan>",{x:0,dy:10}).text(this._osiNames[1].split("\\")[1]||"")))}get ungrpHTML(){return[...this.intTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.osiNameHTML]}}class g extends u{get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}}class m extends u{get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}}class p extends u{constructor(t,e){super(t,e),this._origIntInfo=e.interchange[0][2]}get _nameTxtAnchor(){return this._osiTxtAnchor}get _nameDY(){return 1===this.namePos?11.515625:-11.515625}get origIntTickHTML(){var t=1==this.namePos?0:180,e=this._origIntInfo[i.colour],n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get origIntNameHTML(){var[t,e,n]=Object(s.i)([this._origIntInfo[i.nameZH],this._origIntInfo[i.nameEN]],15,7),a=1==this.namePos?30.953125:-37.703125-13*(e-1)-7*(n-1);return $("<g>",{"text-anchor":this._txtAnchor,transform:`translate(${this.x-this._nameDX},${this.y+a})`,class:`Name ${this._nameClass}`}).html(t[0])}get _osiNameDX(){return 0}get osiNameHTML(){var t=this._dy-(1===this.namePos?27:-27)+8.34375-12.515625;return $("<g>",{"text-anchor":this._osiTxtAnchor,transform:`translate(${this.x+this._osiNameDX},${this.y+t})`,class:"Name "+this._nameClass}).append($("<text>").addClass("rmg-name__zh rmg-name__mtr--osi").text(this._osiNames[0])).append($("<text>",{x:0,dy:12,class:"rmg-name__en rmg-name__mtr--osi"}).text(this._osiNames[1]))}get ungrpHTML(){return[...this.intTickHTML,this.origIntTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.origIntNameHTML,this.osiNameHTML]}}class f extends p{get _nameDX(){return 3}get _tickRotation(){return 90}get _txtAnchor(){return"end"}get _intNameDX(){return-24}get _osiNameDX(){return 13}get _osiTxtAnchor(){return"start"}}class w extends p{get _nameDX(){return-3}get _tickRotation(){return-90}get _txtAnchor(){return"start"}get _intNameDX(){return 24}get _osiNameDX(){return-13}get _osiTxtAnchor(){return"end"}}class v extends u{constructor(t,e){super(t,e),[this._origIntCity,this._origIntLine,this._origIntColour,this._origIntFg,this._origIntNameZH,this._origIntNameEN]=e.interchange[0][2]}get origIntTickHTML(){var t=1==this.namePos?180:0,e=this._origIntColour,n=$("<use>",{"xlink:href":"#inttick_hk",stroke:e,transform:`translate(${this.x},${this.y})rotate(${t})`,class:"rmg-line rmg-line__mtr rmg-line__change"});return-1==this.state&&n.addClass("rmg-line__pass"),n}get origIntNameHTML(){var[t,e,n]=Object(s.i)([this._origIntNameZH,this._origIntNameEN],15,7),i=0==this.namePos?30.953125:-37.703125-13*(e-1)-7*(n-1);return $("<g>",{"text-anchor":"middle",transform:`translate(${this.x},${this.y+i})`,class:`Name ${this._nameClass}`}).html(t[0])}get iconHTML(){var t=1==this.namePos?1:-1,e="lineend"==this.children[0]?1:-1;this.children[0];return $("<use>",{"xlink:href":"#osi22end_hk",transform:`translate(${this.x},${this.y})scale(${e},${t})`,class:[this.iconClass,this.osiClass].join(" ")})}get _tickRotation(){return"lineend"==this.children[0]?-90:90}get _tickFlip(){return-1}get _dx(){return"lineend"==this.children[0]?41:-41}get _dy(){return 0==this.namePos?-18:18}get _intNameDX(){return"lineend"==this.children[0]?65:-65}get _txtAnchor(){return"lineend"==this.children[0]?"start":"end"}get _osiDY(){return 0==this.namePos?18.34375:-26.6875}get _osiTxtAnchor(){return"lineend"==this.children[0]?"start":"end"}get _osiDX(){return"lineend"==this.children[0]?-9:9}get ungrpHTML(){return[...this.intTickHTML,this.origIntTickHTML,this.iconHTML,this.nameHTML,...this.intNameHTML,this.origIntNameHTML,this.osiNameHTML]}}},function(t,e){t.exports=mdc.textField},function(t,e){t.exports=mdc.dialog},function(t,e){t.exports=jQuery},function(t,e){t.exports=mdc.select},function(t,e){t.exports=mdc.list},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var i=n(0),s=n(1);class a{constructor(t){this._longInterval=1,this.stations={},this._svgHeight=t.svg_height,this._svgWidth=t.svg_width,this._svgDestWidth=t.svg_dest_width,this._showOuter=t.show_outer,[this.themeCity,this.themeLine,this._themeColour,this._fgColour]=t.theme,this.yPc=t.y_pc,this._padding=t.padding,this._stripPc=t.strip_pc,this._branchSpacing=t.branch_spacing,this._txtFlip=t.txt_flip,this._lineNames=t.line_name;for(let[e,n]of Object.entries(t.stn_list))this.stations[e]=this._initStnInstance(e,n);this._currentStnId=t.current_stn_idx,this._direction=t.direction,this._platformNum=t.platform_num,this._destLegacy=t.dest_legacy,this._charForm=t.char_form;for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t),e.namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t))}_initStnInstance(t,e){switch(e.change_type){case"int2":return new s.a(t,e);case"int3_l":return new s.b(t,e);case"int3_r":return new s.c(t,e);case"osi11_ul":case"osi11_pl":return new s.e(t,e);case"osi11_ur":case"osi11_pr":return new s.f(t,e);case"osi12_ul":case"osi12_pl":return new s.g(t,e);case"osi12_ur":case"osi12_pr":return new s.h(t,e);case"osi22_pl":case"osi22_ul":return"linestart"==e.parents[0]||"lineend"==e.children[0]?new s.i(t,e):new s.j(t,e);case"osi22_pr":case"osi22_ur":return"linestart"==e.parents[0]||"lineend"==e.children[0]?new s.i(t,e):new s.k(t,e);default:return new s.l(t,e)}}set svgDestWidth(t){isNaN(t)||t<=0||(this._svgDestWidth=t,Object(i.l)("svg_dest_width",t),this.drawSVGFrame(),this.drawStrip(),this.drawDestInfo(),this.loadFonts())}set svgWidth(t){if(!(isNaN(t)||t<=0)){this._svgWidth=t,Object(i.l)("svg_width",t),this.drawSVGFrame();for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.loadFonts(),this.updateStnNameBg()}}set yPc(t){t=Number(t),this._yPc=t,Object(i.l)("y_pc",t);let e=t*this._svgHeight/100;$("g#main").attr("transform",`translate(0,${e})`)}set padding(t){t=Number(t),this._padding=t,Object(i.l)("padding",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.loadFonts(),this.updateStnNameBg()}set branchSpacing(t){t=Number(t),this._branchSpacing=t,Object(i.l)("branch_spacing",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.loadFonts(),this.updateStnNameBg()}set txtFlip(t){this._txtFlip=t,Object(i.l)("txt_flip",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t));$("#stn_icons").empty(),this.drawStns(),this.loadFonts(),this.updateStnNameBg()}set themeColour(t){this._themeColour=t[0],this._fgColour=t[1];var e=Object(i.e)();e.theme[2]=t[0],e.theme[3]=t[1],Object(i.j)(e),this.fillThemeColour()}set direction(t){this._direction=t,Object(i.l)("direction",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}set platformNum(t){this._platformNum=t,Object(i.l)("platform_num",t),$(".rmg-name__platformnum").text(t)}set charForm(t){this._charForm=t,Object(i.l)("char_form",t);var e=$(".rmg-name__zh").eq(0).attr("class").match(/rmg-name__char-\w{2,4}/g)[0];$(".rmg-name__zh").removeClass(e),$(".rmg-name__zh").addClass(`rmg-name__char-${t}`)}set lineNames(t){this._lineNames=t,Object(i.l)("line_name",t),this.drawDestInfo(),this.loadFonts()}set destLegacy(t){this._destLegacy=t,Object(i.l)("dest_legacy",t),this.drawDestInfo(),this.loadFonts()}set currentStnId(t){this._currentStnId=t,Object(i.l)("current_stn_idx",t);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg()}_rightWideFactor(t){var e=0;return["Int3RStation","OSI11RStation","OSI12RStation","OSI22LStation","OSI22RStation"].includes(this.stations[t].constructor.name)&&(e+=this._longInterval),2==this._stnOutdegree(t)&&(e+=this._longInterval/2),2==this._stnIndegree(this.stations[t].children[0])&&(e+=this._longInterval/2),e}_leftWideFactor(t){var e=0;return["Int3LStation","OSI11LStation","OSI12LStation","OSI22LStation","OSI22RStation"].includes(this.stations[t].constructor.name)&&(e+=this._longInterval),2==this._stnIndegree(t)&&(e+=this._longInterval/2),2==this._stnOutdegree(this.stations[t].parents[0])&&(e+=this._longInterval/2),e}_pathWeight(t,e){return this.stations[t].children.includes(e)?1+this._rightWideFactor(t)+this._leftWideFactor(e):-1/0}_cpm(t,e){var n=this;if(t==e)return 0;var i=this.stations[t].children.map(t=>i.push(1+n._cpm(t,e)));return Math.max(...i)}_cp(t,e){var n=this;if(t==e)return{len:0,nodes:[t]};let i=[],s=[];this.stations[t].children.forEach(a=>{let r=n._cp(a,e);r.len<0||(i.push(this._pathWeight(t,a)+r.len),r.nodes.unshift(t),s.push(r.nodes))});let a=Math.max(...i);return{len:a,nodes:s[i.indexOf(a)]}}get criticalPath(){let t=[],e=[];this.leftDests.forEach(n=>{this.rightDests.forEach(i=>{let s=this._cp(n,i);t.push(s.len),e.push(s.nodes)})});let n=Math.max(...t);return{len:n,nodes:e[t.indexOf(n)]}}_topoOrder(t,e=[]){var n=this;return e.push(t),this.stations[t].children.forEach(i=>{2==this._stnIndegree(i)&&0==this.stations[i].parents.indexOf(t)||e.concat(n._topoOrder(i,e))}),e}get tpo(){let t=this._topoOrder("linestart");return t.slice(1,t.length-1)}get y(){return 0}get stripY(){return this._stripPc*this._svgHeight/100}get turningRadius(){return this._branchSpacing/2*(Math.sqrt(2)/(Math.sqrt(2)-1))}get lineXs(){return[this._svgWidth*this._padding/100,this._svgWidth*(1-this._padding/100)]}get leftDests(){return this.stations.linestart.children}get rightDests(){return this.stations.lineend.parents}get lValidDests(){return Array.from(new Set(this.routes.filter(t=>-1!==t.indexOf(this._currentStnId)).map(t=>t.filter(t=>"lineend"!==t&&"linestart"!==t)[0])))}get rValidDests(){return Array.from(new Set(this.routes.filter(t=>-1!==t.indexOf(this._currentStnId)).map(t=>t.filter(t=>"lineend"!==t&&"linestart"!==t).reverse()[0])))}_stnIndegree(t){return this.stations[t].inDegree}_stnOutdegree(t){return this.stations[t].outDegree}_stnXShare(t){var e=this.criticalPath;if(e.nodes.includes(t))return this._cp(e.nodes[0],t).len;for(var n=t,i=t,s=!1,a=!1;;){var r=this.stations[n].parents[0];if("linestart"==r){s=!0;break}if(n=r,this._stnOutdegree(n)>1)break}for(;;){var o=this.stations[i].children;if("lineend"==o[0]){a=!0;break}if(i=o[0],this._stnIndegree(i)>1)break}var l=this._cp(n,t).len,h=this._cp(t,i).len;if(s){var c=this._cp(e.nodes[0],i).len;return this._stnXShare(i)-h/(l+h)*c}if(a)c=this._cp(n,e.nodes.slice(-1)[0]).len;else c=this._cp(n,i).len;return this._stnXShare(n)+l/(l+h)*c}_stnRealX(t){let[e,n]=this.lineXs;return e+this._stnXShare(t)/this.criticalPath.len*(n-e)}_stnYShare(t){if(["linestart","lineend"].includes(t)||this._stnIndegree(t)>1||this._stnOutdegree(t)>1)return 0;var e=this.stations[t].parents[0];return e?1==this._stnOutdegree(e)?this._stnYShare(e):0==this.stations[e].children.indexOf(t)?1:-1:0}_stnRealY(t){return this.y-this._stnYShare(t)*this._branchSpacing}_isSuccessor_old(t,e){var n=this.stations[t].children;if(!n.length)return!1;if(n.includes(e))return!0;for(let t of n)if(this._isSuccessor_old(t,e))return!0;return!1}_isSuccessor(t,e){for(let n of this.routes){let i=n.indexOf(t),s=n.indexOf(e);if(-1!==i&&-1!==s&&i<s)return!0}return!1}_isPredecessor_old(t,e){var n=this.stations[t].parents;if(!n.length)return!1;if(n.includes(e))return!0;for(let t of n)if(this._isPredecessor_old(t,e))return!0;return!1}_isPredecessor(t,e){for(let n of this.routes){let i=n.indexOf(t),s=n.indexOf(e);if(-1!==i&&-1!==s&&s<i)return!0}return!1}_stnState(t){return t==this._currentStnId?0:"r"==this._direction?this._isSuccessor(this._currentStnId,t)?1:-1:this._isPredecessor(this._currentStnId,t)?1:-1}_stnNamePos(t){var e=this.criticalPath.nodes;if("linestart"==t)return 1;var n=e.indexOf(t)%2;if(-1==n){var i=this.stations[t].parents[0];return 2==this._stnOutdegree(i)?this._stnNamePos(i):Number(!this._stnNamePos(i))}return n}drawSVGFrame(){$("#railmap, #outer").attr({width:this._svgWidth,height:this._svgHeight}),$("#destination, #dest_outer").attr({width:this._svgDestWidth,height:this._svgHeight}),$("#dest_strip_gz").attr("width",this._svgDestWidth),$("#strip_gz").attr("width",this._svgWidth)}showFrameOuter(){this._showOuter?$("#outer, #dest_outer").show():$("#outer, #dest_outer").hide()}drawStns(){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||$("#stn_icons").append(e.html);$("#stn_icons").html($("#stn_icons").html())}updateStnNameBg(){var t=Object(i.h)($(`#stn_icons > #${this._currentStnId} > .Name`)[0],"railmap");console.log(t),$("#current_bg").attr({x:t.x-3,width:t.width+6})}get stnDX(){return this.turningRadius-this._branchSpacing/2}get stnDY(){return this._branchSpacing/2}get stnExtraH(){var[t,e]=this.lineXs;return(e-t)/this.criticalPath.len*this._longInterval}get stnSpareH(){var[t,e]=this.lineXs,n=((e-t)/this.criticalPath.len-2*this.stnDX)/2;return n<0&&console.warn(`SVG width too small! ${n}`),n}get pathTurnENE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${-this.stnDY}`}get pathTurnNEE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${-this.stnDY}`}get pathTurnESE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${this.stnDY}`}get pathTurnSEE(){return`a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${this.stnDY}`}_linePath(t){var[e,n,i]=[],s=[],{stnExtraH:a,stnSpareH:r,pathTurnESE:o,pathTurnSEE:l,pathTurnENE:h,pathTurnNEE:c,stnDX:d}=this;return t.forEach(t=>{var[_,u]=["_stnRealX","_stnRealY"].map(e=>this[e](t));if(!n&&0!==n)return[e,i,n]=[t,_,u],void s.push(`M ${_},${u}`);u>n?(s.push(u==this.y?`h ${_-i-a*this._leftWideFactor(t)-r-2*d}`:`h ${a*this._rightWideFactor(e)+r}`),s.push(o,l)):u<n&&(s.push(u==this.y?`h ${_-i-a*this._leftWideFactor(t)-r-2*d}`:`h ${a*this._rightWideFactor(e)+r}`),s.push(h,c)),s.push(`H ${_}`),[e,i,n]=[t,_,u]}),s.join(" ").replace(/( H ([\d.]+))+/g," H $2")}drawLine(){this.branches.map(t=>{var e=t.filter(t=>this.stations[t].state>=0),n=t.filter(t=>this.stations[t].state<=0);1===e.length&&(n=t),0==e.filter(t=>-1!==n.indexOf(t)).length&&e.length&&(n[0]===t[0]?n.push(e[0]):e[0]===t[0]&&e[e.length-1]===t[t.length-1]&&n.length?(n=t,e=[]):n.unshift(e[e.length-1])),$("#line_main").append($("<path>",{d:this._linePath(e)})),$("#line_pass").append($("<path>",{d:this._linePath(n)}))}),$("#line_main").html($("#line_main").html()),$("#line_pass").html($("#line_pass").html())}drawStrip(){$("#strip").attr("d",`M 0,${this.stripY} H ${this._svgWidth}`),$("#dest_strip").attr("d",`M 0,${this.stripY} H ${this._svgDestWidth}`)}fillThemeColour(){$("#line_main, #strip, #dest_strip").attr("stroke",this._themeColour),$("#dest_name > #platform > circle").attr("fill",this._themeColour)}drawDestInfo(){$("#dest_name > #platform > text").text(this._platformNum);let t=this[this._direction+"ValidDests"],e="l"===this._direction?"start":"end";var[n,i]=[0,1].map(e=>t.map(t=>this.stations[t].name[e].replace(/\\/g," ")).join("/"));if(this._destLegacy){var[s,a]=this._lineNames;a+=" "}else var s=a="";$("#dest_name > g:last-child text").eq(0).text(`${s}往${n}`),$("#dest_name > g:last-child text").eq(1).text(`${a}to ${i}`);var r=310+$("#dest_name > g:last-child")[0].getBoundingClientRect().width+45+50,o="l"==this._direction?1:-1,l=(this._svgDestWidth-o*r)/2,h=90*(1-o),c=l+285*o,d=c+120*o;$("#dest_name > use").attr("transform",`translate(${l},130)rotate(${h})`),$("#dest_name > #platform").attr("transform",`translate(${c},130)`),$("#dest_name > g:last-child").attr({transform:`translate(${d},105)`,"text-anchor":e})}loadFonts(){$(".rmg-name__zh, .rmg-name__en").addClass(`rmg-name__char-${this._charForm}`)}updateStnName(t,e,n){let s=Object(i.e)();s.stn_list[t].name=e,s.stn_list[t].num=n,Object(i.j)(s),this.stations[t].name=e,this.stations[t].stnNum=n,$(`#stn_icons #${t}`).remove(),$("#stn_icons").append(this.stations[t].html),$("#stn_icons").html($("#stn_icons").html()),this.leftDests.includes(t)&&"l"==this._direction?this.drawDestInfo():this.rightDests.includes(t)&&"r"==this._direction&&this.drawDestInfo(),this.loadFonts(),t==this._currentStnId&&this.updateStnNameBg()}updateStnTransfer(t,e,n=null){var s=this.stations[t].constructor.name,r=Object(i.e)();if(r.stn_list[t].change_type=e,"none"==e?(delete r.stn_list[t].transfer,r.stn_list[t].interchange=[[]]):r.stn_list[t].interchange=n,Object(i.j)(r),this.stations[t]=this._initStnInstance(t,r.stn_list[t]),s!=this.stations[t].constructor.name){for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t),e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip()}else this.stations[t].x=this._stnRealX(t),this.stations[t].y=this._stnRealY(t),this.stations[t].namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t),this.stations[t].state=this._stnState(t),$(`#stn_icons #${t}`).remove(),$("#stn_icons").append(this.stations[t].html),$("#stn_icons").html($("#stn_icons").html());this.loadFonts(),this.updateStnNameBg()}removeStn(t){var e=Object(i.e)(),n=this.stations[t].parents,s=this.stations[t].children,r=!0;for(let e in this.stations)if(![t,"linestart","lineend"].includes(e)&&0==this._stnYShare(e)){r=!1;break}if(2==n.length&&2==s.length)return!1;if(r)return!1;if(4==Object.keys(e.stn_list).length)return!1;if(2==n.length||2==s.length)n.forEach(t=>{e.stn_list[t].children=s,this.stations[t].children=s}),s.forEach(t=>{e.stn_list[t].parents=n,this.stations[t].parents=n}),1==n.length&&(e.stn_list[n[0]].branch.right=this.stations[t].branch.right,this.stations[n[0]].branch.right=this.stations[t].branch.right),1==s.length&&(e.stn_list[s[0]].branch.left=this.stations[t].branch.left,this.stations[s[0]].branch.left=this.stations[t].branch.left);else if(2==this._stnOutdegree(n[0])&&2==this._stnIndegree(s[0])){var o=this.stations[n[0]].children.indexOf(t),l=this.stations[s[0]].parents.indexOf(t);e.stn_list[n[0]].children.splice(o,1),this.stations[n[0]].children.splice(o,1),e.stn_list[s[0]].parents.splice(l,1),this.stations[s[0]].parents.splice(l,1),e.stn_list[n[0]].branch.right=[],this.stations[n[0]].branch.right=[],e.stn_list[s[0]].branch.left=[],this.stations[s[0]].branch.left=[]}else n.forEach(n=>{var i=e.stn_list[n].children.indexOf(t);s.length?(e.stn_list[n].children[i]=s[0],this.stations[n].children[i]=s[0]):(e.stn_list[n].children.splice(i,1),this.stations[n].children.splice(i,1)),this.stations[n].branch.right[1]===t&&(this.stations[n].branch.right[1]=s[0],e.stn_list[n].branch.right[1]=s[0])}),s.forEach(i=>{var s=e.stn_list[i].parents.indexOf(t);n.length?(e.stn_list[i].parents[s]=n[0],this.stations[i].parents[s]=n[0]):(e.stn_list[i].parents.splice(s,1),this.stations[i].parents.splice(s,1)),this.stations[i].branch.left[1]===t&&(this.stations[i].branch.left[1]=n[0],e.stn_list[i].branch.left[1]=n[0])});delete e.stn_list[t],delete this.stations[t];if(this._currentStnId==t){var h=Object.keys(this.stations)[1];this._currentStnId=h,e.current_stn_idx=h,!0}Object(i.j)(e),n.concat(s).forEach(t=>{["linestart","lineend"].includes(t)||(this.stations[t]=this._initStnInstance(t,e.stn_list[t]))});for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t),e.state=this._stnState(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg(),!0}newStnPossibleLoc(t,e){switch("before"==t?this._stnIndegree(e):this._stnOutdegree(e)){case 2:return[1,1,1,[],[]];case 1:if(0==this._stnYShare(e)){let n=this.newBranchPossibleEnd(t,e);return n=n.length?n:[],[1,0,0,n,n]}return this.stations[e].y>this.y?"before"==t?[this._stnOutdegree(this.stations[e].parents[0])-1,0,1,[],[]]:[this._stnIndegree(this.stations[e].children[0])-1,0,1,[],[]]:"before"==t?[this._stnOutdegree(this.stations[e].parents[0])-1,1,0,[],[]]:[this._stnIndegree(this.stations[e].children[0])-1,1,0,[],[]]}return[0,0,0,[],[]]}newBranchPossibleEnd(t,e){let n=[];if("before"==t){for(;1==this._stnIndegree(e);)e=this.stations[e].parents[0],n.unshift(e);n.pop()}else{for(;1==this._stnOutdegree(e);)e=this.stations[e].children[0],n.push(e);n.shift()}return n}addStn(t,e,n,s){let r=Object(i.f)();for(;Object.keys(this.stations).includes(r);)r=Object(i.f)();let o=Object(i.e)(),l={};"before"==t?"centre"==n?(l.parents=this.stations[e].parents,0==this._stnIndegree(e)&&this.stations[e].y!=this.y?l.children=this.leftDests:this.stations[e].y!=this.y?(l.children=this.stations[this.stations[e].parents[0]].children,l.branch={left:[],right:this.stations[l.parents[0]].branch.right},this.stations[l.parents[0]].branch.right=[],o.stn_list[l.parents[0]].branch.right=[]):(l.children=[e],l.branch={left:this.stations[e].branch.left,right:[]},this.stations[e].branch.left=[],o.stn_list[e].branch.left=[]),l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]}),l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]})):"upper"==n?(l.branch={left:[],right:[]},2==this._stnIndegree(e)?(this.stations[e].branch.left[1]==this.stations[e].parents[0]&&(this.stations[e].branch.left[1]=r,o.stn_list[e].branch.left[1]=r),l.parents=this.stations[e].parents.slice(0,1),l.children=[e],l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]}),this.stations[e].parents[0]=r,o.stn_list[e].parents[0]=r):(l.parents=this.stations[e].parents,l.children=[e],l.parents.forEach(t=>{this.stations[t].children[0]=r,o.stn_list[t].children[0]=r,this.stations[t].branch.right[1]===e&&(this.stations[t].branch.right[1]=r,o.stn_list[t].branch.right[1]=r)}),l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]}))):"lower"==n?(l.branch={left:[],right:[]},2==this._stnIndegree(e)?(this.stations[e].branch.left[1]==this.stations[e].parents[1]&&(this.stations[e].branch.left[1]=r,o.stn_list[e].branch.left[1]=r),l.parents=this.stations[e].parents.slice(1),l.children=[e],l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]}),this.stations[e].parents[1]=r,o.stn_list[e].parents[1]=r):(l.parents=this.stations[e].parents,l.children=[e],l.parents.forEach(t=>{this.stations[t].children[1]=r,o.stn_list[t].children[1]=r,this.stations[t].branch.right[1]===e&&(this.stations[t].branch.right[1]=r,o.stn_list[t].branch.right[1]=r)}),l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]}))):"newupper"==n?(l.branch={left:[],right:[]},this.stations[e].branch.left[1]=r,o.stn_list[e].branch.left[1]=r,this.stations[s].branch.right[1]=r,o.stn_list[s].branch.right[1]=r,l.parents=[s],l.children=[e],this.stations[s].children.unshift(r),o.stn_list[s].children.unshift(r),this.stations[e].parents.unshift(r),o.stn_list[e].parents.unshift(r)):"newlower"==n&&(l.branch={left:[],right:[]},this.stations[e].branch.left[1]=r,o.stn_list[e].branch.left[1]=r,this.stations[s].branch.right[1]=r,o.stn_list[s].branch.right[1]=r,l.parents=[s],l.children=[e],this.stations[s].children.push(r),o.stn_list[s].children.push(r),this.stations[e].parents.push(r),o.stn_list[e].parents.push(r)):"centre"==n?(l.children=this.stations[e].children,0==this._stnOutdegree(e)&&this.stations[e].y!=this.y?l.parents=this.rightDests:this.stations[e].y!=this.y?(l.parents=this.stations[this.stations[e].children[0]].parents,l.branch={left:this.stations[l.children[0]].branch.left,right:[]},this.stations[l.children[0]].branch.left=[],o.stn_list[l.children[0]].branch.left=[]):(l.parents=[e],l.branch={left:[],right:this.stations[e].branch.right},this.stations[e].branch.right=[],o.stn_list[e].branch.right=[]),l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]}),l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]})):"upper"==n?(l.branch={left:[],right:[]},2==this._stnOutdegree(e)?(this.stations[e].branch.right[1]==this.stations[e].children[0]&&(this.stations[e].branch.right[1]=r,o.stn_list[e].branch.right[1]=r),l.children=this.stations[e].children.slice(0,1),l.parents=[e],l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]}),this.stations[e].children[0]=r,o.stn_list[e].children[0]=r):(l.children=this.stations[e].children,l.parents=[e],l.children.forEach(t=>{this.stations[t].parents[0]=r,o.stn_list[t].parents[0]=r,this.stations[t].branch.left[1]===e&&(this.stations[t].branch.left[1]=r,o.stn_list[t].branch.left[1]=r)}),l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]}))):"lower"==n?(l.branch={left:[],right:[]},2==this._stnOutdegree(e)?(this.stations[e].branch.right[1]==this.stations[e].children[1]&&(this.stations[e].branch.right[1]=r,o.stn_list[e].branch.right[1]=r),l.children=this.stations[e].children.slice(1),l.parents=[e],l.children.forEach(t=>{this.stations[t].parents=[r],o.stn_list[t].parents=[r]}),this.stations[e].children[1]=r,o.stn_list[e].children[1]=r):(l.children=this.stations[e].children,l.parents=[e],l.children.forEach(t=>{1===this._stnIndegree(t)?(this.stations[t].parents[0]=r,o.stn_list[t].parents[0]=r):(this.stations[t].parents[1]=r,o.stn_list[t].parents[1]=r),this.stations[t].branch.left[1]===e&&(this.stations[t].branch.left[1]=r,o.stn_list[t].branch.left[1]=r)}),l.parents.forEach(t=>{this.stations[t].children=[r],o.stn_list[t].children=[r]}))):"newupper"==n?(l.branch={left:[],right:[]},this.stations[e].branch.right=["through",r],o.stn_list[e].branch.right=["through",r],this.stations[s].branch.left=["through",r],o.stn_list[s].branch.left=["through",r],l.children=[s],l.parents=[e],this.stations[s].parents.unshift(r),o.stn_list[s].parents.unshift(r),this.stations[e].children.unshift(r),o.stn_list[e].children.unshift(r)):"newlower"==n&&(l.branch={left:[],right:[]},this.stations[e].branch.right=["through",r],o.stn_list[e].branch.right=["through",r],this.stations[s].branch.left=["through",r],o.stn_list[s].branch.left=["through",r],l.children=[s],l.parents=[e],this.stations[s].parents.push(r),o.stn_list[s].parents.push(r),this.stations[e].children.push(r),o.stn_list[e].children.push(r)),l.name=[`車站${r.toUpperCase()}`,`Station ${r.toUpperCase()}`],l.change_type="none",l.num="00",l.interchange=[[]],o.stn_list[r]=l,Object(i.j)(o),this.stations[r]=this._initStnInstance(r,l),this.stations[e]=this._initStnInstance(e,Object(i.e)().stn_list[e]);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t),e.namePos=this._txtFlip?Number(!this._stnNamePos(t)):this._stnNamePos(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawStrip(),this.drawDestInfo(),this.loadFonts(),this.updateStnNameBg(),[r,l]}reverseStns(){var t=Object(i.e)();for(let[n,i]of Object.entries(this.stations))if("linestart"===n)t.stn_list.lineend.parents=i.children.reverse(),t.stn_list.lineend.branch={left:i.branch.right,right:[]};else if("lineend"===n)t.stn_list.linestart.children=i.parents.reverse(),t.stn_list.linestart.branch={left:[],right:i.branch.left};else{var e=i.children.reverse().map(t=>{switch(t){case"linestart":return"lineend";case"lineend":return"linestart";default:return t}});t.stn_list[n].children=i.parents.reverse().map(t=>{switch(t){case"linestart":return"lineend";case"lineend":return"linestart";default:return t}}),t.stn_list[n].parents=e,t.stn_list[n].branch.left=i.branch.right,t.stn_list[n].branch.right=i.branch.left}Object(i.j)(t),location.reload(!0)}updateBranchType(t,e,n){let s=i.a[e];if(this.stations[t].branch[s][0]===n)return;this.stations[t].branch[s][0]=n;let r=Object(i.e)();r.stn_list[t].branch[s][0]=n,Object(i.j)(r);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.state=this._stnState(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}updateBranchFirst(t,e,n){let s=i.a[e];if(this.stations[t].branch[s][1]===n)return!1;let r=n,o=Object(i.e)();if("right"===s){for(;1===this.stations[r].inDegree;)r=this.stations[r].children[0];let e=this.stations[t].children.indexOf(n);this.stations[t].branch.right[1]=o.stn_list[t].branch.right[1]=n,this.stations[r].branch.left[1]=o.stn_list[r].branch.left[1]=this.stations[r].parents[e]}else{for(;1===this.stations[r].outDegree;)r=this.stations[r].parents[0];let e=this.stations[t].parents.indexOf(n);this.stations[t].branch.left[1]=o.stn_list[t].branch.left[1]=n,this.stations[r].branch.right[1]=o.stn_list[r].branch.right[1]=this.stations[r].children[e]}Object(i.j)(o);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.x=this._stnRealX(t),e.y=this._stnRealY(t),e.state=this._stnState(t));return a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts(),!0}updateBranchPos(t,e,n){let s=i.a[e];if("right"===s){if(this.stations[t].children.indexOf(this.stations[t].branch.right[1])===n)return}else if(this.stations[t].parents.indexOf(this.stations[t].branch.left[1])===n)return;let r=this.stations[t].branch[s][1],o=Object(i.e)();if("right"===s){for(;1===this.stations[r].inDegree;)r=this.stations[r].children[0];this.stations[t].children.reverse(),o.stn_list[t].children.reverse(),this.stations[r].parents.reverse(),o.stn_list[r].parents.reverse()}else{for(;1===this.stations[r].outDegree;)r=this.stations[r].parents[0];this.stations[t].parents.reverse(),o.stn_list[t].parents.reverse(),this.stations[r].children.reverse(),o.stn_list[r].children.reverse()}Object(i.j)(o);for(let[t,e]of Object.entries(this.stations))["linestart","lineend"].includes(t)||(e.y=this._stnRealY(t));a.clearSVG(),this.drawStns(),this.drawLine(),this.drawDestInfo(),this.loadFonts()}static clearSVG(){$("#stn_icons, #line_main, #line_pass").empty()}static initSVG(t){t.drawSVGFrame(),t.showFrameOuter(),t.drawStns(),t.fillThemeColour(),t.drawLine(),t.drawStrip(),t.drawDestInfo(),t.loadFonts(),t.updateStnNameBg()}get branches(){for(var t=["linestart"],e=[[]],n=0;t.length;){var i=t.shift(),s=e[n][0]||null,a=[i];for(s&&a.unshift(s);"lineend"!=i&&("linestart"==i||s!=this.stations[i].branch.left[1]);){s=i;var r=this.stations[s].children;switch(r.length){case 1:i=r[0];break;case 2:if(e.push([s]),"linestart"==s)var o=this.stations[s].branch.right[1];else o=this.stations[s].branch.right[1];t.push(o),i=r.filter(t=>t!=o)[0]}a.push(i)}e[n]=a,n++}return e.map(t=>t.filter(t=>!["linestart","lineend"].includes(t)))}get routes(){for(var t=["linestart"],e=[["linestart"]],n=0;t.length;){var i=t.shift(),s=e[n].slice().reverse()[0]||null;for(s&&"linestart"!==i?e[n].push(i):e[n]=[i];"lineend"!==i;){s=i;var a=this.stations[s].children;switch(a.length){case 1:i=a[0];break;case 2:var r=this.stations[s].branch.right[1];"through"===this.stations[s].branch.right[0]?(e.push(e[n].slice()),t.push(r)):0===n&&(e.push([s]),t.push(r)),i=a.filter(t=>t!=r)[0]}if(e[n].push(i),s===this.stations[i].branch.left[1]&&"nonthrough"===this.stations[i].branch.left[0])break}n++}return e}}},function(t,e){t.exports=mdc.tabBar},function(t,e){t.exports=mdc.slider},function(t,e){t.exports=mdc.ripple},function(t,e){t.exports=mdc.switchControl},function(t,e){t.exports=mdc.iconButton},,function(t,e,n){"use strict";n.r(e);var i=n(0),s=n(7);function a(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var r="data-mdc-auto-init",o="data-mdc-auto-init-state",l="initialized",h={},c=console.warn.bind(console);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function d(t){var e,n;void 0===t&&(t=document);var i,s,c,d,_=[],u=[].slice.call(t.querySelectorAll("["+r+"]"));u=u.filter((function(t){return t.getAttribute(o)!==l}));try{for(var g=a(u),m=g.next();!m.done;m=g.next()){var p=m.value,f=p.getAttribute(r);if(!f)throw new Error("(mdc-auto-init) Constructor name must be given.");var $=h[f];if("function"!=typeof $)throw new Error("(mdc-auto-init) Could not find constructor in registry for "+f);var w=$.attachTo(p);Object.defineProperty(p,f,{configurable:!0,enumerable:!1,value:w,writable:!1}),_.push(w),p.setAttribute(o,l)}}catch(t){e={error:t}}finally{try{m&&!m.done&&(n=g.return)&&n.call(g)}finally{if(e)throw e.error}}return i="MDCAutoInit:End",s={},void 0===c&&(c=!1),"function"==typeof CustomEvent?d=new CustomEvent(i,{bubbles:c,detail:s}):(d=document.createEvent("CustomEvent")).initCustomEvent(i,c,!1,s),document.dispatchEvent(d),_}d.register=function(t,e,n){if(void 0===n&&(n=c),"function"!=typeof e)throw new Error("(mdc-auto-init) Invalid Constructor value: "+e+". Expected function.");var i=h[t];i&&n("(mdc-auto-init) Overriding registration for "+t+" with "+e+". Was: "+i),h[t]=e},d.deregister=function(t){delete h[t]},d.deregisterAll=function(){Object.keys(h).forEach(this.deregister,this)};var _=d,u=n(3),g=n(6),m=n(10);var p=n(4),f=function(t,e,n,i){return new(n||(n=Promise))((function(s,a){function r(t){try{l(i.next(t))}catch(t){a(t)}}function o(t){try{l(i.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,o)}l((i=i.apply(t,e||[])).next())}))};var w=n(2),v=n(9);var b=n(5),y=n(11);var x=n(8),S=n(12);const D=(t,e,n)=>$("<div>",{id:t,class:"mdc-card mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-2-phone station-card"}).append($("<div>",{class:"mdc-card__primary-action"}).append($("<div>",{class:"mdc-card__media mdc-card__media--16-9"})).append($("<div>",{class:"mdc-card__media-content station-card__content"}).html(e.join("<br>")).prepend($("<span>").css("display","gzmtr"===window.urlParams.get("style")?"inline":"none").text(n+" ")))).append($("<div>",{class:"mdc-card__actions"}).append($("<div>",{class:"mdc-card__action-icons"}).append($("<button>",{title:"Set As Current",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("my_location")).append($("<button>",{title:"Interchange",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("edit")).append($("<button>",{title:"Remove",class:"material-icons mdc-icon-button mdc-card__action mdc-card__action--icon"}).text("delete_forever"))));function N(){var t=$("#stn_transfer_diag .mdc-layout-grid__inner #int_name_zh,#int_name_en").slice(0,2).clone();t.find(".mdc-text-field").removeAttr("data-mdc-auto-init-state"),$("div#int_line").slice(1,3).after(t);const[e,n,s,a,r]=["#stn_add_diag","#stn_modify_diag","#stn_transfer_diag","#stn_delete_diag","#stn_delete_err"].map(t=>new u.MDCDialog($(t)[0])),[o,l,h,c]=["#prep","#pivot","#loc","#end"].map(t=>new b.MDCSelect($("#stn_add_diag").find(t)[0])),d=["#name_zh","#name_en"].map(t=>new w.MDCTextField($("#stn_modify_diag").find(t)[0])),_=new w.MDCTextField($("#stn_modify_diag #stn_num")[0]),g=new x.MDCTabBar($("#stn_transfer_diag .mdc-tab-bar")[0]),m=new b.MDCSelect($("#change_type")[0]),p=$("#int_city .mdc-select").map((t,e)=>new b.MDCSelect(e)).get(),f=$("#int_line .mdc-select").map((t,e)=>new b.MDCSelect(e)).get(),v=["zh","en"].map(t=>$(`div#int_name_${t}`).find(".mdc-text-field").map((t,e)=>new w.MDCTextField(e)).get()),y=["zh","en"].map(t=>new w.MDCTextField($("#stn_transfer_diag").find(`#osi_name_${t}`)[0])),[N,O]=["#tick_direc","#paid_area"].map(t=>new S.MDCIconButtonToggle($("#stn_transfer_diag").find(t)[0])),[M,C,T]=["through","first","pos"].map(t=>["left","right"].map(e=>new b.MDCSelect($(`#${e}_${t}`)[0])));var j=Object(i.e)().stn_list;window.myLine.tpo.forEach(t=>{$("#panel_stations .mdc-layout-grid__inner:first").append(D(t,j[t].name,j[t].num)),$("#pivot__selection").append($("<li>",{"data-value":t}).addClass("mdc-list-item").text(j[t].name.join()))}),$("#panel_stations .mdc-card__primary-action").on("click",t=>{var e=t.target.closest(".mdc-card").id;"add_stn"!=e&&($("#stn_modify_diag").attr("for",e),n.open())}),$('#panel_stations .mdc-card__action-icons > [title="Add"]').on("click",t=>{e.open()}),$('#panel_stations .mdc-card__action-icons > [title="Set As Current"]').on("click",t=>{var e=t.target.closest(".mdc-card").id;window.myLine.currentStnId=e}),$('#panel_stations .mdc-card__action-icons > [title="Interchange"]').on("click",t=>{$("#stn_transfer_diag").attr("for",t.target.closest(".mdc-card").id),s.open()}),$('#panel_stations .mdc-card__action-icons > [title="Remove"]').on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_delete_diag").attr("for",e),a.open()}),e.listen("MDCDialog:opening",()=>{l.selectedIndex=0}),e.listen("MDCDialog:opened",()=>{[o,l,h].forEach(t=>t.layout())}),e.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=o.value,i=l.value,r=h.value,d=c.value,[_,u]=window.myLine.addStn(e,i,r,d);console.log(e,i,r,d);var g=window.myLine.tpo[window.myLine.tpo.indexOf(_)-1]||"add_stn";$(`#panel_stations .mdc-layout-grid__inner:first #${g}`).after(D(_,u.name,u.num)),$(`#panel_stations #${_} .mdc-card__primary-action`).on("click",t=>{var e=t.target.closest(".mdc-card").id;"add_stn"!=e&&($("#stn_modify_diag").attr("for",e),n.open())}),$(`#panel_stations #${_} .mdc-card__action-icons > [title="Set As Current"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;window.myLine.currentStnId=e}),$(`#panel_stations #${_} .mdc-card__action-icons > [title="Interchange"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_transfer_diag").attr("for",e),s.open()}),$(`#panel_stations #${_} .mdc-card__action-icons > [title="Remove"]`).on("click",t=>{var e=t.target.closest(".mdc-card").id;$("#stn_delete_diag").attr("for",e),a.open()});var m=$("<li>",{"data-value":_,class:"mdc-list-item"}).text(u.name.join(" - "));"add_stn"==g?$("#pivot__selection").prepend(m):$(`#pivot__selection [data-value="${g}"`).after(m),$("#stn_modify_diag").attr("for",_),n.open()}}),o.listen("MDCSelect:change",t=>{$("#stn_add_diag #pivot")[0].dispatchEvent(new Event("MDCSelect:change"))}),l.listen("MDCSelect:change",t=>{var e=o.value,n=l.value,s=Object(i.e)().stn_list;for(let[t,i]of window.myLine.newStnPossibleLoc(e,n).entries())1===i||i.length?($("#loc__selection li").eq(t).show(),t>=3&&($("#end__selection").empty(),i.forEach(t=>{$("#end__selection").append($("<li>",{class:"mdc-list-item","data-value":t}).text(s[t].name.join(" - ")))}))):$("#loc__selection li").eq(t).hide();h.value=Array.from(document.querySelectorAll("#loc__selection li")).filter(t=>"none"!==t.style.display)[0].dataset.value}),h.listen("MDCSelect:change",t=>{["newupper","newlower"].includes(t.detail.value)?($("#stn_add_diag [new-branch]").show(),c.selectedIndex=0):$("#stn_add_diag [new-branch]").hide()}),n.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for");Promise.resolve(Object(i.e)().stn_list).then(t=>{d.forEach((n,i)=>n.value=t[e].name[i]),_.value=t[e].num})}),n.listen("MDCDialog:opened",()=>{d.map(t=>t.layout()),_.layout()}),$("#stn_modify_diag").find("#name_zh, #name_en, #stn_num").on("input",()=>{let t=d.map(t=>t.value);var e=_.value,n=$("#stn_modify_diag").attr("for");window.myLine.updateStnName(n,t,e),$(`#panel_stations .mdc-layout-grid__inner:first #${n} .mdc-card__media-content`).html(t.join("<br>")).prepend($("<span>",{style:"gzmtr"==window.urlParams.get("style")?"":"display:none;"}).text(e+" ")),$(`li[data-value="${n}`).text(t.join())});const L=()=>{m.layout(),p.forEach(t=>t.layout()),f.forEach(t=>t.layout()),v.flat().forEach(t=>t.layout()),y.forEach(t=>t.layout())},P=()=>{[...M,...C,...T].map(t=>t.layout())};function I(t,e){e?($("#int_city, #int_line, #int_name_zh, #int_name_en").slice(4*t,4*(t+1)).show(),p[t].layout(),f[t].layout(),v.map(e=>e[t].layout())):$("#int_city, #int_line, #int_name_zh, #int_name_en").slice(4*t,4*(t+1)).hide()}g.listen("MDCTabBar:activated",t=>{switch(t.detail.index){case 0:$("#panel_interchange").show(),$("#panel_branch").hide(),L();break;case 1:$("#panel_interchange").hide(),$("#panel_branch").show(),P()}}),$.getJSON("data/city_list.json",t=>{var e=window.urlParams.get("lang");t.forEach(t=>{$("#int_city__selection.mdc-list").each((n,s)=>{$(s).append($("<li>",{class:"mdc-list-item","data-value":t.id}).text(Object(i.c)(t.country)+Object(i.g)(t.name,e)))})})}),s.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for"),n=Object(i.e)().stn_list[e];let s=Object(i.e)().theme[0];if(m.value=n.change_type.split("_")[0],"none"!==n.change_type){var a=n.interchange[0].concat(n.interchange[1]?n.interchange[1].slice(1,n.interchange[1].length):[]);a.length<3&&a.unshift([,,,,,,]),a.length<3&&a.push([,,,,,,]),console.log(a),a.forEach((t,e)=>{let n=$("#int_city__selection.mdc-list").eq(0).find(`[data-value="${t[0]||s}"]`).index();p[e].selectedIndex=n,v.forEach((n,i)=>n[e].value=t[4+i]||"")})}else{let t=$("#int_city__selection.mdc-list").eq(0).find(`[data-value="${s}"]`).index();p.forEach(e=>e.selectedIndex=t),v.flat().forEach(t=>t.value="")}["none","int2"].includes(n.change_type.split("_")[0])?N.on=!0:N.on="r"==n.change_type.slice(-1),"osi"==n.change_type.substring(0,3)?(y.forEach((t,e)=>t.value=n.interchange[1][0][e]),O.on="p"==n.change_type.split("_").reverse()[0][0]):(y.forEach(t=>t.value=""),O.on=!0),(t=>{["left","right"].forEach(e=>{let n=t.branch[e][0];n?(M[i.a[e]].value=n,$(`#${e}_through__selection [data-value="na"]`).hide(),$(`#${e}_through__selection [data-value="through"]`).show(),$(`#${e}_through__selection [data-value="nonthrough"]`).show(),$(`[${e}-first-group], [${e}-pos-group]`).show()):(M[i.a[e]].value="na",$(`#${e}_through__selection [data-value="na"]`).show(),$(`#${e}_through__selection [data-value="through"]`).hide(),$(`#${e}_through__selection [data-value="nonthrough"]`).hide(),$(`[${e}-first-group], [${e}-pos-group]`).hide())}),$("#left_first__selection, #right_first__selection").empty(),Promise.resolve(Object(i.e)().stn_list).then(e=>{[0,1].forEach(n=>{t[i.b[n]].forEach(t=>{$(`#${i.a[n]}_first__selection`).append($("<li>",{class:"mdc-list-item","data-value":t}).text(e[t].name.join()))})})}).then(()=>{M.forEach((e,n)=>{C[n].selectedIndex="na"!==e.value?t[i.b[n]].indexOf(t.branch[i.a[n]][1]):0})}),T.forEach((e,n)=>{e.selectedIndex=t[i.b[n]].indexOf(t.branch[i.a[n]][1])})})(n)}),s.listen("MDCDialog:opened",t=>{L(),P()}),s.listen("MDCDialog:closed",t=>{if("close"==t.detail.action)return;var e=t.target.getAttribute("for"),n=m.value,i=N.on?"r":"l";let s=y.map(t=>t.value);var a=O.on?"p":"u",[r,o,l]=[0,1,2].map(t=>[p[t].value,f[t].value].concat($("ul#int_line__selection").eq(t).find("li span").eq(f[t].selectedIndex).attr("style").match(/#[\w\d]+/g),...v.map(e=>e[t].value)));if("none"==n)window.myLine.updateStnTransfer(e,n);else if("osi22"==n)window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[r],[s,o,l]]);else switch(n){case"int2":window.myLine.updateStnTransfer(e,n,[[o]]);break;case"osi11":window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[],[s,o]]);break;default:switch(n){case"int3":window.myLine.updateStnTransfer(e,`${n}_${i}`,[[o,l]]);break;case"osi12":window.myLine.updateStnTransfer(e,`${n}_${a}${i}`,[[],[s,o,l]])}}}),m.listen("MDCSelect:change",t=>{if("int2"==t.detail.value)I(0,!1),I(1,!0),I(2,!1),$("#stn_transfer_diag #tick_direc").hide(),$("#osi_name_zh, #osi_name_en, #paid_area").hide();else if("int3"==t.detail.value)I(0,!1),I(1,!0),I(2,!0),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").hide();else if("osi11"==t.detail.value)I(0,!1),I(1,!0),I(2,!1),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").show();else if("osi12"==t.detail.value)I(0,!1),I(1,!0),I(2,!0),$("#stn_transfer_diag #tick_direc").show(),$("#osi_name_zh, #osi_name_en, #paid_area").show();else if("osi22"==t.detail.value){I(0,!0),I(1,!0),I(2,!0);let t=Object(i.e)().stn_list[$("#stn_transfer_diag").attr("for")];"linestart"==t.parents[0]||"lineend"==t.children[0]?$("#tick_direc").hide():$("#tick_direc").show()}else $("#stn_transfer_diag #panel_interchange [id]div").slice(1).hide(),$("#tick_direc, #paid_area").hide()}),p.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{-1!==t.detail.index&&$.getJSON(`data/${t.detail.value}.json`,t=>{var n=window.urlParams.get("lang");$("#int_line__selection.mdc-list").eq(e).empty(),t.forEach(t=>{$("#int_line__selection.mdc-list").eq(e).append(`<li class="mdc-list-item" data-value="${t.id}">\n                        <span style="background:${t.colour};color:${t.fg||"#fff"};">&nbsp;${Object(i.g)(t.name,n)}&nbsp;</span>\n                        </li>`)});var s=$("#stn_transfer_diag").attr("for"),a=Object(i.e)().stn_list[s];if("none"!==a.change_type){var r=a.interchange[0].concat(a.interchange[1]?a.interchange[1].slice(1,a.interchange[1].length):[]);r.length<3&&r.unshift([,,,,,,]),r.length<3&&r.push([,,,,,,]);var o=$("#int_line__selection.mdc-list").eq(e).find(`[data-value="${r[e][1]}"]`).index();f[e].selectedIndex=-1==o?0:o}else f[e].selectedIndex=0})})}),M.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if("na"===t.detail.value)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchType(n,e,t.detail.value)})}),C.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if(1===$(`#${i.a[e]}_first__selection`).children().length)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchFirst(n,e,t.detail.value)&&(T[e].selectedIndex=0===T[e].selectedIndex?1:0)})}),T.forEach((t,e)=>{t.listen("MDCSelect:change",t=>{if("na"===M[e].value)return;let n=$("#stn_transfer_diag").attr("for");window.myLine.updateBranchPos(n,e,t.detail.index)})}),a.listen("MDCDialog:opening",t=>{var e=$(t.target).attr("for");$("#stn_delete_diag #err_stn").text(Object(i.e)().stn_list[e].name.join(" - "))}),a.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=$(t.target).attr("for");window.myLine.removeStn(e)?($(`#panel_stations .mdc-layout-grid__inner #${e}`).remove(),$(`#pivot__selection [data-value="${e}"]`).remove()):r.open()}})}switch(window.urlParams=new URLSearchParams(window.location.search),(window.urlParams.get("lang")||localStorage.rmgLang||navigator.language.split("-").slice(0,2).join("-")).toLowerCase()){case"zh-cn":case"zh-hans":window.urlParams.set("lang","zh-Hans");break;case"zh":case"zh-hk":case"zh-tw":window.urlParams.set("lang","zh-HK");break;default:window.urlParams.set("lang","en")}switch(window.urlParams.get("style")){case"mtr":case"gzmtr":case"shmetro":break;default:window.urlParams.set("style","mtr")}history.pushState({url:window.location.href},null,"?"+window.urlParams.toString()),window.myLine=null,p(`[${window.urlParams.get("style")}-specific]`).show(),function(){const[t,e,n,a,r,o]=["#template_diag","#import_diag","#export_diag","#preview_diag","#style_diag","#lang_diag"].map(t=>u.MDCDialog.attachTo($(t)[0])),[l,h]=$("#panel_save .mdc-list").map((t,e)=>g.MDCList.attachTo(e)).get();l.listen("MDCList:action",e=>{switch(e.detail.index){case 0:t.open();break;case 1:$("#upload_file").click();break;case 2:$("<a>",{href:"data:application/json;base64,"+btoa(unescape(encodeURIComponent(localStorage.rmgParam))),download:"rmg_param.json"})[0].click();break;case 3:n.open()}}),$("#panel_save .mdc-list:nth-child(2) li:first-child span:nth-child(2) span:last-child").attr("trans-tag",$(`#style_diag [data-mdc-dialog-action="${window.urlParams.get("style")}"] span`).attr("trans-tag")).text($(`#style_diag [data-mdc-dialog-action="${window.urlParams.get("style")}"] span`).text()),$("#panel_save .mdc-list:nth-child(2) li:nth-child(2) span:nth-child(2) span:last-child").text($(`#lang_diag [data-mdc-dialog-action="${window.urlParams.get("lang")}"] span`).text()),h.listen("MDCList:action",t=>{switch(t.detail.index){case 0:r.open();break;case 1:o.open()}}),$.getJSON("templates/template_list.json",t=>{var e=window.urlParams.get("lang");t.forEach(t=>{$("#template_diag ul").append($("<li>",{class:"mdc-list-item","data-mdc-dialog-action":t.filename,"data-mdc-auto-init":"MDCRipple"}).append($("<span>",{class:"mdc-list-item__text"}).text(Object(i.g)(t.desc,e))))}),$("#template_diag li:first-child").attr("tabindex",0),_.register("MDCRipple",m.MDCRipple)}),t.listen("MDCDialog:closed",t=>{"close"!=t.detail.action&&$.getJSON(`templates/${t.detail.action}.json`,t=>{localStorage.rmgParam=JSON.stringify(t),location.reload(!0)})}),n.listen("MDCDialog:closed",t=>{switch(t.detail.action){case"close":break;case"svg1":$("#preview_diag").attr("for","destination"),a.open();break;case"svg2":$("#preview_diag").attr("for","railmap"),a.open()}}),$(window).on("resize",t=>{c()});const c=()=>{var t=$("preview_diag").attr("for"),[e,n]=["destination"==t?Object(i.e)().svg_dest_width:Object(i.e)().svg_width,Object(i.e)().svg_height],s=$(window).width()-32-50,a=$(window).height()-60-53-60,r=Math.min(s/e,a/n);$("#preview_diag").find("svg").attr({width:e*r,height:n*r}),$("#preview_diag").find(".mdc-dialog__surface").attr("style",`max-width:${s+50}px;`)};let d;a.listen("MDCDialog:opened",t=>{var e=$(t.target).attr("for"),[n,s]=["destination"==e?Object(i.e)().svg_dest_width:Object(i.e)().svg_width,Object(i.e)().svg_height];$("#preview_diag .mdc-dialog__surface").attr("style",`max-width:${$(window).width()-32}px;`);var a=$(window).width()-32-50,r=$(window).height()-60-53-60,o=Math.min(a/n,r/s);$(t.target).find(".mdc-dialog__content").append($("#"+$(t.target).attr("for")).clone().attr({style:"all:initial;",viewBox:`0 0 ${n} ${s}`,width:n*o,height:s*o})),$(t.target).find('svg [style="display: none;"]').remove()}),a.listen("MDCDialog:closed",t=>{if("close"!==t.detail.action){if("png"===t.detail.action)return Object(i.m)($(t.target).removeAttr("for").find("svg")),void $(t.target).find(".mdc-dialog__content").empty();if("svg"===t.detail.action){var e=document.createElement("a"),n=$(t.target).find(".mdc-dialog__content svg").prepend($("style#svg_share").clone());e.href="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(n[0].outerHTML))),e.download="rmg_export.svg",e.click(),$(t.target).removeAttr("for").find(".mdc-dialog__content").empty()}}else $(t.target).removeAttr("for").find(".mdc-dialog__content").empty()}),$("#upload_file").on("change",t=>{console.log(t.target.files[0]);let n=new FileReader;n.onload=function(t){console.log(t.target),d=JSON.parse(t.target.result),$("#import_diag").find(".mdc-dialog__content").html(Object(i.d)(d)),e.open()},n.readAsText(t.target.files[0])}),e.listen("MDCDialog:closed",t=>{"close"!=t.detail.action?(s.a.clearSVG(),localStorage.rmgParam=JSON.stringify(d),location.reload(!0)):$("#upload_file")[0].value=""}),r.listen("MDCDialog:closed",t=>{switch(t.detail.action){case"close":case window.urlParams.get("style"):return;default:window.urlParams.set("style",t.detail.action),window.location.href="?"+window.urlParams.toString()}}),o.listen("MDCDialog:closed",t=>{if("close"!=t.detail.action){var e=t.detail.action;localStorage.rmgLang=e,e!=window.urlParams.get("lang")&&(window.urlParams.set("lang",e),window.location.href="?"+window.urlParams.toString())}})}(),function(){const t=t=>f(this,void 0,void 0,(function*(){let e=yield(i=window.urlParams.get("style"),f(void 0,void 0,void 0,(function*(){switch(i){case"mtr":return Promise.resolve(s.a);case"gzmtr":return n.e(0).then(n.bind(null,15)).then(({RMGLineGZ:t})=>t);case"shmetro":return n.e(1).then(n.bind(null,16)).then(({RMGLineSH:t})=>t)}})));var i;window.myLine=yield new e(t),e.initSVG(window.myLine)}));if(null!=localStorage.rmgParam)try{Object(i.n)(),t(Object(i.e)())}catch(t){let e=u.MDCDialog.attachTo($("#init_err_diag")[0]);$("#init_err_diag").find("#err_stack").html(t+"<br>"+t.stack.replace(/\n/g,"<br>")),e.open(),console.error(t)}else $.getJSON("templates/blank.json",e=>{localStorage.rmgParam=JSON.stringify(e),Object(i.n)(),t(Object(i.e)())})}(),function(){let t=[!1,!0,!0,!0,!0];window.sliders=[],x.MDCTabBar.attachTo($("#panels .mdc-tab-bar")[0]).listen("MDCTabBar:activated",e=>{if($(".panel--active").removeClass("panel--active"),$(".panel").eq(e.detail.index).addClass("panel--active"),1==e.detail.index&&t[1]&&(!function(){const[t,e]=["#svg_dest_width","#svg_width"].map(t=>w.MDCTextField.attachTo($(t)[0])),[n,s,a]=["#branch_spacing","#y_pc","#padding"].map(t=>v.MDCSlider.attachTo($(t)[0]));window.sliders.push(n,s,a),Promise.resolve(Object(i.e)()).then(i=>{t.value=i.svg_dest_width,e.value=i.svg_width,s.value=i.y_pc,n.value=i.branch_spacing,a.value=i.padding}),$(t.root_).find("input").on("input",t=>window.myLine.svgDestWidth=Number(t.target.value)),$(e.root_).find("input").on("input",t=>window.myLine.svgWidth=Number(t.target.value)),n.listen("MDCSlider:input",t=>{window.myLine.branchSpacing=n.value}),s.listen("MDCSlider:input",t=>{window.myLine.yPc=Number(s.value)}),a.listen("MDCSlider:input",t=>{window.myLine.padding=a.value})}(),"gzmtr"===window.urlParams.get("style")&&function(){const[t,e]=["#direction_gz_x","#direction_gz_y"].map(t=>v.MDCSlider.attachTo($(t)[0]));window.sliders.push(t,e),Promise.resolve(Object(i.e)()).then(n=>{t.value=n.direction_gz_x,e.value=n.direction_gz_y}),t.listen("MDCSlider:input",e=>{window.myLine.directionGZX=Number(t.value)}),e.listen("MDCSlider:input",t=>{window.myLine.directionGZY=Number(e.value)})}(),t[1]=!1),1===e.detail.index&&window.sliders.forEach(t=>t.layout()),2==e.detail.index&&t[2]){switch(function(){const t=g.MDCList.attachTo($("#design_list")[0]),[e,n]=["#design_theme_diag","#line_name_diag"].map(t=>u.MDCDialog.attachTo($(t)[0])),[s,a]=["#theme_city","#theme_line"].map(t=>new b.MDCSelect($(t)[0])),[r,o]=["#name_zh","#name_en"].map(t=>w.MDCTextField.attachTo($("#line_name_diag").find(t)[0])),l=w.MDCTextField.attachTo($("#platform_num")[0]),h=t=>$("#design_list").find(`li#direc p#${t}`).text();Promise.resolve(Object(i.e)()).then(t=>{$("#design_list").find("li#name .mdc-list-item__secondary-text").text(t.line_name.join()),r.value=t.line_name[0],o.value=t.line_name[1],$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(h(t.direction)),l.value=t.platform_num}),$.getJSON("data/city_list.json",t=>{let e=window.urlParams.get("lang");t.forEach(t=>{$("#theme_city__selection").append($("<li>",{class:"mdc-list-item","data-value":t.id}).text(Object(i.c)(t.country)+Object(i.g)(t.name,e)))});var[n]=Object(i.e)().theme,a=$(`#theme_city__selection > [data-value="${n}"]`).index();s.selectedIndex=a}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 0:e.open();break;case 1:n.open();break;case 2:"r"==Object(i.e)().direction?(console.log("right to left"),window.myLine.direction="l",$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(h("l"))):(console.log("left to right"),window.myLine.direction="r",$("#design_list").find("li#direc .mdc-list-item__secondary-text").text(h("r")));break;case 4:window.myLine.reverseStns()}}),e.listen("MDCDialog:opened",()=>{[s,a].map(t=>t.layout())}),s.listen("MDCSelect:change",t=>{let e=t.detail.value;$("#theme_line__selection").empty(),$.getJSON(`data/${e}.json`,t=>{var n=window.urlParams.get("lang");t.forEach(t=>{$("#theme_line__selection").append($("<li>",{class:"mdc-list-item","data-value":t.id}).append($("<span>").css({background:t.colour,color:t.fg||"#fff"}).text(" "+Object(i.g)(t.name,n)+" ")))});var s=Object(i.e)();s.theme[0]=e,Object(i.j)(s);var r=$(`#theme_line__selection > [data-value="${s.theme[1]}"]`).index();a.selectedIndex=-1==r?0:r})}),a.listen("MDCSelect:change",t=>{let e=t.detail.index;var n=Object(i.e)();n.theme[1]=t.detail.value,Object(i.j)(n),window.myLine.themeLine=t.detail.value,window.myLine.themeColour=["background-color","color"].map(t=>$("#theme_line__selection span").eq(e).css(t)).map(i.k),$("#design_list").find("li#theme .mdc-list-item__secondary-text").html($("#theme_city__selection li").eq(s.selectedIndex).text()+" "+$("#theme_line__selection li").eq(e).html().trim())}),n.listen("MDCDialog:opened",t=>{[r,o].map(t=>t.layout())}),$("#line_name_diag").find(".mdc-text-field").on("input",()=>{let t=[r,o].map(t=>t.value);window.myLine.lineNames=t,$("#design_list").find("li#name .mdc-list-item__secondary-text").text(t.join())}),$(l.root_).find("input").on("input",t=>window.myLine.platformNum=t.target.value)}(),window.urlParams.get("style")){case"mtr":!function(){const t=g.MDCList.attachTo($("#design_list_mtr")[0]),e=u.MDCDialog.attachTo($("#design_char_diag")[0]),n=new y.MDCSwitch($("#legacy")[0]),s=t=>$("#design_char_diag").find("li").filter((e,n)=>n.dataset.mdcDialogAction===t).find("span").text();Promise.resolve(Object(i.e)()).then(t=>{$("#design_list_mtr").find("li#char .mdc-list-item__secondary-text").text(s(t.char_form)),n.checked=t.dest_legacy}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 0:window.myLine.txtFlip=!Object(i.e)().txt_flip;break;case 1:e.open()}}),e.listen("MDCDialog:closed",t=>{let e=t.detail.action;"close"!=e&&(window.myLine.charForm=e,$("#design_list_mtr").find("li#char .mdc-list-item__secondary-text").text(s(e)))}),$(n.root_).find("input").on("change",t=>window.myLine.destLegacy=t.target.checked)}();break;case"gzmtr":!function(){const t=g.MDCList.attachTo($("#design_list_gzmtr")[0]),e=u.MDCDialog.attachTo($("#panel_type_diag")[0]),[n,s]=["#psd_num","#line_num"].map(t=>w.MDCTextField.attachTo($(t)[0]));Promise.resolve(Object(i.e)()).then(t=>{n.value=t.psd_num,s.value=t.line_num}),t.listen("MDCList:action",t=>{switch(t.detail.index){case 1:e.open()}}),$(s.root_).find("input").on("input",t=>window.myLine.lineNum=t.target.value),$(n.root_).find("input").on("input",t=>window.myLine.psdNum=t.target.value),e.listen("MDCDialog:closed",t=>{"close"!==t.detail.action&&(window.myLine.infoPanelType=t.detail.action)})}()}t[2]=!1}3==e.detail.index&&t[3]&&(console.log("init again"),N(),t[3]=!1),4==e.detail.index&&t[4]&&($("#panel_info .mdc-card__actions #report").on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator/issues","_blank")}),$('#panel_info .mdc-card__action-icons [title="Star"]').on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator","_blank")}),$('#panel_info .mdc-card__action-icons [title="Fork"]').on("click",()=>{window.open("https://github.com/wongchito/RailMapGenerator/fork","_blank")}),t[4]=!1)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,