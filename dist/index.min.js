/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"index": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"LineGZ":"LineGZ","LineHK":"LineHK","LineSH":"LineSH","initDesign":"initDesign","initInfo":"initInfo","initLayout":"initLayout","vendors~initStations":"vendors~initStations","initStations":"initStations"}[chunkId]||chunkId) + ".min.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Line/Line.ts":
/*!**************************!*\
  !*** ./src/Line/Line.ts ***!
  \**************************/
/*! exports provided: RMGLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLine", function() { return RMGLine; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Station_Station__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Station/Station */ "./src/Station/Station.ts");



class RMGLine {
    constructor(param) {
        this._longInterval = 1;
        this.stations = {};
        this._svgHeight = param.svg_height;
        this._svgWidth = param.svg_width;
        this._svgDestWidth = param.svg_dest_width;
        this._showOuter = param['show_outer'];
        [this.themeCity, this.themeLine, this._themeColour, this._fgColour] = param.theme;
        this.yPc = param['y_pc'];
        this._padding = param['padding'];
        this._stripPc = param['strip_pc'];
        this._branchSpacing = param.branch_spacing;
        this._lineNames = param['line_name'];
        for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
            this.stations[stnId] = this._initStnInstance(stnId, stnInfo);
        }
        this._currentStnId = param['current_stn_idx'];
        this._direction = param['direction'];
        this._platformNum = param['platform_num'];
        // Calculate other properties of stations
        for (let stnId of Object.keys(this.stations)) {
            this._updateStnInstance(stnId);
        }
    }
    _initStnInstance(stnId, stnInfo) {
        return new _Station_Station__WEBPACK_IMPORTED_MODULE_1__["RMGStation"](stnId, stnInfo);
    }
    /**
     * Update the following properties of `RMGStation` instance.
     * * `x`
     * * `y`
     * * `state`
     * * plus style specific properties
     */
    _updateStnInstance(stnId) {
        if (['linestart', 'lineend'].includes(stnId)) {
            return;
        }
        let instance = this.stations[stnId];
        instance.x = this._stnRealX(stnId);
        instance.y = this._stnRealY(stnId);
        instance.state = this._stnState(stnId);
    }
    /**
     * Width (in pixels) of `svg#destination`.
     */
    // get svgDestWidth() {return getParams().svg_dest_width;}
    set svgDestWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgDestWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_dest_width', val);
        this.drawSVGFrame();
        this.drawStrip();
        this.drawDestInfo();
    }
    /**
     * Setter of width of `svg#railmap`.
     */
    set svgWidth(val) {
        if (isNaN(val) || val <= 0) {
            return;
        }
        this._svgWidth = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('svg_width', val);
        this.drawSVGFrame();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
    }
    /**
     * Setter of vertical position of line (y).
     * @param val Percentage of vertical position, given fixed `svgHeight`
     */
    set yPc(val) {
        this._yPc = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('y_pc', val);
        let y = val * this._svgHeight / 100;
        $('g#main').attr('transform', `translate(0,${y})`);
    }
    set padding(val) {
        val = Number(val);
        this._padding = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('padding', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
    }
    set branchSpacing(val) {
        this._branchSpacing = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('branch_spacing', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
    }
    set themeColour(hexs) {
        this._themeColour = hexs[0];
        this._fgColour = hexs[1];
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.theme[2] = hexs[0];
        param.theme[3] = hexs[1];
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.fillThemeColour();
    }
    /**
     * Setter of train direction.
     */
    set direction(val) {
        this._direction = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('direction', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
    }
    /**
     * Setter of platform number (can be string).
     */
    set platformNum(val) {
        this._platformNum = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('platform_num', val);
        $('.rmg-name__platformnum').text(val);
    }
    /**
     * Setter of names of line.
     */
    set lineNames(val) {
        this._lineNames = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('line_name', val);
    }
    /**
     * Setter of current station.
     */
    set currentStnId(val) {
        this._currentStnId = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["setParams"])('current_stn_idx', val);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
    }
    /**
     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.
     */
    _rightWideFactor(stnId) {
        return 0;
    }
    /**
     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.
     */
    _leftWideFactor(stnId) {
        return 0;
    }
    /**
     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).
     */
    _pathWeight(stnId1, stnId2) {
        if (!this.stations[stnId1].children.includes(stnId2)) {
            return -Infinity;
        }
        return 1 + this._rightWideFactor(stnId1) + this._leftWideFactor(stnId2);
    }
    /**
     * Critical path and corresponding length from a station to another.
     * @param from ID of station on the left
     * @param to ID of station on the left
     */
    _cp(from, to) {
        let self = this;
        if (from == to) {
            return { len: 0, nodes: [from] };
        }
        let allLengths = [];
        let criticalPaths = [];
        this.stations[from].children.forEach(child => {
            let cp = self._cp(child, to);
            if (cp.len < 0) {
                return;
            }
            allLengths.push(this._pathWeight(from, child) + cp.len);
            cp.nodes.unshift(from);
            criticalPaths.push(cp.nodes);
        });
        let maxLength = Math.max(...allLengths);
        return {
            'len': maxLength,
            'nodes': criticalPaths[allLengths.indexOf(maxLength)]
        };
    }
    /**
     * Getter of critical path (from left to right) and corresponding length of the entire line.
     */
    get criticalPath() {
        let allLengths = [];
        let criticalPaths = [];
        this.leftDests.forEach(ld => {
            this.rightDests.forEach(rd => {
                let cp = this._cp(ld, rd);
                allLengths.push(cp.len);
                criticalPaths.push(cp.nodes);
            });
        });
        let maxLen = Math.max(...allLengths);
        return {
            'len': maxLen,
            'nodes': criticalPaths[allLengths.indexOf(maxLen)]
        };
    }
    _topoOrder(from, tpo = []) {
        var self = this;
        tpo.push(from);
        this.stations[from].children.forEach(child => {
            if (this._stnIndegree(child) == 2 && this.stations[child].parents.indexOf(from) == 0) {
                // wait the other branch
                return;
            }
            tpo.concat(self._topoOrder(child, tpo));
        });
        return tpo;
    }
    get tpo() {
        let res = this._topoOrder('linestart');
        return res.slice(1, res.length - 1);
    }
    get stripY() { return this._stripPc * this._svgHeight / 100; }
    get turningRadius() { return this._branchSpacing / 2 * (Math.sqrt(2) / (Math.sqrt(2) - 1)); }
    get lineXs() {
        return [
            this._svgWidth * this._padding / 100,
            this._svgWidth * (1 - this._padding / 100)
        ];
    }
    get leftDests() { return this.stations.linestart.children; }
    get rightDests() { return this.stations.lineend.parents; }
    get lValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart')[0])));
    }
    get rValidDests() {
        return Array.from(new Set(this.routes
            .filter(route => route.indexOf(this._currentStnId) !== -1)
            .map(route => route.filter(stnId => stnId !== 'lineend' && stnId !== 'linestart').reverse()[0])));
    }
    /**
     * Indegree of a station node.
     */
    _stnIndegree(stnId) { return this.stations[stnId].inDegree; }
    /**
     * Outdegree of a station node.
     */
    _stnOutdegree(stnId) { return this.stations[stnId].outDegree; }
    /**
     * Horizontal position (in shares) of station icon.
     */
    _stnXShare(stnId) {
        var self = this;
        var cp = this.criticalPath;
        if (cp.nodes.includes(stnId)) {
            return this._cp(cp.nodes[0], stnId).len;
        }
        var partSource = stnId;
        var partSink = stnId;
        var leftOpenJaw = false;
        var rightOpenJaw = false;
        while (true) {
            var parent = this.stations[partSource].parents[0];
            if (parent == 'linestart') {
                leftOpenJaw = true;
                break;
            }
            partSource = parent;
            if (this._stnOutdegree(partSource) > 1) {
                break;
            }
        }
        while (true) {
            var children = this.stations[partSink].children;
            if (children[0] != 'lineend') {
                partSink = children[0];
            }
            else {
                rightOpenJaw = true;
                break;
            }
            if (this._stnIndegree(partSink) > 1) {
                break;
            }
        }
        var lengthToSource = this._cp(partSource, stnId).len;
        var lengthToSink = this._cp(stnId, partSink).len;
        if (leftOpenJaw) {
            var actualPartLength = this._cp(cp.nodes[0], partSink).len;
            return self._stnXShare(partSink) - lengthToSink / (lengthToSource + lengthToSink) * actualPartLength;
        }
        else if (rightOpenJaw) {
            var actualPartLength = this._cp(partSource, cp.nodes.slice(-1)[0]).len;
        }
        else {
            var actualPartLength = this._cp(partSource, partSink).len;
        }
        return self._stnXShare(partSource) + lengthToSource / (lengthToSource + lengthToSink) * actualPartLength;
    }
    /**
     * Horizontal position (in pixels) of station icon.
     */
    _stnRealX(stnId) {
        let [lineStart, lineEnd] = this.lineXs;
        return lineStart + this._stnXShare(stnId) / this.criticalPath.len * (lineEnd - lineStart);
    }
    /**
     * Mirror `_stnYShareMTR`.
     */
    _stnYShare(stnId) {
        return this._stnYShareMTR(stnId);
    }
    /**
     * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).
     */
    _stnYShareMTR(stnId) {
        if (['linestart', 'lineend'].includes(stnId) || this._stnIndegree(stnId) > 1 || this._stnOutdegree(stnId) > 1) {
            return 0;
        }
        var stnPred = this.stations[stnId].parents[0];
        let self = this;
        if (stnPred) {
            // parent exist
            if (this._stnOutdegree(stnPred) == 1) {
                // no sibling, then y same as parent
                return self._stnYShareMTR(stnPred);
            }
            else {
                // sibling exists, then y depends on its idx of being children
                return (this.stations[stnPred].children.indexOf(stnId) == 0) ? 1 : -1;
            }
        }
        else {
            // no parent, must be linestart
            return 0;
        }
    }
    /**
     * Vertical position (in pixels) of station icon related to vertical position of line.
     */
    _stnRealY(stnId) {
        return -this._stnYShare(stnId) * this._branchSpacing;
    }
    /**
     * Return true if station 2 is a successor of station 1, false otherwise.
     */
    _isSuccessor(stnId1, stnId2) {
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx1 < idx2) {
                return true;
            }
        }
        return false;
    }
    /**
     * Return true if station 2 is a predecessor of station 1, false otherwise.
     */
    _isPredecessor(stnId1, stnId2) {
        for (let route of this.routes) {
            let idx1 = route.indexOf(stnId1);
            let idx2 = route.indexOf(stnId2);
            if (idx1 !== -1 && idx2 !== -1 && idx2 < idx1) {
                return true;
            }
        }
        return false;
    }
    /**
     * Return state of a station (-1: passed, 0: current, 1: future).
     */
    _stnState(stnId) {
        if (stnId == this._currentStnId) {
            return 0;
        }
        if (this._direction == 'r') {
            return this._isSuccessor(this._currentStnId, stnId) ? 1 : -1;
        }
        else {
            return this._isPredecessor(this._currentStnId, stnId) ? 1 : -1;
        }
    }
    /**
     * Set height and width for both `svg`s.
     */
    drawSVGFrame() {
        $('#railmap, #outer').attr({
            width: this._svgWidth,
            height: this._svgHeight
        });
        $('#destination, #dest_outer').attr({
            width: this._svgDestWidth,
            height: this._svgHeight
        });
    }
    /**
     * Show border of both `svg`s, but the stroke colour of the borders are currently set as `none`.
     */
    showFrameOuter() {
        // var outerColour = this._showOuter ? 'black' : 'none';
        // $('#outer, #dest_outer').attr('stroke', outerColour);
        if (this._showOuter) {
            $('#outer, #dest_outer').show();
        }
        else {
            $('#outer, #dest_outer').hide();
        }
    }
    /**
     * Draw all stations. (Previously drawn station icons are not removed. )
     */
    drawStns() {
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            $('#stn_icons').append(stnInstance.html);
        }
        $('#stn_icons').html($('#stn_icons').html()); // Refresh DOM
    }
    get stnDX() { return this.turningRadius - this._branchSpacing / 2; }
    ;
    get stnDY() { return this._branchSpacing / 2; }
    ;
    get stnExtraH() {
        var [lineStart, lineEnd] = this.lineXs;
        return (lineEnd - lineStart) / this.criticalPath.len * this._longInterval;
    }
    get stnSpareH() {
        var [lineStart, lineEnd] = this.lineXs;
        var dh = ((lineEnd - lineStart) / this.criticalPath.len - 2 * this.stnDX) / 2;
        if (dh < 0) {
            console.warn(`SVG width too small! ${dh}`);
        }
        return dh;
    }
    get pathTurnENE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnNEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${-this.stnDY}`; }
    ;
    get pathTurnESE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,1 ${this.stnDX},${this.stnDY}`; }
    ;
    get pathTurnSEE() { return `a ${this.turningRadius},${this.turningRadius} 0 0,0 ${this.stnDX},${this.stnDY}`; }
    ;
    /**
     * Generate `d` attribute of `<path>` element through all stations input.
     */
    _linePath(stnIds) {
        var [prevId, prevY, prevX] = [];
        var path = [];
        var { stnExtraH, stnSpareH, pathTurnESE, pathTurnSEE, pathTurnENE, pathTurnNEE, stnDX } = this;
        stnIds.forEach(stnId => {
            var [x, y] = ['_stnRealX', '_stnRealY'].map(fun => this[fun](stnId));
            if (!prevY && prevY !== 0) {
                [prevId, prevX, prevY] = [stnId, x, y];
                path.push(`M ${x},${y}`);
                return;
            }
            if (y > prevY) {
                path.push(y === 0 ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnESE, pathTurnSEE);
            }
            else if (y < prevY) {
                path.push(y === 0 ? `h ${x - prevX - stnExtraH * this._leftWideFactor(stnId) - stnSpareH - stnDX * 2}` : `h ${stnExtraH * this._rightWideFactor(prevId) + stnSpareH}`);
                path.push(pathTurnENE, pathTurnNEE);
            }
            path.push(`H ${x}`);
            [prevId, prevX, prevY] = [stnId, x, y];
        });
        // simplify path
        return path.join(' ').replace(/( H ([\d.]+))+/g, ' H $2');
    }
    drawLine() {
        this.branches.map(branch => {
            var lineMainStns = branch.filter(stnId => this.stations[stnId].state >= 0);
            var linePassStns = branch.filter(stnId => this.stations[stnId].state <= 0);
            if (lineMainStns.length === 1) {
                linePassStns = branch;
            }
            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {
                // if two set disjoint
                if (linePassStns[0] === branch[0]) {
                    // -1 -1 1 1
                    linePassStns.push(lineMainStns[0]);
                }
                else if (lineMainStns[0] === branch[0] && lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] && linePassStns.length) {
                    linePassStns = branch;
                    lineMainStns = [];
                }
                else {
                    // 1 1 -1 -1
                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);
                }
            }
            $('#line_main').append($('<path>', { d: this._linePath(lineMainStns) }));
            $('#line_pass').append($('<path>', { d: this._linePath(linePassStns) }));
        });
        $('#line_main').html($('#line_main').html());
        $('#line_pass').html($('#line_pass').html());
    }
    drawStrip() {
        // $('#strip, #dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`)
        $('#strip').attr('d', `M 0,${this.stripY} H ${this._svgWidth}`);
        $('#dest_strip').attr('d', `M 0,${this.stripY} H ${this._svgDestWidth}`);
    }
    fillThemeColour() {
        $('#line_main, #strip, #dest_strip').attr('stroke', this._themeColour);
        $('#dest_name > #platform > circle').attr('fill', this._themeColour);
    }
    drawDestInfo() {
        //
    }
    updateStnName(stnId, names, stnNum) {
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].name = names;
        param.stn_list[stnId].num = stnNum;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId].name = names;
        // this.stations[stnId]._nameZH = nameZH;
        // this.stations[stnId]._nameEN = nameEN;
        this.stations[stnId].stnNum = stnNum;
        $(`#stn_icons #${stnId}`).remove();
        $('#stn_icons').append(this.stations[stnId].html);
        $('#stn_icons').html($('#stn_icons').html());
        if (this.leftDests.includes(stnId) && this._direction == 'l') {
            this.drawDestInfo();
        }
        else if (this.rightDests.includes(stnId) && this._direction == 'r') {
            this.drawDestInfo();
        }
    }
    updateStnServices(stnId, detail) {
        if (detail.selected) {
            if (this.stations[stnId].services.has(detail.chipId)) {
                return;
            }
            else {
                this.stations[stnId].services.add(detail.chipId);
            }
        }
        else {
            if (!this.stations[stnId].services.delete(detail.chipId)) {
                return;
            }
        }
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].services = Array.from(this.stations[stnId].services);
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        // redraw station on demand
    }
    updateStnTransfer(stnId, type, info = null) {
        var prevClass = this.stations[stnId].constructor.name;
        // V2.6 data structure
        let changeType = type.split('_')[0];
        let tick_direc = (type === 'none' || type === 'int2') ? 'r' : type.split('_')[1].split('').slice().reverse()[0];
        let paid_area = (type.indexOf('osi') !== -1) ? type.split('_')[1][0] === 'p' : true;
        let osi_names = (type.indexOf('osi') !== -1) ? [info[1][0]] : [];
        let transferInfo = info.length === 2 ? [info[0], info[1].slice(1)] : info;
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].change_type = type;
        if (type == 'none') {
            param.stn_list[stnId].interchange = [[]];
            param.stn_list[stnId].transfer = {
                type: changeType,
                tick_direc: tick_direc,
                paid_area: paid_area,
                osi_names: [],
                info: [[]]
            };
        }
        else {
            // param.stn_list[stnId].transfer = info;
            param.stn_list[stnId].interchange = info;
            param.stn_list[stnId].transfer = {
                type: changeType,
                tick_direc: tick_direc,
                paid_area: paid_area,
                osi_names: osi_names,
                info: transferInfo
            };
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[stnId] = this._initStnInstance(stnId, param.stn_list[stnId]);
        // if (prevClass != this.stations[stnId].constructor.name) {
        // Not sure position, redraw all
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            this._updateStnInstance(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        // } else {
        //     this.stations[stnId].x = this._stnRealX(stnId);
        //     this.stations[stnId].y = this._stnRealY(stnId);
        //     this.stations[stnId].namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
        //     this.stations[stnId].state = this._stnState(stnId);
        //     $(`#stn_icons #${stnId}`).remove();
        //     $('#stn_icons').append(this.stations[stnId].html);
        //     $('#stn_icons').html($('#stn_icons').html());
        // }
    }
    removeStn(stnId) {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        var parents = this.stations[stnId].parents;
        var children = this.stations[stnId].children;
        var isLastMainBranchStn = true;
        for (let id in this.stations) {
            if ([stnId, 'linestart', 'lineend'].includes(id)) {
                continue;
            }
            if (this._stnYShareMTR(id) == 0) {
                isLastMainBranchStn = false;
                break;
            }
        }
        if (parents.length == 2 && children.length == 2) {
            // To be rewritten, join two branches
            return false;
        }
        else if (isLastMainBranchStn) {
            // Last main line station
            return false;
        }
        else if (Object.keys(param.stn_list).length == 4) {
            // Last two stations
            return false;
        }
        else if (parents.length == 2 || children.length == 2) {
            parents.forEach(parId => {
                param.stn_list[parId].children = children;
                this.stations[parId].children = children;
            });
            children.forEach(childId => {
                param.stn_list[childId].parents = parents;
                this.stations[childId].parents = parents;
            });
            if (parents.length == 1) {
                param.stn_list[parents[0]].branch.right = this.stations[stnId].branch.right;
                this.stations[parents[0]].branch.right = this.stations[stnId].branch.right;
            }
            if (children.length == 1) {
                param.stn_list[children[0]].branch.left = this.stations[stnId].branch.left;
                this.stations[children[0]].branch.left = this.stations[stnId].branch.left;
            }
        }
        else if (this._stnOutdegree(parents[0]) == 2 && this._stnIndegree(children[0]) == 2) {
            // 1 par 1 child, last station on upper/lower branch
            // branch disappear
            var childIdxOfPar = this.stations[parents[0]].children.indexOf(stnId);
            var parIdxOfChild = this.stations[children[0]].parents.indexOf(stnId);
            param.stn_list[parents[0]].children.splice(childIdxOfPar, 1);
            this.stations[parents[0]].children.splice(childIdxOfPar, 1);
            param.stn_list[children[0]].parents.splice(parIdxOfChild, 1);
            this.stations[children[0]].parents.splice(parIdxOfChild, 1);
            param.stn_list[parents[0]].branch.right = [];
            this.stations[parents[0]].branch.right = [];
            param.stn_list[children[0]].branch.left = [];
            this.stations[children[0]].branch.left = [];
        }
        else {
            // 1 par 1 child
            parents.forEach(parId => {
                var idx = param.stn_list[parId].children.indexOf(stnId);
                if (children.length) {
                    param.stn_list[parId].children[idx] = children[0];
                    this.stations[parId].children[idx] = children[0];
                }
                else {
                    // Right dest
                    param.stn_list[parId].children.splice(idx, 1);
                    this.stations[parId].children.splice(idx, 1);
                }
                if (this.stations[parId].branch.right[1] === stnId) {
                    this.stations[parId].branch.right[1] = children[0];
                    param.stn_list[parId].branch.right[1] = children[0];
                }
            });
            children.forEach(childId => {
                var idx = param.stn_list[childId].parents.indexOf(stnId);
                if (parents.length) {
                    param.stn_list[childId].parents[idx] = parents[0];
                    this.stations[childId].parents[idx] = parents[0];
                }
                else {
                    // Left dest
                    param.stn_list[childId].parents.splice(idx, 1);
                    this.stations[childId].parents.splice(idx, 1);
                }
                if (this.stations[childId].branch.left[1] === stnId) {
                    this.stations[childId].branch.left[1] = parents[0];
                    param.stn_list[childId].branch.left[1] = parents[0];
                }
            });
        }
        delete param.stn_list[stnId];
        delete this.stations[stnId];
        var isCurrentStnChanged = false;
        if (this._currentStnId == stnId) {
            var newCurrentStnId = Object.keys(this.stations)[2];
            this._currentStnId = newCurrentStnId;
            param.current_stn_idx = newCurrentStnId;
            isCurrentStnChanged = true;
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        parents.concat(children).forEach(neId => {
            if (['linestart', 'lineend'].includes(neId)) {
                return;
            }
            this.stations[neId] = this._initStnInstance(neId, param.stn_list[neId]);
        });
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            this._updateStnInstance(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        return true;
    }
    newStnPossibleLoc(prep, stnId) {
        var deg = (prep == 'before') ? this._stnIndegree(stnId) : this._stnOutdegree(stnId);
        switch (deg) {
            case 2:
                // 1 -> 2
                return [1, 1, 1, [], []];
            case 1:
                if (this._stnYShareMTR(stnId) == 0) {
                    // 1 -> 1
                    let state = this.newBranchPossibleEnd(prep, stnId);
                    state = (state.length) ? state : [];
                    return [1, 0, 0, state, state];
                    // [1,0,0,1,1];
                }
                else if (this._stnYShareMTR(stnId) < 0) {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            0, 1, [], []
                        ];
                    }
                }
                else {
                    if (prep == 'before') {
                        return [this._stnOutdegree(this.stations[stnId].parents[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                    else {
                        return [this._stnIndegree(this.stations[stnId].children[0]) - 1,
                            1, 0, [], []
                        ];
                    }
                }
        }
        return [0, 0, 0, [], []];
    }
    newBranchPossibleEnd(prep, stnId) {
        let res = [];
        if (prep == 'before') {
            while (this._stnIndegree(stnId) == 1) {
                stnId = this.stations[stnId].parents[0];
                res.unshift(stnId);
            }
            res.pop();
        }
        else {
            while (this._stnOutdegree(stnId) == 1) {
                stnId = this.stations[stnId].children[0];
                res.push(stnId);
            }
            res.shift();
        }
        return res;
    }
    addStn(prep, stnId, loc, end) {
        let newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        while (Object.keys(this.stations).includes(newId)) {
            newId = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
        }
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        let newInfo = {};
        if (prep == 'before') {
            if (loc == 'centre') {
                newInfo.parents = this.stations[stnId].parents;
                if (this._stnIndegree(stnId) == 0 && this._stnYShareMTR(stnId) != 0) {
                    newInfo.children = this.leftDests;
                }
                else if (this._stnYShareMTR(stnId) != 0) {
                    // pivot on branch
                    newInfo.children = this.stations[this.stations[stnId].parents[0]].children;
                    newInfo.branch = {
                        left: [],
                        right: this.stations[newInfo.parents[0]].branch.right
                    };
                    this.stations[newInfo.parents[0]].branch.right = [];
                    param.stn_list[newInfo.parents[0]].branch.right = [];
                }
                else {
                    // pivot on main
                    newInfo.children = [stnId];
                    newInfo.branch = {
                        left: this.stations[stnId].branch.left,
                        right: []
                    };
                    this.stations[stnId].branch.left = [];
                    param.stn_list[stnId].branch.left = [];
                }
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[0]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(0, 1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[0] = newId;
                    param.stn_list[stnId].parents[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children[0] = newId;
                        param.stn_list[par].children[0] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnIndegree(stnId) == 2) {
                    if (this.stations[stnId].branch.left[1] == this.stations[stnId].parents[1]) {
                        this.stations[stnId].branch.left[1] = newId;
                        param.stn_list[stnId].branch.left[1] = newId;
                    }
                    newInfo.parents = this.stations[stnId].parents.slice(1);
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                    this.stations[stnId].parents[1] = newId;
                    param.stn_list[stnId].parents[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.parents = this.stations[stnId].parents;
                    newInfo.children = [stnId];
                    newInfo.parents.forEach(par => {
                        let parChildLen = this.stations[par].children.length;
                        this.stations[par].children[parChildLen - 1] = newId;
                        param.stn_list[par].children[parChildLen - 1] = newId;
                        if (this.stations[par].branch.right[1] === stnId) {
                            this.stations[par].branch.right[1] = newId;
                            param.stn_list[par].branch.right[1] = newId;
                        }
                    });
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left = ['through', newId];
                param.stn_list[stnId].branch.left = ['through', newId];
                this.stations[end].branch.right = ['through', newId];
                param.stn_list[end].branch.right = ['through', newId];
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.unshift(newId);
                param.stn_list[end].children.unshift(newId);
                this.stations[stnId].parents.unshift(newId);
                param.stn_list[stnId].parents.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.left = ['through', newId];
                param.stn_list[stnId].branch.left = ['through', newId];
                this.stations[end].branch.right = ['through', newId];
                param.stn_list[end].branch.right = ['through', newId];
                newInfo.parents = [end];
                newInfo.children = [stnId];
                this.stations[end].children.push(newId);
                param.stn_list[end].children.push(newId);
                this.stations[stnId].parents.push(newId);
                param.stn_list[stnId].parents.push(newId);
            }
        }
        else {
            if (loc == 'centre') {
                newInfo.children = this.stations[stnId].children;
                if (this._stnOutdegree(stnId) == 0 && this._stnYShareMTR(stnId) != 0) {
                    newInfo.parents = this.rightDests;
                }
                else if (this._stnYShareMTR(stnId) != 0) {
                    // pivot on branch
                    newInfo.parents = this.stations[this.stations[stnId].children[0]].parents;
                    newInfo.branch = {
                        left: this.stations[newInfo.children[0]].branch.left,
                        right: []
                    };
                    this.stations[newInfo.children[0]].branch.left = [];
                    param.stn_list[newInfo.children[0]].branch.left = [];
                }
                else {
                    // pivot on main
                    newInfo.parents = [stnId];
                    newInfo.branch = {
                        left: [],
                        right: this.stations[stnId].branch.right
                    };
                    this.stations[stnId].branch.right = [];
                    param.stn_list[stnId].branch.right = [];
                }
                newInfo.children.forEach(child => {
                    this.stations[child].parents = [newId];
                    param.stn_list[child].parents = [newId];
                });
                newInfo.parents.forEach(par => {
                    this.stations[par].children = [newId];
                    param.stn_list[par].children = [newId];
                });
            }
            else if (loc == 'upper') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[0]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(0, 1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[0] = newId;
                    param.stn_list[stnId].children[0] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents[0] = newId;
                        param.stn_list[child].parents[0] = newId;
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'lower') {
                newInfo.branch = { left: [], right: [] };
                if (this._stnOutdegree(stnId) == 2) {
                    if (this.stations[stnId].branch.right[1] == this.stations[stnId].children[1]) {
                        this.stations[stnId].branch.right[1] = newId;
                        param.stn_list[stnId].branch.right[1] = newId;
                    }
                    newInfo.children = this.stations[stnId].children.slice(1);
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        this.stations[child].parents = [newId];
                        param.stn_list[child].parents = [newId];
                    });
                    this.stations[stnId].children[1] = newId;
                    param.stn_list[stnId].children[1] = newId;
                }
                else {
                    // already on branch
                    newInfo.children = this.stations[stnId].children;
                    newInfo.parents = [stnId];
                    newInfo.children.forEach(child => {
                        if (this._stnIndegree(child) === 1) {
                            this.stations[child].parents[0] = newId;
                            param.stn_list[child].parents[0] = newId;
                        }
                        else {
                            this.stations[child].parents[1] = newId;
                            param.stn_list[child].parents[1] = newId;
                        }
                        if (this.stations[child].branch.left[1] === stnId) {
                            this.stations[child].branch.left[1] = newId;
                            param.stn_list[child].branch.left[1] = newId;
                        }
                    });
                    newInfo.parents.forEach(par => {
                        this.stations[par].children = [newId];
                        param.stn_list[par].children = [newId];
                    });
                }
            }
            else if (loc == 'newupper') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.unshift(newId);
                param.stn_list[end].parents.unshift(newId);
                this.stations[stnId].children.unshift(newId);
                param.stn_list[stnId].children.unshift(newId);
            }
            else if (loc == 'newlower') {
                newInfo.branch = { left: [], right: [] };
                this.stations[stnId].branch.right = ['through', newId];
                param.stn_list[stnId].branch.right = ['through', newId];
                this.stations[end].branch.left = ['through', newId];
                param.stn_list[end].branch.left = ['through', newId];
                newInfo.children = [end];
                newInfo.parents = [stnId];
                this.stations[end].parents.push(newId);
                param.stn_list[end].parents.push(newId);
                this.stations[stnId].children.push(newId);
                param.stn_list[stnId].children.push(newId);
            }
        }
        newInfo.name = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getNameFromId"])(newId);
        newInfo.change_type = 'none';
        newInfo.num = '00';
        newInfo.interchange = [[]];
        newInfo.services = ['local'];
        newInfo.transfer = {
            info: [[]],
            type: 'none',
            osi_names: [],
            paid_area: true,
            tick_direc: 'r'
        };
        param.stn_list[newId] = newInfo;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        this.stations[newId] = this._initStnInstance(newId, newInfo);
        this.stations[stnId] = this._initStnInstance(stnId, Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().stn_list[stnId]);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            this._updateStnInstance(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawStrip();
        this.drawDestInfo();
        return [newId, newInfo];
    }
    reverseStns() {
        var param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (stnId === 'linestart') {
                param.stn_list['lineend'].parents = stnInstance.children.reverse();
                param.stn_list['lineend'].branch = {
                    left: stnInstance.branch.right,
                    right: []
                };
            }
            else if (stnId === 'lineend') {
                param.stn_list['linestart'].children = stnInstance.parents.reverse();
                param.stn_list['linestart'].branch = {
                    left: [],
                    right: stnInstance.branch.left
                };
            }
            else {
                var tmpArr = stnInstance.children.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].children = stnInstance.parents.reverse().map(id => {
                    switch (id) {
                        case 'linestart': return 'lineend';
                        case 'lineend': return 'linestart';
                        default: return id;
                    }
                });
                param.stn_list[stnId].parents = tmpArr;
                param.stn_list[stnId].branch.left = stnInstance.branch.right;
                param.stn_list[stnId].branch.right = stnInstance.branch.left;
            }
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        location.reload(true);
    }
    updateBranchType(stnId, direction, type) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][0] === type) {
            return false;
        }
        this.stations[stnId].branch[direc][0] = type;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        param.stn_list[stnId].branch[direc][0] = type;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        return true;
    }
    updateBranchFirst(stnId, direction, first) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (this.stations[stnId].branch[direc][1] === first) {
            return false;
        }
        let branchEndId = first;
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            let branchFirstIdx = this.stations[stnId].children.indexOf(first);
            this.stations[stnId].branch.right[1] = param.stn_list[stnId].branch.right[1] = first;
            this.stations[branchEndId].branch.left[1] = param.stn_list[branchEndId].branch.left[1] = this.stations[branchEndId].parents[branchFirstIdx];
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            let branchFirstIdx = this.stations[stnId].parents.indexOf(first);
            this.stations[stnId].branch.left[1] = param.stn_list[stnId].branch.left[1] = first;
            this.stations[branchEndId].branch.right[1] = param.stn_list[branchEndId].branch.right[1] = this.stations[branchEndId].children[branchFirstIdx];
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
            stnInstance.state = this._stnState(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        return true;
    }
    updateBranchPos(stnId, direction, pos) {
        let direc = _utils__WEBPACK_IMPORTED_MODULE_0__["DirectionLong"][direction];
        // no change
        if (direc === 'right') {
            if (this.stations[stnId].children.indexOf(this.stations[stnId].branch.right[1]) === pos) {
                return false;
            }
        }
        else {
            if (this.stations[stnId].parents.indexOf(this.stations[stnId].branch.left[1]) === pos) {
                return false;
            }
        }
        let branchEndId = this.stations[stnId].branch[direc][1];
        let param = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])();
        if (direc === 'right') {
            while (this.stations[branchEndId].inDegree === 1) {
                branchEndId = this.stations[branchEndId].children[0];
            }
            this.stations[stnId].children.reverse();
            param.stn_list[stnId].children.reverse();
            this.stations[branchEndId].parents.reverse();
            param.stn_list[branchEndId].parents.reverse();
        }
        else {
            while (this.stations[branchEndId].outDegree === 1) {
                branchEndId = this.stations[branchEndId].parents[0];
            }
            this.stations[stnId].parents.reverse();
            param.stn_list[stnId].parents.reverse();
            this.stations[branchEndId].children.reverse();
            param.stn_list[branchEndId].children.reverse();
        }
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["putParams"])(param);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.x = this._stnRealX(stnId);
            stnInstance.y = this._stnRealY(stnId);
        }
        RMGLine.clearSVG();
        this.drawStns();
        this.drawLine();
        this.drawDestInfo();
        return true;
    }
    static clearSVG() {
        $('#stn_icons, #line_main, #line_pass').empty();
    }
    static initSVG(line) {
        line.drawSVGFrame();
        line.showFrameOuter();
        line.drawStns();
        line.fillThemeColour();
        line.drawLine();
        line.drawStrip();
        line.drawDestInfo();
    }
    /**
     * Getter of all branches (支線段) of the line. The first branch must be the main line.
     */
    get branches() {
        var stack = ['linestart'];
        var branches = [[]];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount][0] || null;
            var curBranch = [curId];
            if (prevId) {
                curBranch.unshift(prevId);
            }
            while (true) {
                if (curId == 'lineend') {
                    break;
                }
                if (curId != 'linestart' && prevId == this.stations[curId].branch.left[1]) {
                    // branch ends
                    break;
                }
                else {
                    prevId = curId;
                    var children = this.stations[prevId].children;
                    switch (children.length) {
                        case 1:
                            curId = children[0];
                            break;
                        case 2:
                            branches.push([prevId]);
                            if (prevId == 'linestart') {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            else {
                                var branchNextId = this.stations[prevId].branch.right[1];
                            }
                            // var branchNextId = getParams().stn_list[prevId].branch.right[1];
                            stack.push(branchNextId);
                            curId = children.filter(stnId => stnId != branchNextId)[0];
                            break;
                    }
                    curBranch.push(curId);
                }
            }
            branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches.map(branch => {
            return branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));
        });
    }
    /**
     * Getter of routes (行車交路) of the line. The first route must be the main line.
     */
    get routes() {
        var stack = ['linestart'];
        var branches = [['linestart']];
        var branchCount = 0;
        while (stack.length) {
            var curId = stack.shift();
            var prevId = branches[branchCount].slice().reverse()[0] || null;
            if (prevId && curId !== 'linestart') {
                branches[branchCount].push(curId);
            }
            else {
                branches[branchCount] = [curId];
            }
            while (curId !== 'lineend') {
                prevId = curId;
                var children = this.stations[prevId].children;
                switch (children.length) {
                    case 1:
                        curId = children[0];
                        break;
                    case 2:
                        var branchNextId = this.stations[prevId].branch.right[1];
                        // if (branchCount === 0) {
                        if (this.stations[prevId].branch.right[0] === 'through') {
                            branches.push(branches[branchCount].slice());
                            stack.push(branchNextId);
                        }
                        else {
                            if (branchCount === 0) {
                                branches.push([prevId]);
                                stack.push(branchNextId);
                            }
                            // branches.push([prevId]);
                        }
                        // stack.push(branchNextId);
                        // }
                        curId = children.filter(stnId => stnId != branchNextId)[0];
                        break;
                }
                branches[branchCount].push(curId);
                if (prevId === this.stations[curId].branch.left[1] && this.stations[curId].branch.left[0] === 'nonthrough') {
                    break;
                }
            }
            // branches[branchCount] = curBranch;
            branchCount++;
        }
        return branches;
    }
}


/***/ }),

/***/ "./src/Line/init.ts":
/*!**************************!*\
  !*** ./src/Line/init.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_1__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const getLineClass = (style) => __awaiter(void 0, void 0, void 0, function* () {
    switch (style) {
        case 'mtr':
            return __webpack_require__.e(/*! import() | LineHK */ "LineHK").then(__webpack_require__.bind(null, /*! ./LineHK */ "./src/Line/LineHK.ts"))
                .then(({ RMGLineHK }) => RMGLineHK);
        case 'gzmtr':
            return __webpack_require__.e(/*! import() | LineGZ */ "LineGZ").then(__webpack_require__.bind(null, /*! ./LineGZ */ "./src/Line/LineGZ.ts"))
                .then(({ RMGLineGZ }) => RMGLineGZ);
        case 'shmetro':
            return __webpack_require__.e(/*! import() | LineSH */ "LineSH").then(__webpack_require__.bind(null, /*! ./LineSH */ "./src/Line/LineSH.ts"))
                .then(({ RMGLineSH }) => RMGLineSH);
        // any other styles
    }
});
/* harmony default export */ __webpack_exports__["default"] = (function () {
    const loadLine = (param) => __awaiter(this, void 0, void 0, function* () {
        let lineClass = yield getLineClass(window.urlParams.get('style'));
        window.myLine = yield new lineClass(param);
        lineClass.initSVG(window.myLine);
    });
    if (localStorage.rmgParam != null) {
        try {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        }
        catch (err) {
            let initErrDiag = _material_dialog__WEBPACK_IMPORTED_MODULE_1__["MDCDialog"].attachTo($('#init_err_diag')[0]);
            $('#init_err_diag')
                .find('#err_stack')
                .html(err + '<br>' + err.stack.replace(/\n/g, '<br>'));
            initErrDiag.open();
            console.error(err);
        }
    }
    else {
        $.getJSON(`templates/blank.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["updateParam"])();
            loadLine(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])());
        });
    }
});


/***/ }),

/***/ "./src/PageInitialiser/init.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/init.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/tab-bar */ "@material/tab-bar");
/* harmony import */ var _material_tab_bar__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_material_tab_bar__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (function () {
    let firstInit = [false, true, true, true, true];
    window.sliders = [];
    _material_tab_bar__WEBPACK_IMPORTED_MODULE_0__["MDCTabBar"].attachTo($('#panels .mdc-tab-bar')[0]).listen('MDCTabBar:activated', (event) => {
        $('.panel--active').removeClass('panel--active');
        $('.panel').eq(event.detail.index).addClass('panel--active');
        if (event.detail.index == 1 && firstInit[1]) {
            __webpack_require__.e(/*! import() | initLayout */ "initLayout").then(__webpack_require__.bind(null, /*! ./layout */ "./src/PageInitialiser/layout.ts"))
                .then(module => {
                module.common();
                if (window.urlParams.get('style') === 'gzmtr') {
                    module.gzmtr();
                }
                firstInit[1] = false;
            });
        }
        if (event.detail.index === 1) {
            window.sliders.forEach(slider => slider.layout());
        }
        if (event.detail.index == 2 && firstInit[2]) {
            __webpack_require__.e(/*! import() | initDesign */ "initDesign").then(__webpack_require__.bind(null, /*! ./design */ "./src/PageInitialiser/design.ts"))
                .then(module => {
                module.common();
                switch (window.urlParams.get('style')) {
                    case 'mtr':
                        module.mtr();
                        break;
                    case 'gzmtr':
                        module.gzmtr();
                        break;
                }
                firstInit[2] = false;
            });
        }
        if (event.detail.index == 3 && firstInit[3]) {
            Promise.all(/*! import() | initStations */[__webpack_require__.e("vendors~initStations"), __webpack_require__.e("initStations")]).then(__webpack_require__.bind(null, /*! ./stations */ "./src/PageInitialiser/stations.ts"))
                .then(module => {
                module.common();
                firstInit[3] = false;
            });
        }
        if (event.detail.index == 4 && firstInit[4]) {
            __webpack_require__.e(/*! import() | initInfo */ "initInfo").then(__webpack_require__.bind(null, /*! ./info */ "./src/PageInitialiser/info.ts"))
                .then(module => {
                module.common();
                firstInit[4] = false;
            });
        }
    });
});


/***/ }),

/***/ "./src/PageInitialiser/save.ts":
/*!*************************************!*\
  !*** ./src/PageInitialiser/save.ts ***!
  \*************************************/
/*! exports provided: common */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "common", function() { return common; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Line_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Line/Line */ "./src/Line/Line.ts");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/dialog */ "@material/dialog");
/* harmony import */ var _material_dialog__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_dialog__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/list */ "@material/list");
/* harmony import */ var _material_list__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_list__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material/ripple */ "@material/ripple");
/* harmony import */ var _material_ripple__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_ripple__WEBPACK_IMPORTED_MODULE_4__);





function common() {
    // mdc intances 
    const [templateDialog, importDialog, exportDialog, previewDialog, styleDialog, langDialog] = ['#template_diag', '#import_diag', '#export_diag', '#preview_diag', '#style_diag', '#lang_diag']
        .map(selector => _material_dialog__WEBPACK_IMPORTED_MODULE_2__["MDCDialog"].attachTo($(selector)[0]));
    const [saveList0, saveList1] = $('#panel_save .mdc-list').map((_, el) => _material_list__WEBPACK_IMPORTED_MODULE_3__["MDCList"].attachTo(el)).get();
    $('#panel_save .mdc-list li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_4__["MDCRipple"](el));
    saveList0.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                templateDialog.open();
                break;
            case 1:
                $('#upload_file').click();
                break;
            case 2:
                // var link = document.createElement('a');
                // var data = new Blob([localStorage.rmgParam], {type: 'application/json;charset=utf-8'});
                // var url = window.URL.createObjectURL(data);
                // link.href = url;
                // link.download = 'rmg_config.json';
                // link.click();
                // URL.revokeObjectURL(url);
                // break;
                var link = $('<a>', {
                    href: 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(localStorage.rmgParam))),
                    download: 'rmg_param.json'
                });
                link[0].click();
                break;
            case 3:
                exportDialog.open();
                break;
        }
    });
    $('#panel_save .mdc-list:nth-child(2) li:first-child span:nth-child(2) span:last-child')
        .attr('trans-tag', $(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).attr('trans-tag'))
        .text($(`#style_diag [data-mdc-dialog-action="${window.urlParams.get('style')}"] span`).text());
    $('#panel_save .mdc-list:nth-child(2) li:nth-child(2) span:nth-child(2) span:last-child')
        .text($(`#lang_diag [data-mdc-dialog-action="${window.urlParams.get('lang')}"] span`).text());
    saveList1.listen('MDCList:action', (event) => {
        switch (event.detail.index) {
            case 0:
                styleDialog.open();
                break;
            case 1:
                langDialog.open();
                break;
        }
    });
    $.getJSON('templates/template_list.json', data => {
        var lang = window.urlParams.get('lang');
        data.forEach(d => {
            $('#template_diag ul').append($('<li>', {
                class: "mdc-list-item",
                'data-mdc-dialog-action': d.filename
            }).append($('<span>', { class: "mdc-list-item__text" }).text(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getTransText"])(d.desc, lang))));
        });
        $('#template_diag li:first-child').attr('tabindex', 0);
        $('#theme_line__selection li').map((_, el) => new _material_ripple__WEBPACK_IMPORTED_MODULE_4__["MDCRipple"](el));
    });
    templateDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        $.getJSON(`templates/${event.detail.action}.json`, data => {
            localStorage.rmgParam = JSON.stringify(data);
            location.reload(true);
        });
    });
    exportDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
                break;
            case 'svg1':
                $('#preview_diag').attr('for', 'destination');
                previewDialog.open();
                break;
            case 'svg2':
                $('#preview_diag').attr('for', 'railmap');
                previewDialog.open();
                break;
        }
    });
    $(window).on('resize', _ => {
        resizeSVGPreview();
        // $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width()-32}px;`);
    });
    const resizeSVGPreview = () => {
        var svgId = $('preview_diag').attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $('#preview_diag')
            .find('svg')
            .attr({
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        });
        $('#preview_diag')
            .find('.mdc-dialog__surface')
            .attr('style', `max-width:${MAX_WIDTH + 50}px;`);
    };
    previewDialog.listen('MDCDialog:opened', event => {
        var svgId = $(event.target).attr('for');
        var [thisSVGWidth, thisSVGHeight] = [
            svgId == 'destination' ? Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_dest_width : Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_width,
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getParams"])().svg_height
        ];
        $('#preview_diag .mdc-dialog__surface').attr('style', `max-width:${$(window).width() - 32}px;`);
        var MAX_WIDTH = $(window).width() - 32 - 50;
        var MAX_HEIGHT = $(window).height() - 60 - 53 - 60;
        var scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);
        $(event.target).find('.mdc-dialog__content')
            .append($('#' + $(event.target).attr('for')).clone().attr({
            style: 'all:initial;',
            viewBox: `0 0 ${thisSVGWidth} ${thisSVGHeight}`,
            width: thisSVGWidth * scaleFactor,
            height: thisSVGHeight * scaleFactor
        }));
        let cssTxt = ['share', $(event.target).find('svg')[0].id]
            .map(tag => {
            return Array.from($(`link#css_${tag}`)[0].sheet.cssRules).map(rule => rule.cssText).join(' ');
        });
        $(event.target).find('svg').prepend(...cssTxt.map(txt => $('<style>').text(txt)));
        $(event.target).find('svg [style="display: none;"]').remove();
    });
    previewDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action === 'close') {
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'png') {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["test"])($(event.target).removeAttr('for').find('svg'));
            $(event.target).find('.mdc-dialog__content').empty();
            return;
        }
        if (event.detail.action === 'svg') {
            // Prepend css stylesheet to svg
            let svgContent = $(event.target).find('.mdc-dialog__content svg');
            // let cssTxt = ['share', svgContent[0].id]
            //     .map(tag => {
            //         return Array.from(
            //             ((<HTMLLinkElement>$(`link#css_${tag}`)[0]).sheet as CSSStyleSheet).cssRules
            //         ).map(rule => rule.cssText).join(' ');
            //     });
            // svgContent.prepend(
            //     ...cssTxt.map(txt => $('<style>').text(txt))
            // );
            var link = document.createElement('a');
            link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgContent[0].outerHTML)));
            link.download = 'rmg_export.svg';
            link.click();
            $(event.target).removeAttr('for').find('.mdc-dialog__content').empty();
        }
    });
    let importedFile;
    $('#upload_file')
        .on('change', event => {
        console.log(event.target.files[0]);
        let reader = new FileReader();
        reader.onload = function (e) {
            console.log(e.target);
            importedFile = JSON.parse(e.target.result);
            $('#import_diag')
                .find('.mdc-dialog__content')
                .html(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["describeParams"])(importedFile));
            importDialog.open();
        };
        reader.readAsText(event.target.files[0]);
    });
    importDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            $('#upload_file')[0].value = '';
            return;
        }
        _Line_Line__WEBPACK_IMPORTED_MODULE_1__["RMGLine"].clearSVG();
        localStorage.rmgParam = JSON.stringify(importedFile);
        location.reload(true);
    });
    styleDialog.listen('MDCDialog:closed', (event) => {
        switch (event.detail.action) {
            case 'close':
            case window.urlParams.get('style'):
                return;
            default:
                window.urlParams.set('style', event.detail.action);
                window.location.href = '?' + window.urlParams.toString();
        }
    });
    langDialog.listen('MDCDialog:closed', (event) => {
        if (event.detail.action == 'close') {
            return;
        }
        var nextLang = event.detail.action;
        localStorage.rmgLang = nextLang;
        if (nextLang == window.urlParams.get('lang')) {
            return;
        }
        else {
            window.urlParams.set('lang', nextLang);
            window.location.href = '?' + window.urlParams.toString();
        }
    });
}


/***/ }),

/***/ "./src/Station/Station.ts":
/*!********************************!*\
  !*** ./src/Station/Station.ts ***!
  \********************************/
/*! exports provided: RMGStation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStation", function() { return RMGStation; });
class RMGStation {
    constructor(id, data) {
        this.STN_NAME_Y = -10.5;
        this.STN_NAME_BASE_HEIGHT = 30.390625;
        this.STN_NAME_LINE_GAP = 14;
        this.STN_NAME_BG_ADJUST = 0.5;
        this.id = id;
        this.parents = data.parents;
        this.children = data.children;
        this.name = data.name;
        this.branch = data.branch;
        this.services = new Set(data.services);
    }
    get inDegree() { return this.parents.length; }
    get outDegree() { return this.children.length; }
    get nameClass() {
        switch (this.state) {
            case -1:
                return 'Pass';
            case 0:
                return 'Current';
            default:
                return 'Future';
        }
    }
    get _nameTxtAnchor() { return 'middle'; }
    get _nameDX() { return 0; }
    get _nameDY() { return 0; }
    get nameHTML() {
        var nameENs = this.name[1].split('\\');
        if (this.namePos) {
            var dy = this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BG_ADJUST;
        }
        else {
            var dy = -this.STN_NAME_LINE_GAP - this.STN_NAME_Y - this.STN_NAME_BASE_HEIGHT - (nameENs.length - 1) * 10;
        }
        // dy -= this.STN_NAME_BG_ADJUST;
        if (this.state === 0) {
            $('#current_bg').attr({
                y: this.y + dy + this.STN_NAME_Y - 1.5 + this._nameDY,
                height: this.STN_NAME_BASE_HEIGHT + (nameENs.length - 1) * 10 + 2 + 1.5
            });
        }
        var nameENp = nameENs.shift();
        var nameENElem = $('<text>', {
            dy: 15, class: 'rmg-name__en rmg-name__mtr--station'
        }).text(nameENp);
        while (nameENp = nameENs.shift()) {
            nameENElem.append($('<tspan>', { x: 0, dy: 10, 'alignment-baseline': 'middle' }).text(nameENp));
        }
        return $('<g>', {
            transform: `translate(${this.x + this._nameDX},${this.y + dy + this._nameDY})`,
            'text-anchor': this._nameTxtAnchor,
            'class': `Name ${this.nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--station').text(this.name[0])).append(nameENElem);
    }
    get iconClass() { return this.state == -1 ? 'rmg-stn__mtr--pass' : 'rmg-stn__mtr--future'; }
    get iconHTML() {
        return $('<use>', {
            'xlink:href': '#stn_hk',
            x: this.x, y: this.y,
            class: this.iconClass
        });
    }
    get ungrpHTML() {
        return [this.iconHTML, this.nameHTML];
    }
    get html() {
        return $('<g>', { id: this.id }).append(...this.ungrpHTML);
    }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PageInitialiser/save */ "./src/PageInitialiser/save.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Line_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line/init */ "./src/Line/init.ts");
/* harmony import */ var _PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PageInitialiser/init */ "./src/PageInitialiser/init.ts");




var requestLang = window.urlParams.get('lang') || localStorage.rmgLang || navigator.language.split('-').slice(0, 2).join('-');
switch (requestLang.toLowerCase()) {
    case 'zh-cn':
    case 'zh-hans':
        window.urlParams.set('lang', 'zh-Hans');
        break;
    case 'zh':
    case 'zh-hk':
    case 'zh-tw':
        window.urlParams.set('lang', 'zh-HK');
        break;
    default: window.urlParams.set('lang', 'en');
}
switch (window.urlParams.get('style')) {
    case 'mtr':
    case 'gzmtr':
    case 'shmetro':
        break;
    default: window.urlParams.set('style', 'mtr');
}
history.pushState({ url: window.location.href }, null, '?' + window.urlParams.toString());
// load stylesheets on demand
jquery__WEBPACK_IMPORTED_MODULE_1__('head').append(...['share', 'destination', 'railmap']
    .map(tag => {
    return jquery__WEBPACK_IMPORTED_MODULE_1__('<link>', {
        rel: 'stylesheet',
        href: `styles/${tag}_${window.urlParams.get('style')}.css`,
        id: `css_${tag}`
    });
}));
window.myLine = null;
jquery__WEBPACK_IMPORTED_MODULE_1__(`[${window.urlParams.get('style')}-specific]`).show();
// autoInit();
_PageInitialiser_save__WEBPACK_IMPORTED_MODULE_0__["common"]();
Object(_Line_init__WEBPACK_IMPORTED_MODULE_2__["default"])();
Object(_PageInitialiser_init__WEBPACK_IMPORTED_MODULE_3__["default"])();


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/*! exports provided: DirectionLong, NeighbourPl, IntInfoTag, putParams, getParams, setParams, test, getTxtBoxDim, joinIntName, getRandomId, getNameFromId, describeParams, countryCode2Emoji, rgb2Hex, updateParam, getTransText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionLong", function() { return DirectionLong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeighbourPl", function() { return NeighbourPl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntInfoTag", function() { return IntInfoTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "putParams", function() { return putParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return getParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setParams", function() { return setParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "test", function() { return test; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTxtBoxDim", function() { return getTxtBoxDim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinIntName", function() { return joinIntName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomId", function() { return getRandomId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNameFromId", function() { return getNameFromId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeParams", function() { return describeParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countryCode2Emoji", function() { return countryCode2Emoji; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2Hex", function() { return rgb2Hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateParam", function() { return updateParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransText", function() { return getTransText; });
var DirectionLong;
(function (DirectionLong) {
    DirectionLong[DirectionLong["left"] = 0] = "left";
    DirectionLong[DirectionLong["right"] = 1] = "right";
})(DirectionLong || (DirectionLong = {}));
;
var NeighbourPl;
(function (NeighbourPl) {
    NeighbourPl[NeighbourPl["parents"] = 0] = "parents";
    NeighbourPl[NeighbourPl["children"] = 1] = "children";
})(NeighbourPl || (NeighbourPl = {}));
;
var IntInfoTag;
(function (IntInfoTag) {
    IntInfoTag[IntInfoTag["city"] = 0] = "city";
    IntInfoTag[IntInfoTag["line"] = 1] = "line";
    IntInfoTag[IntInfoTag["colour"] = 2] = "colour";
    IntInfoTag[IntInfoTag["fg"] = 3] = "fg";
    IntInfoTag[IntInfoTag["nameZH"] = 4] = "nameZH";
    IntInfoTag[IntInfoTag["nameEN"] = 5] = "nameEN";
})(IntInfoTag || (IntInfoTag = {}));
;
function putParams(instance) {
    localStorage.setItem('rmgParam', JSON.stringify(instance));
}
function getParams() {
    return JSON.parse(localStorage.rmgParam);
}
function setParams(key, data) {
    let param = getParams();
    param[key] = data;
    putParams(param);
}
function test(svgEl) {
    var [svgW, svgH] = svgEl.attr('viewBox').split(' ').slice(2);
    var canvas = $('canvas')[0];
    $('canvas').attr({
        width: svgW * 2.5, height: svgH * 2.5
    });
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // bypass Chrome min font size (to be improved)
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--station, .rmg-name__en.rmg-name__mtr--station, .rmg-name__zh.IntName').each((_, el) => {
        $(el).attr('font-size', '10px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int').each((_, el) => {
        $(el).attr('font-size', '8px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--int-small, .rmg-name__en.IntName').each((_, el) => {
        $(el).attr('font-size', '7px');
    });
    svgEl.find('.rmg-name__en.rmg-name__gzmtr--express').each((_, el) => {
        $(el).attr('font-size', '6.5px');
    });
    svgEl.find('text:not([font-size]), tspan:not([font-size])').each((_, el) => {
        $(el).attr('font-size', window.getComputedStyle(el).fontSize);
    });
    svgEl.find('text, tspan').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'font-family': elStyle.getPropertyValue('font-family'),
            'fill': elStyle.getPropertyValue('fill'),
            'alignment-baseline': elStyle.getPropertyValue('alignment-baseline'),
            'dominant-baseline': elStyle.getPropertyValue('dominant-baseline'),
            'text-anchor': elStyle.getPropertyValue('text-anchor')
        }).removeAttr('class');
    });
    svgEl.find('#strip, #dest_strip').each((_, el) => {
        var elStyle = window.getComputedStyle(el);
        $(el).attr({
            'stroke-width': elStyle.getPropertyValue('stroke-width')
        });
    });
    var img = new Image();
    img.onload = function () {
        ctx.drawImage(img, 0, 0, svgW * 2.5, svgH * 2.5);
        saveAs($('canvas')[0].toDataURL('image/png'), 'rmg_export');
    };
    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl[0].outerHTML)));
}
function saveAs(uri, filename) {
    var link = document.createElement('a');
    if (typeof link.download === 'string') {
        link.href = uri;
        link.download = filename;
        //Firefox requires the link to be in the body
        document.body.appendChild(link);
        //simulate click
        link.click();
        //remove the link when done
        document.body.removeChild(link);
    }
    else {
        window.open(uri);
    }
}
function getTxtBoxDim(elem, svg) {
    let svgNode = $('#' + svg)[0];
    let bcr = elem.getBoundingClientRect();
    let pt = svgNode.createSVGPoint();
    let ctm = svgNode.getScreenCTM();
    pt.x = bcr.left;
    pt.y = bcr.top;
    let pos = pt.matrixTransform(ctm.inverse());
    return { x: pos.x, y: pos.y, width: bcr.width, height: bcr.height };
}
function joinIntName(names, dy1, dy2) {
    var [nameZH, nameEN] = names.map(txt => txt.split(/\\/g));
    var res = $('<text>').addClass('rmg-name__zh IntName').text(nameZH[0]);
    for (let i = 1; i < nameZH.length; i++) {
        res = res.append($('<tspan>', { 'x': 0, 'dy': dy1, 'dominant-baseline': 'central' }).text(nameZH[i]));
    }
    var btwGap = (nameZH.length == 1) ? 9 : 9;
    res = res.append($('<tspan>', {
        'x': 0, 'dy': btwGap, 'class': 'rmg-name__en IntName'
    }).text(nameEN[0]));
    for (let i = 1; i < nameEN.length; i++) {
        res = res.append($('<tspan>', {
            'x': 0, 'dy': dy2, 'class': 'rmg-name__en IntName'
        }).text(nameEN[i]));
    }
    return [res, nameZH.length, nameEN.length];
}
function getRandomId() {
    return Math.floor(Math.random() * Math.pow(36, 4)).toString(36).padStart(4, '0');
}
function getNameFromId(stnId) {
    let numsZH = [
        '癸', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬',
        '日', '月', '金', '木', '水', '火', '土',
        '竹', '戈', '十', '大', '中', '一', '弓',
        '人', '心', '手', '口',
        '尸', '廿', '山', '女', '田', '難', '卜', '重'
    ];
    let numsEN = [
        'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
        'Alfa', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf',
        'Hotel', 'India', 'Juliett', 'Kilo', 'Lima', 'Mike', 'November',
        'Oscar', 'Papa', 'Quebec', 'Romeo',
        'Sierra', 'Tango', 'Uniform', 'Victor', 'Whiskey', 'X-ray', 'Yankee', 'Zulu'
    ];
    return [
        stnId.split('').map(char => numsZH[parseInt(char, 36)]).join(''),
        stnId.split('').map(char => numsEN[parseInt(char, 36)]).join(' ')
    ];
}
function describeParams(param) {
    return `Number of stations: ${Object.keys(param.stn_list).length - 2}
            ${Object.entries(param.stn_list).map(x => ['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')).join('<br>').trim().replace(/\\/, ' ')}`;
}
function countryCode2Emoji(code) {
    var chars = code.toUpperCase().split('');
    if (code.length == 2) {
        return chars.map(char => String.fromCodePoint((char.codePointAt(0) + 127397))).join('');
    }
    else {
        return '\u{1f3f4}' + chars.map(char => String.fromCodePoint((char.codePointAt(0) + 917536))).join('') + '\u{e007f}';
    }
}
function rgb2Hex(rgb) {
    let hex = rgb.match(/[\d]+/g)
        .map(dec => Number(dec).toString(16).padStart(2, '0'))
        .join('');
    switch (hex) {
        case '000000': return '#000';
        case 'ffffff': return '#fff';
        default: return '#' + hex;
    }
}
function updateParam() {
    var param = getParams();
    // Version 0.10
    if (!('line_name' in param)) {
        param.line_name = ['路線名', 'Name of Line'];
    }
    if (!('dest_legacy' in param)) {
        param.dest_legacy = false;
    }
    // Version 0.11
    if (!('char_form' in param)) {
        param.char_form = (region => {
            switch (region) {
                case 'KR': return 'trad';
                case 'TC': return 'tw';
                case 'SC': return 'cn';
                case 'JP': return 'jp';
            }
        })(param.fontZH[0].split(' ').reverse()[0]);
    }
    delete param.fontZH;
    delete param.fontEN;
    delete param.weightZH;
    delete param.weightEN;
    // Version 0.12
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        // if (['linestart', 'lineend'].includes(stnId)) {continue;}
        // if ('transfer' in stnInfo) {
        //     delete param.stn_list[stnId].interchange;
        //     switch (stnInfo.change_type) {
        //         case 'int2':
        //             param.stn_list[stnId].interchange = [[stnInfo.transfer[1]]];
        //             break;
        //         case 'int3_l':
        //         case 'int3_r':
        //             param.stn_list[stnId].interchange = [stnInfo.transfer.slice(1,3)];
        //             break;
        //         case 'osi11_pl':
        //         case 'osi11_pr':
        //         case 'osi11_ul':
        //         case 'osi11_ur':
        //             param.stn_list[stnId].interchange = [[], stnInfo.transfer.slice(0,2)];
        //             break;
        //         case 'osi12_pl':
        //         case 'osi12_pr':
        //         case 'osi12_ul':
        //         case 'osi12_ur':
        //             param.stn_list[stnId].interchange = [[], stnInfo.transfer];
        //             break;
        //     }
        // }
        // delete param.stn_list[stnId].transfer;
        if (!('branch' in stnInfo)) {
            param.stn_list[stnId].branch = { left: [], right: [] };
            if (stnInfo.children.length == 2) {
                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];
            }
            else {
                param.stn_list[stnId].branch.right = [];
            }
            if (stnInfo.parents.length == 2) {
                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];
            }
            else {
                param.stn_list[stnId].branch.left = [];
            }
        }
    }
    // Version 1.2
    if (!('psd_num' in param)) {
        param.psd_num = 1;
    }
    if (!('line_num' in param)) {
        param.line_num = 1;
    }
    delete param.style;
    if (param.theme.length == 3) {
        param.theme.push('#fff');
    }
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (['linestart', 'lineend'].includes(stnId)) {
            continue;
        }
        if (!('num' in stnInfo)) {
            param.stn_list[stnId].num = '00';
        }
    }
    // Version 1.3
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if ('interchange' in stnInfo) {
            stnInfo.interchange.map(arr => {
                arr.map(intInfo => {
                    if (intInfo.length == 5) {
                        intInfo.splice(3, 0, '#fff');
                    }
                });
            });
        }
    }
    // Version 1.4
    if (!('info_panel_type' in param)) {
        param.info_panel_type = 'panasonic';
    }
    // Version 1.5
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (stnInfo.change_type === 'osi22_end_p') {
            param.stn_list[stnId].change_type = 'osi22_pr';
        }
        if (stnInfo.change_type === 'osi22_end_u') {
            param.stn_list[stnId].change_type = 'osi22_ur';
        }
    }
    // Version 2.1
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('interchange' in stnInfo)) {
            param.stn_list[stnId].interchange = [[]];
        }
    }
    // Version 2.2
    if (param.info_panel_type === 'gz_1') {
        param.info_panel_type = 'gz28';
    }
    // Version 2.3
    if (param.info_panel_type === 'panasonic') {
        param.info_panel_type = 'gz28';
    }
    if (param.info_panel_type === 'gz_2') {
        param.info_panel_type = 'gzgf';
    }
    if (param.info_panel_type === 'gz_3') {
        param.info_panel_type = 'gz3';
    }
    if (!('direction_gz_x' in param)) {
        param.direction_gz_x = 50;
    }
    if (!('direction_gz_y' in param)) {
        param.direction_gz_y = 70;
    }
    // Version 2.6
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('transfer' in stnInfo)) {
            param.stn_list[stnId].transfer = {
                type: stnInfo.change_type.split('_')[0],
                tick_direc: (stnInfo.change_type === 'none' || stnInfo.change_type === 'int2') ? 'r' : stnInfo.change_type.split('_')[1].split('').slice().reverse()[0],
                paid_area: (stnInfo.change_type.indexOf('osi') !== -1) ? stnInfo.change_type.split('_')[1][0] === 'p' : true,
                osi_names: (stnInfo.change_type.indexOf('osi') !== -1) ? [stnInfo.interchange[1][0]] : [],
                info: (stnInfo.interchange.length === 2) ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)] : stnInfo.interchange
            };
        }
    }
    // Version 2.8
    for (let [stnId, stnInfo] of Object.entries(param.stn_list)) {
        if (!('services' in stnInfo)) {
            param.stn_list[stnId].services = ['local'];
        }
    }
    putParams(param);
}
const langFallback = (lang) => {
    switch (lang) {
        case 'en': return ['en'];
        case 'zh-Hans': return ['zh-Hans', 'zh', 'en'];
        case 'zh-HK': return ['zh-HK', 'zh-Hant', 'zh', 'en'];
        default: return [lang, 'en'];
    }
};
const getTransText = (obj, lang) => {
    return obj[langFallback(lang).find(l => obj[l])];
};


/***/ }),

/***/ "@material/dialog":
/*!*****************************!*\
  !*** external "mdc.dialog" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.dialog;

/***/ }),

/***/ "@material/list":
/*!***************************!*\
  !*** external "mdc.list" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.list;

/***/ }),

/***/ "@material/ripple":
/*!*****************************!*\
  !*** external "mdc.ripple" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.ripple;

/***/ }),

/***/ "@material/select":
/*!*****************************!*\
  !*** external "mdc.select" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.select;

/***/ }),

/***/ "@material/slider":
/*!*****************************!*\
  !*** external "mdc.slider" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.slider;

/***/ }),

/***/ "@material/switch":
/*!************************************!*\
  !*** external "mdc.switchControl" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.switchControl;

/***/ }),

/***/ "@material/tab-bar":
/*!*****************************!*\
  !*** external "mdc.tabBar" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.tabBar;

/***/ }),

/***/ "@material/textfield":
/*!********************************!*\
  !*** external "mdc.textField" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = mdc.textField;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,