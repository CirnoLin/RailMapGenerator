(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["LineHK"],{

/***/ "./src/Line/LineHK.ts":
/*!****************************!*\
  !*** ./src/Line/LineHK.ts ***!
  \****************************/
/*! exports provided: RMGLineHK */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGLineHK", function() { return RMGLineHK; });
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Line */ "./src/Line/Line.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Station/StationHK */ "./src/Station/StationHK.ts");



class RMGLineHK extends _Line__WEBPACK_IMPORTED_MODULE_0__["RMGLine"] {
    constructor(param) {
        super(param);
        this._txtFlip = param.txt_flip;
        this._charForm = param.char_form;
        this._destLegacy = param.dest_legacy;
    }
    _initStnInstance(stnId, stnInfo) {
        switch (stnInfo.transfer.type) {
            case 'int2':
            case 'osi21':
                return new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["Int2StationHK"](stnId, stnInfo);
            case 'int3':
            case 'osi31':
                return stnInfo.transfer.tick_direc === 'l' ?
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["Int3LStationHK"](stnId, stnInfo) :
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["Int3RStationHK"](stnId, stnInfo);
            case 'osi11':
                return stnInfo.transfer.tick_direc === 'l' ?
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI11LStationHK"](stnId, stnInfo) :
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI11RStationHK"](stnId, stnInfo);
            case 'osi12':
            case 'osi13':
                return stnInfo.transfer.tick_direc === 'l' ?
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI12LStationHK"](stnId, stnInfo) :
                    new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI12RStationHK"](stnId, stnInfo);
            case 'osi22':
                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {
                    return new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI22EndStationHK"](stnId, stnInfo);
                }
                else {
                    return stnInfo.transfer.tick_direc === 'l' ?
                        new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI22LStationHK"](stnId, stnInfo) :
                        new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI22RStationHK"](stnId, stnInfo);
                }
            default:
                return new _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["RMGStationHK"](stnId, stnInfo);
        }
    }
    _updateStnInstance(stnId) {
        super._updateStnInstance(stnId);
        this.stations[stnId].namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
    }
    set svgDestWidth(val) {
        super.svgDestWidth = val;
        this.loadFonts();
    }
    set svgWidth(val) {
        super.svgWidth = val;
        this.loadFonts();
        this.updateStnNameBg();
    }
    set padding(val) {
        super.padding = val;
        this.loadFonts();
        this.updateStnNameBg();
    }
    set branchSpacing(val) {
        super.branchSpacing = val;
        this.loadFonts();
        this.updateStnNameBg();
    }
    set txtFlip(flag) {
        this._txtFlip = flag;
        Object(_utils__WEBPACK_IMPORTED_MODULE_1__["setParams"])('txt_flip', flag);
        for (let [stnId, stnInstance] of Object.entries(this.stations)) {
            if (['linestart', 'lineend'].includes(stnId)) {
                continue;
            }
            stnInstance.namePos = this._txtFlip ? !this._stnNamePos(stnId) : this._stnNamePos(stnId);
        }
        $('#stn_icons').empty();
        this.drawStns();
        this.loadFonts();
        this.updateStnNameBg();
    }
    set direction(val) {
        super.direction = val;
        this.loadFonts();
    }
    /**
     * Setter of character form.
     * @param val 'trad', 'cn', 'tw' or 'jp'
     */
    set charForm(val) {
        this._charForm = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_1__["setParams"])('char_form', val);
        $('.rmg-name__char-trad, .rmg-name__char-cn, .rmg-name__char-tw, .rmg-name__char-jp')
            .removeClass('rmg-name__char-trad rmg-name__char-cn rmg-name__char-tw rmg-name__char-jp')
            .addClass(`rmg-name__char-${val}`);
    }
    set lineNames(val) {
        super.lineNames = val;
        if (this._destLegacy) {
            this.drawDestInfo();
            this.loadFonts();
        }
    }
    /**
     * Setter of legacy style of destination information panel.
     */
    set destLegacy(val) {
        this._destLegacy = val;
        Object(_utils__WEBPACK_IMPORTED_MODULE_1__["setParams"])('dest_legacy', val);
        this.drawDestInfo();
        this.loadFonts();
    }
    set currentStnId(val) {
        super.currentStnId = val;
        this.loadFonts();
        this.updateStnNameBg();
    }
    /**
     * Station name position (`false`: above line, `true`: below line, given `txtFlip` is `false`).
     */
    _stnNamePos(stnId) {
        if (stnId === 'linestart') {
            return true;
        }
        let self = this;
        let cp = this.criticalPath.nodes;
        let pos = cp.indexOf(stnId) % 2; // -1, 0 or 1;
        if (pos === -1) {
            let parId = this.stations[stnId].parents[0];
            if (this._stnOutdegree(parId) === 2) {
                return self._stnNamePos(parId);
            }
            return !self._stnNamePos(parId);
        }
        return pos === 1;
    }
    loadFonts() {
        $('.rmg-name__zh').addClass(`rmg-name__char-${this._charForm}`);
    }
    /**
     * Update background of current station name. `y` and `height` are changed while station icon is re-drawn and `RMGStation.nameHTML` is loaded.
     */
    updateStnNameBg() {
        var stnNameDim = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getTxtBoxDim"])($(`#stn_icons > #${this._currentStnId} g.Name`)[0], 'railmap');
        $('#current_bg').attr({
            x: stnNameDim.x - 3,
            width: stnNameDim.width + 6,
        });
    }
    drawDestInfo() {
        $('#dest_name > #platform > text').text(this._platformNum);
        let validDest = this[this._direction + 'ValidDests'];
        let txtAnchor = this._direction === 'l' ? 'start' : 'end';
        var [destNameZH, destNameEN] = [0, 1].map(idx => {
            return validDest.map(stnId => this.stations[stnId].name[idx].replace(/\\/g, ' ')).join('/');
        });
        if (this._destLegacy) {
            var [lineNameZH, lineNameEN] = this._lineNames;
            lineNameEN += ' ';
        }
        else {
            var lineNameZH = lineNameEN = '';
        }
        $('#dest_name > g:last-child text').eq(0).text(`${lineNameZH}å¾€${destNameZH}`);
        $('#dest_name > g:last-child text').eq(1).text(`${lineNameEN}to ${destNameEN}`);
        var bcr = $('#dest_name > g:last-child')[0].getBoundingClientRect();
        var flagLength = 160 + 150 + bcr.width + 45 + 50;
        var isLeft = (this._direction == 'l') ? 1 : -1;
        var arrowX = (this._svgDestWidth - isLeft * flagLength) / 2;
        var arrowRotate = 90 * (1 - isLeft);
        var platformNumX = arrowX + isLeft * (160 + 50 + 75);
        var destNameX = platformNumX + isLeft * (75 + 45);
        $('#dest_name > use').attr('transform', `translate(${arrowX},130)rotate(${arrowRotate})`);
        $('#dest_name > #platform').attr('transform', `translate(${platformNumX},130)`);
        $('#dest_name > g:last-child').attr({
            transform: `translate(${destNameX},105)`,
            'text-anchor': txtAnchor
        });
    }
    _leftWideFactor(stnId) {
        var res = 0;
        let stnInstance = this.stations[stnId];
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["Int3LStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI11LStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI12LStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI22StationHK"]) {
            res += this._longInterval;
        }
        if (this._stnIndegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnOutdegree(this.stations[stnId].parents[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    _rightWideFactor(stnId) {
        var res = 0;
        let stnInstance = this.stations[stnId];
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["Int3RStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI11RStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI12RStationHK"]) {
            res += this._longInterval;
        }
        if (stnInstance instanceof _Station_StationHK__WEBPACK_IMPORTED_MODULE_2__["OSI22StationHK"]) {
            res += this._longInterval;
        }
        if (this._stnOutdegree(stnId) == 2) {
            res += this._longInterval / 2;
        }
        if (this._stnIndegree(this.stations[stnId].children[0]) == 2) {
            res += this._longInterval / 2;
        }
        return res;
    }
    updateStnName(stnId, names, stnNum) {
        super.updateStnName(stnId, names, stnNum);
        this.loadFonts();
        if (stnId == this._currentStnId) {
            this.updateStnNameBg();
        }
    }
    updateStnTransfer(stnId, type, info = null) {
        super.updateStnTransfer(stnId, type, info);
        this.loadFonts();
        this.updateStnNameBg();
    }
    addStn(prep, stnId, loc, end) {
        let res = super.addStn(prep, stnId, loc, end);
        this.loadFonts();
        this.updateStnNameBg();
        return res;
    }
    removeStn(stnId) {
        if (!super.removeStn(stnId)) {
            return false;
        }
        this.loadFonts();
        this.updateStnNameBg();
        return true;
    }
    updateBranchType(stnId, direction, type) {
        if (!super.updateBranchType(stnId, direction, type)) {
            return false;
        }
        this.loadFonts();
        return true;
    }
    updateBranchFirst(stnId, direction, first) {
        if (!super.updateBranchFirst(stnId, direction, first)) {
            return false;
        }
        this.loadFonts();
        return true;
    }
    updateBranchPos(stnId, direction, pos) {
        if (!super.updateBranchPos(stnId, direction, pos)) {
            return false;
        }
        this.loadFonts();
        return true;
    }
    static initSVG(line) {
        super.initSVG(line);
        line.loadFonts();
        line.updateStnNameBg();
    }
}


/***/ }),

/***/ "./src/Station/StationHK.ts":
/*!**********************************!*\
  !*** ./src/Station/StationHK.ts ***!
  \**********************************/
/*! exports provided: RMGStationHK, Int2StationHK, Int3LStationHK, Int3RStationHK, OSI11LStationHK, OSI11RStationHK, OSI12LStationHK, OSI12RStationHK, OSI22StationHK, OSI22LStationHK, OSI22RStationHK, OSI22EndStationHK */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMGStationHK", function() { return RMGStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int2StationHK", function() { return Int2StationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3LStationHK", function() { return Int3LStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int3RStationHK", function() { return Int3RStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11LStationHK", function() { return OSI11LStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI11RStationHK", function() { return OSI11RStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12LStationHK", function() { return OSI12LStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI12RStationHK", function() { return OSI12RStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22StationHK", function() { return OSI22StationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22LStationHK", function() { return OSI22LStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22RStationHK", function() { return OSI22RStationHK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OSI22EndStationHK", function() { return OSI22EndStationHK; });
/* harmony import */ var _Station__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Station */ "./src/Station/Station.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");


class RMGStationHK extends _Station__WEBPACK_IMPORTED_MODULE_0__["RMGStation"] {
    constructor(id, data) {
        super(id, data);
    }
}
class Int2StationHK extends RMGStationHK {
    constructor(id, data) {
        super(id, data);
        this._intInfo = data.transfer.info[0][0];
        // this._intInfo = data.interchange[0][0];
    }
    get _dy() { return 0; }
    get intTickHTML() {
        var tickRotation = (this.namePos) ? 180 : 0;
        var tickColour = this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y + this._dy})rotate(${tickRotation})`,
            class: 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get _nameClass() {
        return (this.state == -1) ? 'Pass' : 'Future';
    }
    get intNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["joinIntName"])([this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH], this._intInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameEN]], 10, 7);
        var dy = (!this.namePos) ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML];
    }
}
class Int3StationHK extends RMGStationHK {
    constructor(id, data) {
        super(id, data);
        this._intInfos = data.transfer.info[0];
    }
    get iconHTML() {
        let iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#int3_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: this.iconClass
        });
    }
    get _tickRotation() { return 0; }
    get _dy() { return 0; }
    get _dx() { return 0; }
    get _tickFlip() { return 1; }
    get intTickHTML() {
        let elems = [];
        this._intInfos
            .map(info => info[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour])
            .forEach((c, i) => {
            if (i >= 2) {
                return;
            }
            let tickColour = (this.state === -1) ? '#aaa' : c;
            let dy = (!this.namePos) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            elems.push($('<use>', {
                'xlink:href': '#inttick_hk',
                stroke: tickColour,
                transform: `translate(${this.x + this._dx},${this.y + dy})rotate(${this._tickRotation})`,
                class: 'rmg-line rmg-line__mtr rmg-line__change'
            }));
        });
        return elems;
    }
    get _txtAnchor() { return 'middle'; }
    get _intNameDX() { return 0; }
    get _nameClass() { return (this.state == -1) ? 'Pass' : 'Future'; }
    get intNameHTML() {
        // var str = '';
        let elems = [];
        let nameClass = this._nameClass;
        this._intInfos
            .map(info => [info[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH], info[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameEN]])
            .forEach((names, i) => {
            if (i >= 2) {
                return;
            }
            let [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["joinIntName"])(names, 10, 7);
            var dy = (!this.namePos) ? 18 * (i + 1) : -18 * (2 - i);
            dy += this._dy;
            dy *= this._tickFlip;
            dy += 5.953125 - (19.65625 + 13 * (nameZHLn - 1) + 7 * (nameENLn - 1)) / 2;
            elems.push($('<g>', {
                'text-anchor': this._txtAnchor,
                transform: `translate(${this.x + this._intNameDX},${this.y + dy})`,
                class: 'Name ' + nameClass
            }).html(nameHTML[0]));
        });
        return elems;
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML];
    }
}
class Int3LStationHK extends Int3StationHK {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class Int3RStationHK extends Int3StationHK {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI11StationHK extends Int2StationHK {
    constructor(id, data) {
        // data.int2 = data.osi11;
        data.transfer.info[0].push(data.transfer.info[1][0]);
        // data.interchange[0].push(data.interchange[1][1]);
        super(id, data);
        this._osiNames = data.transfer.osi_names[0];
        this._osiType = data.transfer.paid_area ? 'p' : 'u'; // u(npaid) or p(aid);
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi11_hk',
            'transform': `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (!this.namePos) ? 26 : -26; }
    get _txtAnchor() { return 'middle'; }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            'transform': `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            'class': 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [this.intTickHTML, this.iconHTML, this.nameHTML, this.intNameHTML, this.osiNameHTML];
    }
}
class OSI11LStationHK extends OSI11StationHK {
    // OSI name on left
    get _txtAnchor() { return 'end'; }
    get _osiNameDX() { return -13; }
}
class OSI11RStationHK extends OSI11StationHK {
    // OSI name on right
    get _txtAnchor() { return 'start'; }
    get _osiNameDX() { return 13; }
}
class OSI12StationHK extends Int3StationHK {
    constructor(id, data) {
        // data.int3 = data.osi12;
        data.transfer.info[0].unshift(...data.transfer.info[1].slice(0, 2));
        // data.interchange[0].unshift(...data.interchange[1].slice(1,3));
        super(id, data);
        this._osiNames = data.transfer.osi_names[0];
        this._osiType = data.transfer.paid_area ? 'p' : 'u';
    }
    get osiClass() { return this._osiType == 'u' ? 'rmg-stn__mtr--unpaid-osi' : 'rmg-stn__mtr--paid-osi'; }
    get iconHTML() {
        var iconRotation = (!this.namePos) ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi12_hk',
            transform: `translate(${this.x},${this.y})rotate(${iconRotation})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _dy() { return (!this.namePos) ? (26 - 18) : -8; }
    get _osiDY() { return (!this.namePos) ? (26 + 18 + 10) + 8.34375 : -(26 + 18 + 10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return 'middle'; }
    get _osiDX() { return 0; }
    get osiNameHTML() {
        var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            'transform': `translate(${this.x + this._dx + this._osiDX},${this.y + this._osiDY})`,
            'class': `Name ${nameClass}`
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            'x': 0, 'dy': 12, 'class': 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1].split('\\')[0]).append($('<tspan>', { x: 0, dy: 10 }).text(this._osiNames[1].split('\\')[1] || '')));
    }
    get ungrpHTML() {
        return [...this.intTickHTML, this.iconHTML, this.nameHTML, ...this.intNameHTML, this.osiNameHTML];
    }
}
class OSI12LStationHK extends OSI12StationHK {
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
}
class OSI12RStationHK extends OSI12StationHK {
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
}
class OSI22StationHK extends OSI12StationHK {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        this._origIntInfo = data.transfer.info[0][2];
    }
    get _nameTxtAnchor() { return this._osiTxtAnchor; }
    get _nameDY() {
        return this.namePos ? 11.515625 : -11.515625;
    }
    get origIntTickHTML() {
        var tickRotation = this.namePos ? 0 : 180;
        var tickColour = this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].colour];
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["joinIntName"])([this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameZH], this._origIntInfo[_utils__WEBPACK_IMPORTED_MODULE_1__["IntInfoTag"].nameEN]], 10, 7);
        var dy = this.namePos ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': this._txtAnchor,
            transform: `translate(${this.x - this._nameDX},${this.y + dy})`,
            class: `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get _osiNameDX() { return 0; }
    get osiNameHTML() {
        var dy = this._dy - (this.namePos ? 18 + 9 : -27) + 8.34375 - 25.03125 / 2;
        return $('<g>', {
            'text-anchor': this._osiTxtAnchor,
            transform: `translate(${this.x + this._osiNameDX},${this.y + dy})`,
            class: 'Name ' + this._nameClass
        }).append($('<text>').addClass('rmg-name__zh rmg-name__mtr--osi').text(this._osiNames[0])).append($('<text>', {
            x: 0, dy: 12, class: 'rmg-name__en rmg-name__mtr--osi'
        }).text(this._osiNames[1]));
    }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}
class OSI22LStationHK extends OSI22StationHK {
    get _nameDX() { return 3; }
    get _tickRotation() { return 90; }
    get _txtAnchor() { return 'end'; }
    get _intNameDX() { return -24; }
    get _osiNameDX() { return 13; }
    get _osiTxtAnchor() { return 'start'; }
}
class OSI22RStationHK extends OSI22StationHK {
    get _nameDX() { return -3; }
    get _tickRotation() { return -90; }
    get _txtAnchor() { return 'start'; }
    get _intNameDX() { return 24; }
    get _osiNameDX() { return -13; }
    get _osiTxtAnchor() { return 'end'; }
}
class OSI22EndStationHK extends OSI12StationHK {
    constructor(id, data) {
        super(id, data);
        // data mutated by OSI12Station!!!
        [this._origIntCity, this._origIntLine, this._origIntColour, this._origIntFg, this._origIntNameZH, this._origIntNameEN] = data.transfer.info[0][2];
    }
    get origIntTickHTML() {
        var tickRotation = this.namePos ? 180 : 0;
        var tickColour = this._origIntColour;
        var tick = $('<use>', {
            'xlink:href': '#inttick_hk',
            stroke: tickColour,
            transform: `translate(${this.x},${this.y})rotate(${tickRotation})`,
            'class': 'rmg-line rmg-line__mtr rmg-line__change'
        });
        if (this.state == -1) {
            tick.addClass('rmg-line__pass');
        }
        return tick;
    }
    get origIntNameHTML() {
        var [nameHTML, nameZHLn, nameENLn] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["joinIntName"])([this._origIntNameZH, this._origIntNameEN], 10, 7);
        var dy = !this.namePos ? 25 + 5.953125 : -25 + 5.953125 - 18.65625 - 13 * (nameZHLn - 1) - 7 * (nameENLn - 1);
        // dy += this._dy;
        // var nameClass = (this.state == -1) ? 'Pass' : 'Future';
        return $('<g>', {
            'text-anchor': 'middle',
            'transform': `translate(${this.x},${this.y + dy})`,
            'class': `Name ${this._nameClass}`
        }).html(nameHTML[0]);
    }
    get iconHTML() {
        var iconYFlip = this.namePos ? 1 : -1;
        var iconXFlip = (this.children[0] == 'lineend') ? 1 : -1;
        var iconRotation = (this.children[0] == 'lineend') ? 0 : 180;
        return $('<use>', {
            'xlink:href': '#osi22end_hk',
            'transform': `translate(${this.x},${this.y})scale(${iconXFlip},${iconYFlip})`,
            class: [this.iconClass, this.osiClass].join(' ')
        });
    }
    get _tickRotation() { return (this.children[0] == 'lineend') ? -90 : 90; }
    get _tickFlip() { return -1; }
    get _dx() { return (this.children[0] == 'lineend') ? 41 : -41; }
    get _dy() { return !this.namePos ? -18 : 18; }
    get _intNameDX() { return (this.children[0] == 'lineend') ? 24 + 41 : -(24 + 41); }
    get _txtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDY() { return !this.namePos ? (10) + 8.34375 : -(10) + 8.34375 - 25.03125; }
    get _osiTxtAnchor() { return (this.children[0] == 'lineend') ? 'start' : 'end'; }
    get _osiDX() { return (this.children[0] == 'lineend') ? -9 : 9; }
    get ungrpHTML() {
        return [
            ...this.intTickHTML, this.origIntTickHTML,
            this.iconHTML, this.nameHTML,
            ...this.intNameHTML, this.origIntNameHTML, this.osiNameHTML
        ];
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,